// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "VideoTopic.pb.h"

@implementation VideoTopicRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [VideoTopicRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface VideoTopic ()
@property int32_t id;
@property (retain) User* user;
@property (retain) NSString* comment;
@property (retain) Location* location;
@property (retain) NSString* createDate;
@property (retain) NSString* uploadDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathsArray;
@property (retain) PBAppendableArray * videosArray;
@property (retain) PBAppendableArray * videoPathsArray;
@property (retain) VideoCategory* category;
@property (retain) PBAppendableArray * videoTopicRepliesArray;
@property int32_t replyCount;
@property (retain) NSString* title;
@property (retain) Location* uploadLocation;
@property (retain) PBAppendableArray * videoSizesArray;
@property (retain) PBAppendableArray * videoDurationsArray;
@property (retain) PBAppendableArray * videoPixelsArray;
@property (retain) PBAppendableArray * videoDurationCategoriesArray;
@end

@implementation VideoTopic

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasUploadDate {
  return !!hasUploadDate_;
}
- (void) setHasUploadDate:(BOOL) value_ {
  hasUploadDate_ = !!value_;
}
@synthesize uploadDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathsArray;
@dynamic filePaths;
@synthesize videosArray;
@dynamic videos;
@synthesize videoPathsArray;
@dynamic videoPaths;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
@synthesize videoTopicRepliesArray;
@dynamic videoTopicReplies;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value_ {
  hasTitle_ = !!value_;
}
@synthesize title;
- (BOOL) hasUploadLocation {
  return !!hasUploadLocation_;
}
- (void) setHasUploadLocation:(BOOL) value_ {
  hasUploadLocation_ = !!value_;
}
@synthesize uploadLocation;
@synthesize videoSizesArray;
@dynamic videoSizes;
@synthesize videoDurationsArray;
@dynamic videoDurations;
@synthesize videoPixelsArray;
@dynamic videoPixels;
@synthesize videoDurationCategoriesArray;
@dynamic videoDurationCategories;
- (void) dealloc {
  self.user = nil;
  self.comment = nil;
  self.location = nil;
  self.createDate = nil;
  self.uploadDate = nil;
  self.filesArray = nil;
  self.filePathsArray = nil;
  self.videosArray = nil;
  self.videoPathsArray = nil;
  self.category = nil;
  self.videoTopicRepliesArray = nil;
  self.title = nil;
  self.uploadLocation = nil;
  self.videoSizesArray = nil;
  self.videoDurationsArray = nil;
  self.videoPixelsArray = nil;
  self.videoDurationCategoriesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.comment = @"";
    self.location = [Location defaultInstance];
    self.createDate = @"";
    self.uploadDate = @"";
    self.category = [VideoCategory defaultInstance];
    self.replyCount = 0;
    self.title = @"";
    self.uploadLocation = [Location defaultInstance];
  }
  return self;
}
static VideoTopic* defaultVideoTopicInstance = nil;
+ (void) initialize {
  if (self == [VideoTopic class]) {
    defaultVideoTopicInstance = [[VideoTopic alloc] init];
  }
}
+ (VideoTopic*) defaultInstance {
  return defaultVideoTopicInstance;
}
- (VideoTopic*) defaultInstance {
  return defaultVideoTopicInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePaths {
  return filePathsArray;
}
- (NSString*)filePathsAtIndex:(NSUInteger)index {
  return [filePathsArray objectAtIndex:index];
}
- (PBArray *)videos {
  return videosArray;
}
- (NSData*)videosAtIndex:(NSUInteger)index {
  return [videosArray objectAtIndex:index];
}
- (PBArray *)videoPaths {
  return videoPathsArray;
}
- (NSString*)videoPathsAtIndex:(NSUInteger)index {
  return [videoPathsArray objectAtIndex:index];
}
- (PBArray *)videoTopicReplies {
  return videoTopicRepliesArray;
}
- (VideoTopicReply*)videoTopicRepliesAtIndex:(NSUInteger)index {
  return [videoTopicRepliesArray objectAtIndex:index];
}
- (PBArray *)videoSizes {
  return videoSizesArray;
}
- (NSString*)videoSizesAtIndex:(NSUInteger)index {
  return [videoSizesArray objectAtIndex:index];
}
- (PBArray *)videoDurations {
  return videoDurationsArray;
}
- (NSString*)videoDurationsAtIndex:(NSUInteger)index {
  return [videoDurationsArray objectAtIndex:index];
}
- (PBArray *)videoPixels {
  return videoPixelsArray;
}
- (NSString*)videoPixelsAtIndex:(NSUInteger)index {
  return [videoPixelsArray objectAtIndex:index];
}
- (PBArray *)videoDurationCategories {
  return videoDurationCategoriesArray;
}
- (VideoDurationCategory*)videoDurationCategoriesAtIndex:(NSUInteger)index {
  return [videoDurationCategoriesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasTitle) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (VideoTopicReply* element in self.videoTopicReplies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasUploadLocation) {
    if (!self.uploadLocation.isInitialized) {
      return NO;
    }
  }
  for (VideoDurationCategory* element in self.videoDurationCategories) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasLocation) {
    [output writeMessage:4 value:self.location];
  }
  if (self.hasCreateDate) {
    [output writeString:5 value:self.createDate];
  }
  if (self.hasUploadDate) {
    [output writeString:6 value:self.uploadDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathsArrayCount = self.filePathsArray.count;
  if (filePathsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathsArray.data;
    for (NSUInteger i = 0; i < filePathsArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  const NSUInteger videosArrayCount = self.videosArray.count;
  if (videosArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.videosArray.data;
    for (NSUInteger i = 0; i < videosArrayCount; ++i) {
      [output writeData:9 value:values[i]];
    }
  }
  const NSUInteger videoPathsArrayCount = self.videoPathsArray.count;
  if (videoPathsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoPathsArray.data;
    for (NSUInteger i = 0; i < videoPathsArrayCount; ++i) {
      [output writeString:10 value:values[i]];
    }
  }
  if (self.hasCategory) {
    [output writeMessage:11 value:self.category];
  }
  for (VideoTopicReply *element in self.videoTopicRepliesArray) {
    [output writeMessage:12 value:element];
  }
  if (self.hasReplyCount) {
    [output writeInt32:13 value:self.replyCount];
  }
  if (self.hasTitle) {
    [output writeString:14 value:self.title];
  }
  if (self.hasUploadLocation) {
    [output writeMessage:15 value:self.uploadLocation];
  }
  const NSUInteger videoSizesArrayCount = self.videoSizesArray.count;
  if (videoSizesArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoSizesArray.data;
    for (NSUInteger i = 0; i < videoSizesArrayCount; ++i) {
      [output writeString:16 value:values[i]];
    }
  }
  const NSUInteger videoDurationsArrayCount = self.videoDurationsArray.count;
  if (videoDurationsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoDurationsArray.data;
    for (NSUInteger i = 0; i < videoDurationsArrayCount; ++i) {
      [output writeString:17 value:values[i]];
    }
  }
  const NSUInteger videoPixelsArrayCount = self.videoPixelsArray.count;
  if (videoPixelsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoPixelsArray.data;
    for (NSUInteger i = 0; i < videoPixelsArrayCount; ++i) {
      [output writeString:18 value:values[i]];
    }
  }
  for (VideoDurationCategory *element in self.videoDurationCategoriesArray) {
    [output writeMessage:19 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(4, self.location);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(5, self.createDate);
  }
  if (self.hasUploadDate) {
    size_ += computeStringSize(6, self.uploadDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathsArray.count;
    const NSString* *values = (const NSString* *)self.filePathsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videosArray.count;
    const NSData* *values = (const NSData* *)self.videosArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoPathsArray.count;
    const NSString* *values = (const NSString* *)self.videoPathsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(11, self.category);
  }
  for (VideoTopicReply *element in self.videoTopicRepliesArray) {
    size_ += computeMessageSize(12, element);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(13, self.replyCount);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(14, self.title);
  }
  if (self.hasUploadLocation) {
    size_ += computeMessageSize(15, self.uploadLocation);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoSizesArray.count;
    const NSString* *values = (const NSString* *)self.videoSizesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoDurationsArray.count;
    const NSString* *values = (const NSString* *)self.videoDurationsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoPixelsArray.count;
    const NSString* *values = (const NSString* *)self.videoPixelsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  for (VideoDurationCategory *element in self.videoDurationCategoriesArray) {
    size_ += computeMessageSize(19, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoTopic*) parseFromData:(NSData*) data {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromData:data] build];
}
+ (VideoTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoTopic*) parseFromInputStream:(NSInputStream*) input {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromInputStream:input] build];
}
+ (VideoTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromCodedInputStream:input] build];
}
+ (VideoTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopic*)[[[VideoTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopic_Builder*) builder {
  return [[[VideoTopic_Builder alloc] init] autorelease];
}
+ (VideoTopic_Builder*) builderWithPrototype:(VideoTopic*) prototype {
  return [[VideoTopic builder] mergeFrom:prototype];
}
- (VideoTopic_Builder*) builder {
  return [VideoTopic builder];
}
- (VideoTopic_Builder*) toBuilder {
  return [VideoTopic builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  if (self.hasUploadDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uploadDate", self.uploadDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePaths", element];
  }
  for (NSData* element in self.videosArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videos", element];
  }
  for (NSString* element in self.videoPathsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoPaths", element];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (VideoTopicReply* element in self.videoTopicRepliesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"videoTopicReplies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasUploadLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"uploadLocation"];
    [self.uploadLocation writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSString* element in self.videoSizesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoSizes", element];
  }
  for (NSString* element in self.videoDurationsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoDurations", element];
  }
  for (NSString* element in self.videoPixelsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoPixels", element];
  }
  for (VideoDurationCategory* element in self.videoDurationCategoriesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"videoDurationCategories"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoTopic class]]) {
    return NO;
  }
  VideoTopic *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      self.hasUploadDate == otherMessage.hasUploadDate &&
      (!self.hasUploadDate || [self.uploadDate isEqual:otherMessage.uploadDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathsArray isEqualToArray:otherMessage.filePathsArray] &&
      [self.videosArray isEqualToArray:otherMessage.videosArray] &&
      [self.videoPathsArray isEqualToArray:otherMessage.videoPathsArray] &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      [self.videoTopicRepliesArray isEqualToArray:otherMessage.videoTopicRepliesArray] &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasUploadLocation == otherMessage.hasUploadLocation &&
      (!self.hasUploadLocation || [self.uploadLocation isEqual:otherMessage.uploadLocation]) &&
      [self.videoSizesArray isEqualToArray:otherMessage.videoSizesArray] &&
      [self.videoDurationsArray isEqualToArray:otherMessage.videoDurationsArray] &&
      [self.videoPixelsArray isEqualToArray:otherMessage.videoPixelsArray] &&
      [self.videoDurationCategoriesArray isEqualToArray:otherMessage.videoDurationCategoriesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  if (self.hasUploadDate) {
    hashCode = hashCode * 31 + [self.uploadDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSData* element in self.videosArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoPathsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  for (VideoTopicReply* element in self.videoTopicRepliesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasUploadLocation) {
    hashCode = hashCode * 31 + [self.uploadLocation hash];
  }
  for (NSString* element in self.videoSizesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoDurationsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoPixelsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (VideoDurationCategory* element in self.videoDurationCategoriesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoTopic_Builder()
@property (retain) VideoTopic* result;
@end

@implementation VideoTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[VideoTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoTopic_Builder*) clear {
  self.result = [[[VideoTopic alloc] init] autorelease];
  return self;
}
- (VideoTopic_Builder*) clone {
  return [VideoTopic builderWithPrototype:result];
}
- (VideoTopic*) defaultInstance {
  return [VideoTopic defaultInstance];
}
- (VideoTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoTopic*) buildPartial {
  VideoTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (VideoTopic_Builder*) mergeFrom:(VideoTopic*) other {
  if (other == [VideoTopic defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasUploadDate) {
    [self setUploadDate:other.uploadDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathsArray.count > 0) {
    if (result.filePathsArray == nil) {
      result.filePathsArray = [[other.filePathsArray copyWithZone:[other.filePathsArray zone]] autorelease];
    } else {
      [result.filePathsArray appendArray:other.filePathsArray];
    }
  }
  if (other.videosArray.count > 0) {
    if (result.videosArray == nil) {
      result.videosArray = [[other.videosArray copyWithZone:[other.videosArray zone]] autorelease];
    } else {
      [result.videosArray appendArray:other.videosArray];
    }
  }
  if (other.videoPathsArray.count > 0) {
    if (result.videoPathsArray == nil) {
      result.videoPathsArray = [[other.videoPathsArray copyWithZone:[other.videoPathsArray zone]] autorelease];
    } else {
      [result.videoPathsArray appendArray:other.videoPathsArray];
    }
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.videoTopicRepliesArray.count > 0) {
    if (result.videoTopicRepliesArray == nil) {
      result.videoTopicRepliesArray = [[other.videoTopicRepliesArray copyWithZone:[other.videoTopicRepliesArray zone]] autorelease];
    } else {
      [result.videoTopicRepliesArray appendArray:other.videoTopicRepliesArray];
    }
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasUploadLocation) {
    [self mergeUploadLocation:other.uploadLocation];
  }
  if (other.videoSizesArray.count > 0) {
    if (result.videoSizesArray == nil) {
      result.videoSizesArray = [[other.videoSizesArray copyWithZone:[other.videoSizesArray zone]] autorelease];
    } else {
      [result.videoSizesArray appendArray:other.videoSizesArray];
    }
  }
  if (other.videoDurationsArray.count > 0) {
    if (result.videoDurationsArray == nil) {
      result.videoDurationsArray = [[other.videoDurationsArray copyWithZone:[other.videoDurationsArray zone]] autorelease];
    } else {
      [result.videoDurationsArray appendArray:other.videoDurationsArray];
    }
  }
  if (other.videoPixelsArray.count > 0) {
    if (result.videoPixelsArray == nil) {
      result.videoPixelsArray = [[other.videoPixelsArray copyWithZone:[other.videoPixelsArray zone]] autorelease];
    } else {
      [result.videoPixelsArray appendArray:other.videoPixelsArray];
    }
  }
  if (other.videoDurationCategoriesArray.count > 0) {
    if (result.videoDurationCategoriesArray == nil) {
      result.videoDurationCategoriesArray = [[other.videoDurationCategoriesArray copyWithZone:[other.videoDurationCategoriesArray zone]] autorelease];
    } else {
      [result.videoDurationCategoriesArray appendArray:other.videoDurationCategoriesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 50: {
        [self setUploadDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePaths:[input readString]];
        break;
      }
      case 74: {
        [self addVideos:[input readData]];
        break;
      }
      case 82: {
        [self addVideoPaths:[input readString]];
        break;
      }
      case 90: {
        VideoCategory_Builder* subBuilder = [VideoCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        VideoTopicReply_Builder* subBuilder = [VideoTopicReply builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVideoTopicReplies:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 114: {
        [self setTitle:[input readString]];
        break;
      }
      case 122: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasUploadLocation) {
          [subBuilder mergeFrom:self.uploadLocation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUploadLocation:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        [self addVideoSizes:[input readString]];
        break;
      }
      case 138: {
        [self addVideoDurations:[input readString]];
        break;
      }
      case 146: {
        [self addVideoPixels:[input readString]];
        break;
      }
      case 154: {
        VideoDurationCategory_Builder* subBuilder = [VideoDurationCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVideoDurationCategories:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (VideoTopic_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (VideoTopic_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (VideoTopic_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (VideoTopic_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (VideoTopic_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (VideoTopic_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (VideoTopic_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (VideoTopic_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (VideoTopic_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (VideoTopic_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (VideoTopic_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (VideoTopic_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (VideoTopic_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (VideoTopic_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (BOOL) hasUploadDate {
  return result.hasUploadDate;
}
- (NSString*) uploadDate {
  return result.uploadDate;
}
- (VideoTopic_Builder*) setUploadDate:(NSString*) value {
  result.hasUploadDate = YES;
  result.uploadDate = value;
  return self;
}
- (VideoTopic_Builder*) clearUploadDate {
  result.hasUploadDate = NO;
  result.uploadDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (VideoTopic_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePaths {
  return result.filePathsArray;
}
- (NSString*)filePathsAtIndex:(NSUInteger)index {
  return [result filePathsAtIndex:index];
}
- (VideoTopic_Builder *)addFilePaths:(NSString*)value {
  if (result.filePathsArray == nil) {
    result.filePathsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathsArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setFilePathsArray:(NSArray *)array {
  result.filePathsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setFilePathsValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearFilePaths {
  result.filePathsArray = nil;
  return self;
}
- (PBAppendableArray *)videos {
  return result.videosArray;
}
- (NSData*)videosAtIndex:(NSUInteger)index {
  return [result videosAtIndex:index];
}
- (VideoTopic_Builder *)addVideos:(NSData*)value {
  if (result.videosArray == nil) {
    result.videosArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videosArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideosArray:(NSArray *)array {
  result.videosArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideosValues:(const NSData* *)values count:(NSUInteger)count {
  result.videosArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideos {
  result.videosArray = nil;
  return self;
}
- (PBAppendableArray *)videoPaths {
  return result.videoPathsArray;
}
- (NSString*)videoPathsAtIndex:(NSUInteger)index {
  return [result videoPathsAtIndex:index];
}
- (VideoTopic_Builder *)addVideoPaths:(NSString*)value {
  if (result.videoPathsArray == nil) {
    result.videoPathsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoPathsArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoPathsArray:(NSArray *)array {
  result.videoPathsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoPathsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoPathsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoPaths {
  result.videoPathsArray = nil;
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (VideoCategory*) category {
  return result.category;
}
- (VideoTopic_Builder*) setCategory:(VideoCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (VideoTopic_Builder*) setCategoryBuilder:(VideoCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (VideoTopic_Builder*) mergeCategory:(VideoCategory*) value {
  if (result.hasCategory &&
      result.category != [VideoCategory defaultInstance]) {
    result.category =
      [[[VideoCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (VideoTopic_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [VideoCategory defaultInstance];
  return self;
}
- (PBAppendableArray *)videoTopicReplies {
  return result.videoTopicRepliesArray;
}
- (VideoTopicReply*)videoTopicRepliesAtIndex:(NSUInteger)index {
  return [result videoTopicRepliesAtIndex:index];
}
- (VideoTopic_Builder *)addVideoTopicReplies:(VideoTopicReply*)value {
  if (result.videoTopicRepliesArray == nil) {
    result.videoTopicRepliesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoTopicRepliesArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoTopicRepliesArray:(NSArray *)array {
  result.videoTopicRepliesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoTopicRepliesValues:(const VideoTopicReply* *)values count:(NSUInteger)count {
  result.videoTopicRepliesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoTopicReplies {
  result.videoTopicRepliesArray = nil;
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (VideoTopic_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (VideoTopic_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (VideoTopic_Builder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (VideoTopic_Builder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasUploadLocation {
  return result.hasUploadLocation;
}
- (Location*) uploadLocation {
  return result.uploadLocation;
}
- (VideoTopic_Builder*) setUploadLocation:(Location*) value {
  result.hasUploadLocation = YES;
  result.uploadLocation = value;
  return self;
}
- (VideoTopic_Builder*) setUploadLocationBuilder:(Location_Builder*) builderForValue {
  return [self setUploadLocation:[builderForValue build]];
}
- (VideoTopic_Builder*) mergeUploadLocation:(Location*) value {
  if (result.hasUploadLocation &&
      result.uploadLocation != [Location defaultInstance]) {
    result.uploadLocation =
      [[[Location builderWithPrototype:result.uploadLocation] mergeFrom:value] buildPartial];
  } else {
    result.uploadLocation = value;
  }
  result.hasUploadLocation = YES;
  return self;
}
- (VideoTopic_Builder*) clearUploadLocation {
  result.hasUploadLocation = NO;
  result.uploadLocation = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)videoSizes {
  return result.videoSizesArray;
}
- (NSString*)videoSizesAtIndex:(NSUInteger)index {
  return [result videoSizesAtIndex:index];
}
- (VideoTopic_Builder *)addVideoSizes:(NSString*)value {
  if (result.videoSizesArray == nil) {
    result.videoSizesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoSizesArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoSizesArray:(NSArray *)array {
  result.videoSizesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoSizesValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoSizesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoSizes {
  result.videoSizesArray = nil;
  return self;
}
- (PBAppendableArray *)videoDurations {
  return result.videoDurationsArray;
}
- (NSString*)videoDurationsAtIndex:(NSUInteger)index {
  return [result videoDurationsAtIndex:index];
}
- (VideoTopic_Builder *)addVideoDurations:(NSString*)value {
  if (result.videoDurationsArray == nil) {
    result.videoDurationsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoDurationsArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoDurationsArray:(NSArray *)array {
  result.videoDurationsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoDurationsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoDurationsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoDurations {
  result.videoDurationsArray = nil;
  return self;
}
- (PBAppendableArray *)videoPixels {
  return result.videoPixelsArray;
}
- (NSString*)videoPixelsAtIndex:(NSUInteger)index {
  return [result videoPixelsAtIndex:index];
}
- (VideoTopic_Builder *)addVideoPixels:(NSString*)value {
  if (result.videoPixelsArray == nil) {
    result.videoPixelsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoPixelsArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoPixelsArray:(NSArray *)array {
  result.videoPixelsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoPixelsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoPixelsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoPixels {
  result.videoPixelsArray = nil;
  return self;
}
- (PBAppendableArray *)videoDurationCategories {
  return result.videoDurationCategoriesArray;
}
- (VideoDurationCategory*)videoDurationCategoriesAtIndex:(NSUInteger)index {
  return [result videoDurationCategoriesAtIndex:index];
}
- (VideoTopic_Builder *)addVideoDurationCategories:(VideoDurationCategory*)value {
  if (result.videoDurationCategoriesArray == nil) {
    result.videoDurationCategoriesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoDurationCategoriesArray addObject:value];
  return self;
}
- (VideoTopic_Builder *)setVideoDurationCategoriesArray:(NSArray *)array {
  result.videoDurationCategoriesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)setVideoDurationCategoriesValues:(const VideoDurationCategory* *)values count:(NSUInteger)count {
  result.videoDurationCategoriesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopic_Builder *)clearVideoDurationCategories {
  result.videoDurationCategoriesArray = nil;
  return self;
}
@end

@interface VideoTopicReply ()
@property int32_t id;
@property int32_t videoTopicId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation VideoTopicReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasVideoTopicId {
  return !!hasVideoTopicId_;
}
- (void) setHasVideoTopicId:(BOOL) value_ {
  hasVideoTopicId_ = !!value_;
}
@synthesize videoTopicId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.videoTopicId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static VideoTopicReply* defaultVideoTopicReplyInstance = nil;
+ (void) initialize {
  if (self == [VideoTopicReply class]) {
    defaultVideoTopicReplyInstance = [[VideoTopicReply alloc] init];
  }
}
+ (VideoTopicReply*) defaultInstance {
  return defaultVideoTopicReplyInstance;
}
- (VideoTopicReply*) defaultInstance {
  return defaultVideoTopicReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasVideoTopicId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasVideoTopicId) {
    [output writeInt32:2 value:self.videoTopicId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasVideoTopicId) {
    size_ += computeInt32Size(2, self.videoTopicId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoTopicReply*) parseFromData:(NSData*) data {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromData:data] build];
}
+ (VideoTopicReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicReply*) parseFromInputStream:(NSInputStream*) input {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromInputStream:input] build];
}
+ (VideoTopicReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromCodedInputStream:input] build];
}
+ (VideoTopicReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicReply*)[[[VideoTopicReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicReply_Builder*) builder {
  return [[[VideoTopicReply_Builder alloc] init] autorelease];
}
+ (VideoTopicReply_Builder*) builderWithPrototype:(VideoTopicReply*) prototype {
  return [[VideoTopicReply builder] mergeFrom:prototype];
}
- (VideoTopicReply_Builder*) builder {
  return [VideoTopicReply builder];
}
- (VideoTopicReply_Builder*) toBuilder {
  return [VideoTopicReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasVideoTopicId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoTopicId", [NSNumber numberWithInt:self.videoTopicId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoTopicReply class]]) {
    return NO;
  }
  VideoTopicReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasVideoTopicId == otherMessage.hasVideoTopicId &&
      (!self.hasVideoTopicId || self.videoTopicId == otherMessage.videoTopicId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasVideoTopicId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.videoTopicId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoTopicReply_Builder()
@property (retain) VideoTopicReply* result;
@end

@implementation VideoTopicReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[VideoTopicReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoTopicReply_Builder*) clear {
  self.result = [[[VideoTopicReply alloc] init] autorelease];
  return self;
}
- (VideoTopicReply_Builder*) clone {
  return [VideoTopicReply builderWithPrototype:result];
}
- (VideoTopicReply*) defaultInstance {
  return [VideoTopicReply defaultInstance];
}
- (VideoTopicReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoTopicReply*) buildPartial {
  VideoTopicReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (VideoTopicReply_Builder*) mergeFrom:(VideoTopicReply*) other {
  if (other == [VideoTopicReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasVideoTopicId) {
    [self setVideoTopicId:other.videoTopicId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoTopicReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoTopicReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setVideoTopicId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (VideoTopicReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (VideoTopicReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasVideoTopicId {
  return result.hasVideoTopicId;
}
- (int32_t) videoTopicId {
  return result.videoTopicId;
}
- (VideoTopicReply_Builder*) setVideoTopicId:(int32_t) value {
  result.hasVideoTopicId = YES;
  result.videoTopicId = value;
  return self;
}
- (VideoTopicReply_Builder*) clearVideoTopicId {
  result.hasVideoTopicId = NO;
  result.videoTopicId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (VideoTopicReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (VideoTopicReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (VideoTopicReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (VideoTopicReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (VideoTopicReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (VideoTopicReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (VideoTopicReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (VideoTopicReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (VideoTopicReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (VideoTopicReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (VideoTopicReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (VideoTopicReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (VideoTopicReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (VideoTopicReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

@interface PageVideoTopic ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * videoTopicsArray;
@end

@implementation PageVideoTopic

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize videoTopicsArray;
@dynamic videoTopics;
- (void) dealloc {
  self.page = nil;
  self.videoTopicsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageVideoTopic* defaultPageVideoTopicInstance = nil;
+ (void) initialize {
  if (self == [PageVideoTopic class]) {
    defaultPageVideoTopicInstance = [[PageVideoTopic alloc] init];
  }
}
+ (PageVideoTopic*) defaultInstance {
  return defaultPageVideoTopicInstance;
}
- (PageVideoTopic*) defaultInstance {
  return defaultPageVideoTopicInstance;
}
- (PBArray *)videoTopics {
  return videoTopicsArray;
}
- (VideoTopic*)videoTopicsAtIndex:(NSUInteger)index {
  return [videoTopicsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (VideoTopic* element in self.videoTopics) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (VideoTopic *element in self.videoTopicsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (VideoTopic *element in self.videoTopicsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageVideoTopic*) parseFromData:(NSData*) data {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromData:data] build];
}
+ (PageVideoTopic*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageVideoTopic*) parseFromInputStream:(NSInputStream*) input {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromInputStream:input] build];
}
+ (PageVideoTopic*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageVideoTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromCodedInputStream:input] build];
}
+ (PageVideoTopic*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageVideoTopic*)[[[PageVideoTopic builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageVideoTopic_Builder*) builder {
  return [[[PageVideoTopic_Builder alloc] init] autorelease];
}
+ (PageVideoTopic_Builder*) builderWithPrototype:(PageVideoTopic*) prototype {
  return [[PageVideoTopic builder] mergeFrom:prototype];
}
- (PageVideoTopic_Builder*) builder {
  return [PageVideoTopic builder];
}
- (PageVideoTopic_Builder*) toBuilder {
  return [PageVideoTopic builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (VideoTopic* element in self.videoTopicsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"videoTopics"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageVideoTopic class]]) {
    return NO;
  }
  PageVideoTopic *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.videoTopicsArray isEqualToArray:otherMessage.videoTopicsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (VideoTopic* element in self.videoTopicsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageVideoTopic_Builder()
@property (retain) PageVideoTopic* result;
@end

@implementation PageVideoTopic_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageVideoTopic alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageVideoTopic_Builder*) clear {
  self.result = [[[PageVideoTopic alloc] init] autorelease];
  return self;
}
- (PageVideoTopic_Builder*) clone {
  return [PageVideoTopic builderWithPrototype:result];
}
- (PageVideoTopic*) defaultInstance {
  return [PageVideoTopic defaultInstance];
}
- (PageVideoTopic*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageVideoTopic*) buildPartial {
  PageVideoTopic* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageVideoTopic_Builder*) mergeFrom:(PageVideoTopic*) other {
  if (other == [PageVideoTopic defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.videoTopicsArray.count > 0) {
    if (result.videoTopicsArray == nil) {
      result.videoTopicsArray = [[other.videoTopicsArray copyWithZone:[other.videoTopicsArray zone]] autorelease];
    } else {
      [result.videoTopicsArray appendArray:other.videoTopicsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageVideoTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageVideoTopic_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        VideoTopic_Builder* subBuilder = [VideoTopic builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVideoTopics:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageVideoTopic_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageVideoTopic_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageVideoTopic_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageVideoTopic_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)videoTopics {
  return result.videoTopicsArray;
}
- (VideoTopic*)videoTopicsAtIndex:(NSUInteger)index {
  return [result videoTopicsAtIndex:index];
}
- (PageVideoTopic_Builder *)addVideoTopics:(VideoTopic*)value {
  if (result.videoTopicsArray == nil) {
    result.videoTopicsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoTopicsArray addObject:value];
  return self;
}
- (PageVideoTopic_Builder *)setVideoTopicsArray:(NSArray *)array {
  result.videoTopicsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageVideoTopic_Builder *)setVideoTopicsValues:(const VideoTopic* *)values count:(NSUInteger)count {
  result.videoTopicsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageVideoTopic_Builder *)clearVideoTopics {
  result.videoTopicsArray = nil;
  return self;
}
@end

@interface VideoTopicParams ()
@property (retain) VideoCategory* category;
@property int32_t page;
@property (retain) PBAppendableArray * paramUsersArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property (retain) NSString* source;
@property (retain) PBAppendableArray * departmentsArray;
@end

@implementation VideoTopicParams

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize paramUsersArray;
@dynamic paramUsers;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value_ {
  hasSource_ = !!value_;
}
@synthesize source;
@synthesize departmentsArray;
@dynamic departments;
- (void) dealloc {
  self.category = nil;
  self.paramUsersArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  self.source = nil;
  self.departmentsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.category = [VideoCategory defaultInstance];
    self.page = 0;
    self.startDate = @"";
    self.endDate = @"";
    self.source = @"";
  }
  return self;
}
static VideoTopicParams* defaultVideoTopicParamsInstance = nil;
+ (void) initialize {
  if (self == [VideoTopicParams class]) {
    defaultVideoTopicParamsInstance = [[VideoTopicParams alloc] init];
  }
}
+ (VideoTopicParams*) defaultInstance {
  return defaultVideoTopicParamsInstance;
}
- (VideoTopicParams*) defaultInstance {
  return defaultVideoTopicParamsInstance;
}
- (PBArray *)paramUsers {
  return paramUsersArray;
}
- (User*)paramUsersAtIndex:(NSUInteger)index {
  return [paramUsersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.paramUsers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeMessage:1 value:self.category];
  }
  if (self.hasPage) {
    [output writeInt32:2 value:self.page];
  }
  for (User *element in self.paramUsersArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:4 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:5 value:self.endDate];
  }
  if (self.hasSource) {
    [output writeString:6 value:self.source];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeMessageSize(1, self.category);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(2, self.page);
  }
  for (User *element in self.paramUsersArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(4, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(5, self.endDate);
  }
  if (self.hasSource) {
    size_ += computeStringSize(6, self.source);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(7, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoTopicParams*) parseFromData:(NSData*) data {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromData:data] build];
}
+ (VideoTopicParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicParams*) parseFromInputStream:(NSInputStream*) input {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromInputStream:input] build];
}
+ (VideoTopicParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromCodedInputStream:input] build];
}
+ (VideoTopicParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoTopicParams*)[[[VideoTopicParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoTopicParams_Builder*) builder {
  return [[[VideoTopicParams_Builder alloc] init] autorelease];
}
+ (VideoTopicParams_Builder*) builderWithPrototype:(VideoTopicParams*) prototype {
  return [[VideoTopicParams builder] mergeFrom:prototype];
}
- (VideoTopicParams_Builder*) builder {
  return [VideoTopicParams builder];
}
- (VideoTopicParams_Builder*) toBuilder {
  return [VideoTopicParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  for (User* element in self.paramUsersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"paramUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoTopicParams class]]) {
    return NO;
  }
  VideoTopicParams *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.paramUsersArray isEqualToArray:otherMessage.paramUsersArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  for (User* element in self.paramUsersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoTopicParams_Builder()
@property (retain) VideoTopicParams* result;
@end

@implementation VideoTopicParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[VideoTopicParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoTopicParams_Builder*) clear {
  self.result = [[[VideoTopicParams alloc] init] autorelease];
  return self;
}
- (VideoTopicParams_Builder*) clone {
  return [VideoTopicParams builderWithPrototype:result];
}
- (VideoTopicParams*) defaultInstance {
  return [VideoTopicParams defaultInstance];
}
- (VideoTopicParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoTopicParams*) buildPartial {
  VideoTopicParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (VideoTopicParams_Builder*) mergeFrom:(VideoTopicParams*) other {
  if (other == [VideoTopicParams defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.paramUsersArray.count > 0) {
    if (result.paramUsersArray == nil) {
      result.paramUsersArray = [[other.paramUsersArray copyWithZone:[other.paramUsersArray zone]] autorelease];
    } else {
      [result.paramUsersArray appendArray:other.paramUsersArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoTopicParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoTopicParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        VideoCategory_Builder* subBuilder = [VideoCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setPage:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addParamUsers:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStartDate:[input readString]];
        break;
      }
      case 42: {
        [self setEndDate:[input readString]];
        break;
      }
      case 50: {
        [self setSource:[input readString]];
        break;
      }
      case 58: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (VideoCategory*) category {
  return result.category;
}
- (VideoTopicParams_Builder*) setCategory:(VideoCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (VideoTopicParams_Builder*) setCategoryBuilder:(VideoCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (VideoTopicParams_Builder*) mergeCategory:(VideoCategory*) value {
  if (result.hasCategory &&
      result.category != [VideoCategory defaultInstance]) {
    result.category =
      [[[VideoCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (VideoTopicParams_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [VideoCategory defaultInstance];
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (VideoTopicParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (VideoTopicParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (PBAppendableArray *)paramUsers {
  return result.paramUsersArray;
}
- (User*)paramUsersAtIndex:(NSUInteger)index {
  return [result paramUsersAtIndex:index];
}
- (VideoTopicParams_Builder *)addParamUsers:(User*)value {
  if (result.paramUsersArray == nil) {
    result.paramUsersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.paramUsersArray addObject:value];
  return self;
}
- (VideoTopicParams_Builder *)setParamUsersArray:(NSArray *)array {
  result.paramUsersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicParams_Builder *)setParamUsersValues:(const User* *)values count:(NSUInteger)count {
  result.paramUsersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicParams_Builder *)clearParamUsers {
  result.paramUsersArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (VideoTopicParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (VideoTopicParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (VideoTopicParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (VideoTopicParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (VideoTopicParams_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (VideoTopicParams_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (VideoTopicParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (VideoTopicParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (VideoTopicParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
@end

@interface VideoCategory ()
@property int32_t id;
@property (retain) NSString* name;
@end

@implementation VideoCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static VideoCategory* defaultVideoCategoryInstance = nil;
+ (void) initialize {
  if (self == [VideoCategory class]) {
    defaultVideoCategoryInstance = [[VideoCategory alloc] init];
  }
}
+ (VideoCategory*) defaultInstance {
  return defaultVideoCategoryInstance;
}
- (VideoCategory*) defaultInstance {
  return defaultVideoCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoCategory*) parseFromData:(NSData*) data {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromData:data] build];
}
+ (VideoCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoCategory*) parseFromInputStream:(NSInputStream*) input {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromInputStream:input] build];
}
+ (VideoCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromCodedInputStream:input] build];
}
+ (VideoCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoCategory*)[[[VideoCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoCategory_Builder*) builder {
  return [[[VideoCategory_Builder alloc] init] autorelease];
}
+ (VideoCategory_Builder*) builderWithPrototype:(VideoCategory*) prototype {
  return [[VideoCategory builder] mergeFrom:prototype];
}
- (VideoCategory_Builder*) builder {
  return [VideoCategory builder];
}
- (VideoCategory_Builder*) toBuilder {
  return [VideoCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoCategory class]]) {
    return NO;
  }
  VideoCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoCategory_Builder()
@property (retain) VideoCategory* result;
@end

@implementation VideoCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[VideoCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoCategory_Builder*) clear {
  self.result = [[[VideoCategory alloc] init] autorelease];
  return self;
}
- (VideoCategory_Builder*) clone {
  return [VideoCategory builderWithPrototype:result];
}
- (VideoCategory*) defaultInstance {
  return [VideoCategory defaultInstance];
}
- (VideoCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoCategory*) buildPartial {
  VideoCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (VideoCategory_Builder*) mergeFrom:(VideoCategory*) other {
  if (other == [VideoCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (VideoCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (VideoCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (VideoCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (VideoCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface VideoDurationCategory ()
@property int32_t id;
@property (retain) NSString* durationValue;
@end

@implementation VideoDurationCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasDurationValue {
  return !!hasDurationValue_;
}
- (void) setHasDurationValue:(BOOL) value_ {
  hasDurationValue_ = !!value_;
}
@synthesize durationValue;
- (void) dealloc {
  self.durationValue = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.durationValue = @"";
  }
  return self;
}
static VideoDurationCategory* defaultVideoDurationCategoryInstance = nil;
+ (void) initialize {
  if (self == [VideoDurationCategory class]) {
    defaultVideoDurationCategoryInstance = [[VideoDurationCategory alloc] init];
  }
}
+ (VideoDurationCategory*) defaultInstance {
  return defaultVideoDurationCategoryInstance;
}
- (VideoDurationCategory*) defaultInstance {
  return defaultVideoDurationCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasDurationValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasDurationValue) {
    [output writeString:2 value:self.durationValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasDurationValue) {
    size_ += computeStringSize(2, self.durationValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoDurationCategory*) parseFromData:(NSData*) data {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromData:data] build];
}
+ (VideoDurationCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoDurationCategory*) parseFromInputStream:(NSInputStream*) input {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromInputStream:input] build];
}
+ (VideoDurationCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoDurationCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromCodedInputStream:input] build];
}
+ (VideoDurationCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoDurationCategory*)[[[VideoDurationCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoDurationCategory_Builder*) builder {
  return [[[VideoDurationCategory_Builder alloc] init] autorelease];
}
+ (VideoDurationCategory_Builder*) builderWithPrototype:(VideoDurationCategory*) prototype {
  return [[VideoDurationCategory builder] mergeFrom:prototype];
}
- (VideoDurationCategory_Builder*) builder {
  return [VideoDurationCategory builder];
}
- (VideoDurationCategory_Builder*) toBuilder {
  return [VideoDurationCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasDurationValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationValue", self.durationValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoDurationCategory class]]) {
    return NO;
  }
  VideoDurationCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasDurationValue == otherMessage.hasDurationValue &&
      (!self.hasDurationValue || [self.durationValue isEqual:otherMessage.durationValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasDurationValue) {
    hashCode = hashCode * 31 + [self.durationValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoDurationCategory_Builder()
@property (retain) VideoDurationCategory* result;
@end

@implementation VideoDurationCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[VideoDurationCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoDurationCategory_Builder*) clear {
  self.result = [[[VideoDurationCategory alloc] init] autorelease];
  return self;
}
- (VideoDurationCategory_Builder*) clone {
  return [VideoDurationCategory builderWithPrototype:result];
}
- (VideoDurationCategory*) defaultInstance {
  return [VideoDurationCategory defaultInstance];
}
- (VideoDurationCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoDurationCategory*) buildPartial {
  VideoDurationCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (VideoDurationCategory_Builder*) mergeFrom:(VideoDurationCategory*) other {
  if (other == [VideoDurationCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasDurationValue) {
    [self setDurationValue:other.durationValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoDurationCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoDurationCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setDurationValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (VideoDurationCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (VideoDurationCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasDurationValue {
  return result.hasDurationValue;
}
- (NSString*) durationValue {
  return result.durationValue;
}
- (VideoDurationCategory_Builder*) setDurationValue:(NSString*) value {
  result.hasDurationValue = YES;
  result.durationValue = value;
  return self;
}
- (VideoDurationCategory_Builder*) clearDurationValue {
  result.hasDurationValue = NO;
  result.durationValue = @"";
  return self;
}
@end

