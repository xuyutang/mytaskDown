// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Patrol.pb.h"

@implementation PatrolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PatrolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [CustomerRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PatrolParams ()
@property (retain) PatrolCategory* category;
@property int32_t page;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * customerCategoryArray;
@property (retain) PBAppendableArray * customersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) PBAppendableArray * companiesArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t id;
@end

@implementation PatrolParams

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
@synthesize customerCategoryArray;
@dynamic customerCategory;
@synthesize customersArray;
@dynamic customers;
@synthesize departmentsArray;
@dynamic departments;
@synthesize companiesArray;
@dynamic companies;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.category = nil;
  self.usersArray = nil;
  self.customerCategoryArray = nil;
  self.customersArray = nil;
  self.departmentsArray = nil;
  self.companiesArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.category = [PatrolCategory defaultInstance];
    self.page = 0;
    self.startDate = @"";
    self.endDate = @"";
    self.id = 0;
  }
  return self;
}
static PatrolParams* defaultPatrolParamsInstance = nil;
+ (void) initialize {
  if (self == [PatrolParams class]) {
    defaultPatrolParamsInstance = [[PatrolParams alloc] init];
  }
}
+ (PatrolParams*) defaultInstance {
  return defaultPatrolParamsInstance;
}
- (PatrolParams*) defaultInstance {
  return defaultPatrolParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)customerCategory {
  return customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [customerCategoryArray objectAtIndex:index];
}
- (PBArray *)customers {
  return customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [customersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (PBArray *)companies {
  return companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [companiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (CustomerCategory* element in self.customerCategory) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Customer* element in self.customers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Company* element in self.companies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeMessage:1 value:self.category];
  }
  if (self.hasPage) {
    [output writeInt32:2 value:self.page];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:3 value:element];
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    [output writeMessage:4 value:element];
  }
  for (Customer *element in self.customersArray) {
    [output writeMessage:5 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:6 value:element];
  }
  for (Company *element in self.companiesArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:8 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:9 value:self.endDate];
  }
  if (self.hasId) {
    [output writeInt32:10 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeMessageSize(1, self.category);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(2, self.page);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(3, element);
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    size_ += computeMessageSize(4, element);
  }
  for (Customer *element in self.customersArray) {
    size_ += computeMessageSize(5, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(6, element);
  }
  for (Company *element in self.companiesArray) {
    size_ += computeMessageSize(7, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(8, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(9, self.endDate);
  }
  if (self.hasId) {
    size_ += computeInt32Size(10, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PatrolParams*) parseFromData:(NSData*) data {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromData:data] build];
}
+ (PatrolParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PatrolParams*) parseFromInputStream:(NSInputStream*) input {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromInputStream:input] build];
}
+ (PatrolParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromCodedInputStream:input] build];
}
+ (PatrolParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolParams*)[[[PatrolParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolParams_Builder*) builder {
  return [[[PatrolParams_Builder alloc] init] autorelease];
}
+ (PatrolParams_Builder*) builderWithPrototype:(PatrolParams*) prototype {
  return [[PatrolParams builder] mergeFrom:prototype];
}
- (PatrolParams_Builder*) builder {
  return [PatrolParams builder];
}
- (PatrolParams_Builder*) toBuilder {
  return [PatrolParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customerCategory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Customer* element in self.customersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Company* element in self.companiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"companies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PatrolParams class]]) {
    return NO;
  }
  PatrolParams *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.customerCategoryArray isEqualToArray:otherMessage.customerCategoryArray] &&
      [self.customersArray isEqualToArray:otherMessage.customersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      [self.companiesArray isEqualToArray:otherMessage.companiesArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Customer* element in self.customersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Company* element in self.companiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PatrolParams_Builder()
@property (retain) PatrolParams* result;
@end

@implementation PatrolParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PatrolParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PatrolParams_Builder*) clear {
  self.result = [[[PatrolParams alloc] init] autorelease];
  return self;
}
- (PatrolParams_Builder*) clone {
  return [PatrolParams builderWithPrototype:result];
}
- (PatrolParams*) defaultInstance {
  return [PatrolParams defaultInstance];
}
- (PatrolParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PatrolParams*) buildPartial {
  PatrolParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PatrolParams_Builder*) mergeFrom:(PatrolParams*) other {
  if (other == [PatrolParams defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.customerCategoryArray.count > 0) {
    if (result.customerCategoryArray == nil) {
      result.customerCategoryArray = [[other.customerCategoryArray copyWithZone:[other.customerCategoryArray zone]] autorelease];
    } else {
      [result.customerCategoryArray appendArray:other.customerCategoryArray];
    }
  }
  if (other.customersArray.count > 0) {
    if (result.customersArray == nil) {
      result.customersArray = [[other.customersArray copyWithZone:[other.customersArray zone]] autorelease];
    } else {
      [result.customersArray appendArray:other.customersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.companiesArray.count > 0) {
    if (result.companiesArray == nil) {
      result.companiesArray = [[other.companiesArray copyWithZone:[other.companiesArray zone]] autorelease];
    } else {
      [result.companiesArray appendArray:other.companiesArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PatrolParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PatrolParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PatrolCategory_Builder* subBuilder = [PatrolCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setPage:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomerCategory:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Customer_Builder* subBuilder = [Customer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Company_Builder* subBuilder = [Company builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompanies:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        [self setStartDate:[input readString]];
        break;
      }
      case 74: {
        [self setEndDate:[input readString]];
        break;
      }
      case 80: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (PatrolCategory*) category {
  return result.category;
}
- (PatrolParams_Builder*) setCategory:(PatrolCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (PatrolParams_Builder*) setCategoryBuilder:(PatrolCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (PatrolParams_Builder*) mergeCategory:(PatrolCategory*) value {
  if (result.hasCategory &&
      result.category != [PatrolCategory defaultInstance]) {
    result.category =
      [[[PatrolCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (PatrolParams_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [PatrolCategory defaultInstance];
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (PatrolParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PatrolParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (PatrolParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (PatrolParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)customerCategory {
  return result.customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [result customerCategoryAtIndex:index];
}
- (PatrolParams_Builder *)addCustomerCategory:(CustomerCategory*)value {
  if (result.customerCategoryArray == nil) {
    result.customerCategoryArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customerCategoryArray addObject:value];
  return self;
}
- (PatrolParams_Builder *)setCustomerCategoryArray:(NSArray *)array {
  result.customerCategoryArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)setCustomerCategoryValues:(const CustomerCategory* *)values count:(NSUInteger)count {
  result.customerCategoryArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)clearCustomerCategory {
  result.customerCategoryArray = nil;
  return self;
}
- (PBAppendableArray *)customers {
  return result.customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [result customersAtIndex:index];
}
- (PatrolParams_Builder *)addCustomers:(Customer*)value {
  if (result.customersArray == nil) {
    result.customersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customersArray addObject:value];
  return self;
}
- (PatrolParams_Builder *)setCustomersArray:(NSArray *)array {
  result.customersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)setCustomersValues:(const Customer* *)values count:(NSUInteger)count {
  result.customersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)clearCustomers {
  result.customersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (PatrolParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (PatrolParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (PBAppendableArray *)companies {
  return result.companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [result companiesAtIndex:index];
}
- (PatrolParams_Builder *)addCompanies:(Company*)value {
  if (result.companiesArray == nil) {
    result.companiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.companiesArray addObject:value];
  return self;
}
- (PatrolParams_Builder *)setCompaniesArray:(NSArray *)array {
  result.companiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)setCompaniesValues:(const Company* *)values count:(NSUInteger)count {
  result.companiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolParams_Builder *)clearCompanies {
  result.companiesArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (PatrolParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (PatrolParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (PatrolParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (PatrolParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PatrolParams_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PatrolParams_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface PagePatrol ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * patrolsArray;
@end

@implementation PagePatrol

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize patrolsArray;
@dynamic patrols;
- (void) dealloc {
  self.page = nil;
  self.patrolsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PagePatrol* defaultPagePatrolInstance = nil;
+ (void) initialize {
  if (self == [PagePatrol class]) {
    defaultPagePatrolInstance = [[PagePatrol alloc] init];
  }
}
+ (PagePatrol*) defaultInstance {
  return defaultPagePatrolInstance;
}
- (PagePatrol*) defaultInstance {
  return defaultPagePatrolInstance;
}
- (PBArray *)patrols {
  return patrolsArray;
}
- (Patrol*)patrolsAtIndex:(NSUInteger)index {
  return [patrolsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (Patrol* element in self.patrols) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (Patrol *element in self.patrolsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (Patrol *element in self.patrolsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PagePatrol*) parseFromData:(NSData*) data {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromData:data] build];
}
+ (PagePatrol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PagePatrol*) parseFromInputStream:(NSInputStream*) input {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromInputStream:input] build];
}
+ (PagePatrol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PagePatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromCodedInputStream:input] build];
}
+ (PagePatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PagePatrol*)[[[PagePatrol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PagePatrol_Builder*) builder {
  return [[[PagePatrol_Builder alloc] init] autorelease];
}
+ (PagePatrol_Builder*) builderWithPrototype:(PagePatrol*) prototype {
  return [[PagePatrol builder] mergeFrom:prototype];
}
- (PagePatrol_Builder*) builder {
  return [PagePatrol builder];
}
- (PagePatrol_Builder*) toBuilder {
  return [PagePatrol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Patrol* element in self.patrolsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"patrols"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PagePatrol class]]) {
    return NO;
  }
  PagePatrol *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.patrolsArray isEqualToArray:otherMessage.patrolsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (Patrol* element in self.patrolsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PagePatrol_Builder()
@property (retain) PagePatrol* result;
@end

@implementation PagePatrol_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PagePatrol alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PagePatrol_Builder*) clear {
  self.result = [[[PagePatrol alloc] init] autorelease];
  return self;
}
- (PagePatrol_Builder*) clone {
  return [PagePatrol builderWithPrototype:result];
}
- (PagePatrol*) defaultInstance {
  return [PagePatrol defaultInstance];
}
- (PagePatrol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PagePatrol*) buildPartial {
  PagePatrol* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PagePatrol_Builder*) mergeFrom:(PagePatrol*) other {
  if (other == [PagePatrol defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.patrolsArray.count > 0) {
    if (result.patrolsArray == nil) {
      result.patrolsArray = [[other.patrolsArray copyWithZone:[other.patrolsArray zone]] autorelease];
    } else {
      [result.patrolsArray appendArray:other.patrolsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PagePatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PagePatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Patrol_Builder* subBuilder = [Patrol builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPatrols:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PagePatrol_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PagePatrol_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PagePatrol_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PagePatrol_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)patrols {
  return result.patrolsArray;
}
- (Patrol*)patrolsAtIndex:(NSUInteger)index {
  return [result patrolsAtIndex:index];
}
- (PagePatrol_Builder *)addPatrols:(Patrol*)value {
  if (result.patrolsArray == nil) {
    result.patrolsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.patrolsArray addObject:value];
  return self;
}
- (PagePatrol_Builder *)setPatrolsArray:(NSArray *)array {
  result.patrolsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PagePatrol_Builder *)setPatrolsValues:(const Patrol* *)values count:(NSUInteger)count {
  result.patrolsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PagePatrol_Builder *)clearPatrols {
  result.patrolsArray = nil;
  return self;
}
@end

@interface Patrol ()
@property int32_t id;
@property (retain) User* user;
@property (retain) Customer* customer;
@property (retain) NSString* content;
@property (retain) Location* location;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) PatrolCategory* category;
@property (retain) NSString* createDate;
@property int32_t replyCount;
@property int32_t version;
@property (retain) PBAppendableArray * videosArray;
@property (retain) PBAppendableArray * videoPathsArray;
@property (retain) NSString* mediaType;
@property (retain) PBAppendableArray * videoSizesArray;
@property (retain) PBAppendableArray * videoDurationsArray;
@property (retain) PBAppendableArray * videoPixelsArray;
@property (retain) PBAppendableArray * patrolVideoDurationCategoriesArray;
@property (retain) NSString* cameraCategory;
@end

@implementation Patrol

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasCustomer {
  return !!hasCustomer_;
}
- (void) setHasCustomer:(BOOL) value_ {
  hasCustomer_ = !!value_;
}
@synthesize customer;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
@synthesize videosArray;
@dynamic videos;
@synthesize videoPathsArray;
@dynamic videoPaths;
- (BOOL) hasMediaType {
  return !!hasMediaType_;
}
- (void) setHasMediaType:(BOOL) value_ {
  hasMediaType_ = !!value_;
}
@synthesize mediaType;
@synthesize videoSizesArray;
@dynamic videoSizes;
@synthesize videoDurationsArray;
@dynamic videoDurations;
@synthesize videoPixelsArray;
@dynamic videoPixels;
@synthesize patrolVideoDurationCategoriesArray;
@dynamic patrolVideoDurationCategories;
- (BOOL) hasCameraCategory {
  return !!hasCameraCategory_;
}
- (void) setHasCameraCategory:(BOOL) value_ {
  hasCameraCategory_ = !!value_;
}
@synthesize cameraCategory;
- (void) dealloc {
  self.user = nil;
  self.customer = nil;
  self.content = nil;
  self.location = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  self.category = nil;
  self.createDate = nil;
  self.videosArray = nil;
  self.videoPathsArray = nil;
  self.mediaType = nil;
  self.videoSizesArray = nil;
  self.videoDurationsArray = nil;
  self.videoPixelsArray = nil;
  self.patrolVideoDurationCategoriesArray = nil;
  self.cameraCategory = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.customer = [Customer defaultInstance];
    self.content = @"";
    self.location = [Location defaultInstance];
    self.category = [PatrolCategory defaultInstance];
    self.createDate = @"";
    self.replyCount = 0;
    self.version = 1;
    self.mediaType = @"";
    self.cameraCategory = @"";
  }
  return self;
}
static Patrol* defaultPatrolInstance = nil;
+ (void) initialize {
  if (self == [Patrol class]) {
    defaultPatrolInstance = [[Patrol alloc] init];
  }
}
+ (Patrol*) defaultInstance {
  return defaultPatrolInstance;
}
- (Patrol*) defaultInstance {
  return defaultPatrolInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (PBArray *)videos {
  return videosArray;
}
- (NSData*)videosAtIndex:(NSUInteger)index {
  return [videosArray objectAtIndex:index];
}
- (PBArray *)videoPaths {
  return videoPathsArray;
}
- (NSString*)videoPathsAtIndex:(NSUInteger)index {
  return [videoPathsArray objectAtIndex:index];
}
- (PBArray *)videoSizes {
  return videoSizesArray;
}
- (NSString*)videoSizesAtIndex:(NSUInteger)index {
  return [videoSizesArray objectAtIndex:index];
}
- (PBArray *)videoDurations {
  return videoDurationsArray;
}
- (NSString*)videoDurationsAtIndex:(NSUInteger)index {
  return [videoDurationsArray objectAtIndex:index];
}
- (PBArray *)videoPixels {
  return videoPixelsArray;
}
- (NSString*)videoPixelsAtIndex:(NSUInteger)index {
  return [videoPixelsArray objectAtIndex:index];
}
- (PBArray *)patrolVideoDurationCategories {
  return patrolVideoDurationCategoriesArray;
}
- (PatrolVideoDurationCategory*)patrolVideoDurationCategoriesAtIndex:(NSUInteger)index {
  return [patrolVideoDurationCategoriesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasCustomer) {
    if (!self.customer.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (PatrolVideoDurationCategory* element in self.patrolVideoDurationCategories) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasCustomer) {
    [output writeMessage:3 value:self.customer];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasLocation) {
    [output writeMessage:5 value:self.location];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:6 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:7 value:values[i]];
    }
  }
  if (self.hasCategory) {
    [output writeMessage:8 value:self.category];
  }
  if (self.hasCreateDate) {
    [output writeString:9 value:self.createDate];
  }
  if (self.hasReplyCount) {
    [output writeInt32:10 value:self.replyCount];
  }
  if (self.hasVersion) {
    [output writeInt32:11 value:self.version];
  }
  const NSUInteger videosArrayCount = self.videosArray.count;
  if (videosArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.videosArray.data;
    for (NSUInteger i = 0; i < videosArrayCount; ++i) {
      [output writeData:12 value:values[i]];
    }
  }
  const NSUInteger videoPathsArrayCount = self.videoPathsArray.count;
  if (videoPathsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoPathsArray.data;
    for (NSUInteger i = 0; i < videoPathsArrayCount; ++i) {
      [output writeString:13 value:values[i]];
    }
  }
  if (self.hasMediaType) {
    [output writeString:14 value:self.mediaType];
  }
  const NSUInteger videoSizesArrayCount = self.videoSizesArray.count;
  if (videoSizesArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoSizesArray.data;
    for (NSUInteger i = 0; i < videoSizesArrayCount; ++i) {
      [output writeString:15 value:values[i]];
    }
  }
  const NSUInteger videoDurationsArrayCount = self.videoDurationsArray.count;
  if (videoDurationsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoDurationsArray.data;
    for (NSUInteger i = 0; i < videoDurationsArrayCount; ++i) {
      [output writeString:16 value:values[i]];
    }
  }
  const NSUInteger videoPixelsArrayCount = self.videoPixelsArray.count;
  if (videoPixelsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.videoPixelsArray.data;
    for (NSUInteger i = 0; i < videoPixelsArrayCount; ++i) {
      [output writeString:17 value:values[i]];
    }
  }
  for (PatrolVideoDurationCategory *element in self.patrolVideoDurationCategoriesArray) {
    [output writeMessage:18 value:element];
  }
  if (self.hasCameraCategory) {
    [output writeString:19 value:self.cameraCategory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasCustomer) {
    size_ += computeMessageSize(3, self.customer);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(5, self.location);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(8, self.category);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(9, self.createDate);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(10, self.replyCount);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(11, self.version);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videosArray.count;
    const NSData* *values = (const NSData* *)self.videosArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoPathsArray.count;
    const NSString* *values = (const NSString* *)self.videoPathsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasMediaType) {
    size_ += computeStringSize(14, self.mediaType);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoSizesArray.count;
    const NSString* *values = (const NSString* *)self.videoSizesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoDurationsArray.count;
    const NSString* *values = (const NSString* *)self.videoDurationsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.videoPixelsArray.count;
    const NSString* *values = (const NSString* *)self.videoPixelsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  for (PatrolVideoDurationCategory *element in self.patrolVideoDurationCategoriesArray) {
    size_ += computeMessageSize(18, element);
  }
  if (self.hasCameraCategory) {
    size_ += computeStringSize(19, self.cameraCategory);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Patrol*) parseFromData:(NSData*) data {
  return (Patrol*)[[[Patrol builder] mergeFromData:data] build];
}
+ (Patrol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Patrol*)[[[Patrol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Patrol*) parseFromInputStream:(NSInputStream*) input {
  return (Patrol*)[[[Patrol builder] mergeFromInputStream:input] build];
}
+ (Patrol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Patrol*)[[[Patrol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Patrol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Patrol*)[[[Patrol builder] mergeFromCodedInputStream:input] build];
}
+ (Patrol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Patrol*)[[[Patrol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Patrol_Builder*) builder {
  return [[[Patrol_Builder alloc] init] autorelease];
}
+ (Patrol_Builder*) builderWithPrototype:(Patrol*) prototype {
  return [[Patrol builder] mergeFrom:prototype];
}
- (Patrol_Builder*) builder {
  return [Patrol builder];
}
- (Patrol_Builder*) toBuilder {
  return [Patrol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCustomer) {
    [output appendFormat:@"%@%@ {\n", indent, @"customer"];
    [self.customer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  for (NSData* element in self.videosArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videos", element];
  }
  for (NSString* element in self.videoPathsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoPaths", element];
  }
  if (self.hasMediaType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mediaType", self.mediaType];
  }
  for (NSString* element in self.videoSizesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoSizes", element];
  }
  for (NSString* element in self.videoDurationsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoDurations", element];
  }
  for (NSString* element in self.videoPixelsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoPixels", element];
  }
  for (PatrolVideoDurationCategory* element in self.patrolVideoDurationCategoriesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"patrolVideoDurationCategories"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCameraCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cameraCategory", self.cameraCategory];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Patrol class]]) {
    return NO;
  }
  Patrol *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCustomer == otherMessage.hasCustomer &&
      (!self.hasCustomer || [self.customer isEqual:otherMessage.customer]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      [self.videosArray isEqualToArray:otherMessage.videosArray] &&
      [self.videoPathsArray isEqualToArray:otherMessage.videoPathsArray] &&
      self.hasMediaType == otherMessage.hasMediaType &&
      (!self.hasMediaType || [self.mediaType isEqual:otherMessage.mediaType]) &&
      [self.videoSizesArray isEqualToArray:otherMessage.videoSizesArray] &&
      [self.videoDurationsArray isEqualToArray:otherMessage.videoDurationsArray] &&
      [self.videoPixelsArray isEqualToArray:otherMessage.videoPixelsArray] &&
      [self.patrolVideoDurationCategoriesArray isEqualToArray:otherMessage.patrolVideoDurationCategoriesArray] &&
      self.hasCameraCategory == otherMessage.hasCameraCategory &&
      (!self.hasCameraCategory || [self.cameraCategory isEqual:otherMessage.cameraCategory]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCustomer) {
    hashCode = hashCode * 31 + [self.customer hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  for (NSData* element in self.videosArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoPathsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasMediaType) {
    hashCode = hashCode * 31 + [self.mediaType hash];
  }
  for (NSString* element in self.videoSizesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoDurationsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.videoPixelsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (PatrolVideoDurationCategory* element in self.patrolVideoDurationCategoriesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCameraCategory) {
    hashCode = hashCode * 31 + [self.cameraCategory hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Patrol_Builder()
@property (retain) Patrol* result;
@end

@implementation Patrol_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Patrol alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Patrol_Builder*) clear {
  self.result = [[[Patrol alloc] init] autorelease];
  return self;
}
- (Patrol_Builder*) clone {
  return [Patrol builderWithPrototype:result];
}
- (Patrol*) defaultInstance {
  return [Patrol defaultInstance];
}
- (Patrol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Patrol*) buildPartial {
  Patrol* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Patrol_Builder*) mergeFrom:(Patrol*) other {
  if (other == [Patrol defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCustomer) {
    [self mergeCustomer:other.customer];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.videosArray.count > 0) {
    if (result.videosArray == nil) {
      result.videosArray = [[other.videosArray copyWithZone:[other.videosArray zone]] autorelease];
    } else {
      [result.videosArray appendArray:other.videosArray];
    }
  }
  if (other.videoPathsArray.count > 0) {
    if (result.videoPathsArray == nil) {
      result.videoPathsArray = [[other.videoPathsArray copyWithZone:[other.videoPathsArray zone]] autorelease];
    } else {
      [result.videoPathsArray appendArray:other.videoPathsArray];
    }
  }
  if (other.hasMediaType) {
    [self setMediaType:other.mediaType];
  }
  if (other.videoSizesArray.count > 0) {
    if (result.videoSizesArray == nil) {
      result.videoSizesArray = [[other.videoSizesArray copyWithZone:[other.videoSizesArray zone]] autorelease];
    } else {
      [result.videoSizesArray appendArray:other.videoSizesArray];
    }
  }
  if (other.videoDurationsArray.count > 0) {
    if (result.videoDurationsArray == nil) {
      result.videoDurationsArray = [[other.videoDurationsArray copyWithZone:[other.videoDurationsArray zone]] autorelease];
    } else {
      [result.videoDurationsArray appendArray:other.videoDurationsArray];
    }
  }
  if (other.videoPixelsArray.count > 0) {
    if (result.videoPixelsArray == nil) {
      result.videoPixelsArray = [[other.videoPixelsArray copyWithZone:[other.videoPixelsArray zone]] autorelease];
    } else {
      [result.videoPixelsArray appendArray:other.videoPixelsArray];
    }
  }
  if (other.patrolVideoDurationCategoriesArray.count > 0) {
    if (result.patrolVideoDurationCategoriesArray == nil) {
      result.patrolVideoDurationCategoriesArray = [[other.patrolVideoDurationCategoriesArray copyWithZone:[other.patrolVideoDurationCategoriesArray zone]] autorelease];
    } else {
      [result.patrolVideoDurationCategoriesArray appendArray:other.patrolVideoDurationCategoriesArray];
    }
  }
  if (other.hasCameraCategory) {
    [self setCameraCategory:other.cameraCategory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Patrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Patrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Customer_Builder* subBuilder = [Customer builder];
        if (self.hasCustomer) {
          [subBuilder mergeFrom:self.customer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustomer:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 42: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self addFiles:[input readData]];
        break;
      }
      case 58: {
        [self addFilePath:[input readString]];
        break;
      }
      case 66: {
        PatrolCategory_Builder* subBuilder = [PatrolCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 80: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 88: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 98: {
        [self addVideos:[input readData]];
        break;
      }
      case 106: {
        [self addVideoPaths:[input readString]];
        break;
      }
      case 114: {
        [self setMediaType:[input readString]];
        break;
      }
      case 122: {
        [self addVideoSizes:[input readString]];
        break;
      }
      case 130: {
        [self addVideoDurations:[input readString]];
        break;
      }
      case 138: {
        [self addVideoPixels:[input readString]];
        break;
      }
      case 146: {
        PatrolVideoDurationCategory_Builder* subBuilder = [PatrolVideoDurationCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPatrolVideoDurationCategories:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        [self setCameraCategory:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Patrol_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Patrol_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (Patrol_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (Patrol_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (Patrol_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (Patrol_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasCustomer {
  return result.hasCustomer;
}
- (Customer*) customer {
  return result.customer;
}
- (Patrol_Builder*) setCustomer:(Customer*) value {
  result.hasCustomer = YES;
  result.customer = value;
  return self;
}
- (Patrol_Builder*) setCustomerBuilder:(Customer_Builder*) builderForValue {
  return [self setCustomer:[builderForValue build]];
}
- (Patrol_Builder*) mergeCustomer:(Customer*) value {
  if (result.hasCustomer &&
      result.customer != [Customer defaultInstance]) {
    result.customer =
      [[[Customer builderWithPrototype:result.customer] mergeFrom:value] buildPartial];
  } else {
    result.customer = value;
  }
  result.hasCustomer = YES;
  return self;
}
- (Patrol_Builder*) clearCustomer {
  result.hasCustomer = NO;
  result.customer = [Customer defaultInstance];
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (Patrol_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (Patrol_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (Patrol_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (Patrol_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (Patrol_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (Patrol_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (Patrol_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (Patrol_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (Patrol_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (Patrol_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (PatrolCategory*) category {
  return result.category;
}
- (Patrol_Builder*) setCategory:(PatrolCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (Patrol_Builder*) setCategoryBuilder:(PatrolCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (Patrol_Builder*) mergeCategory:(PatrolCategory*) value {
  if (result.hasCategory &&
      result.category != [PatrolCategory defaultInstance]) {
    result.category =
      [[[PatrolCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (Patrol_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [PatrolCategory defaultInstance];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (Patrol_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (Patrol_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (Patrol_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (Patrol_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (Patrol_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (Patrol_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 1;
  return self;
}
- (PBAppendableArray *)videos {
  return result.videosArray;
}
- (NSData*)videosAtIndex:(NSUInteger)index {
  return [result videosAtIndex:index];
}
- (Patrol_Builder *)addVideos:(NSData*)value {
  if (result.videosArray == nil) {
    result.videosArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videosArray addObject:value];
  return self;
}
- (Patrol_Builder *)setVideosArray:(NSArray *)array {
  result.videosArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setVideosValues:(const NSData* *)values count:(NSUInteger)count {
  result.videosArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearVideos {
  result.videosArray = nil;
  return self;
}
- (PBAppendableArray *)videoPaths {
  return result.videoPathsArray;
}
- (NSString*)videoPathsAtIndex:(NSUInteger)index {
  return [result videoPathsAtIndex:index];
}
- (Patrol_Builder *)addVideoPaths:(NSString*)value {
  if (result.videoPathsArray == nil) {
    result.videoPathsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoPathsArray addObject:value];
  return self;
}
- (Patrol_Builder *)setVideoPathsArray:(NSArray *)array {
  result.videoPathsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setVideoPathsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoPathsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearVideoPaths {
  result.videoPathsArray = nil;
  return self;
}
- (BOOL) hasMediaType {
  return result.hasMediaType;
}
- (NSString*) mediaType {
  return result.mediaType;
}
- (Patrol_Builder*) setMediaType:(NSString*) value {
  result.hasMediaType = YES;
  result.mediaType = value;
  return self;
}
- (Patrol_Builder*) clearMediaType {
  result.hasMediaType = NO;
  result.mediaType = @"";
  return self;
}
- (PBAppendableArray *)videoSizes {
  return result.videoSizesArray;
}
- (NSString*)videoSizesAtIndex:(NSUInteger)index {
  return [result videoSizesAtIndex:index];
}
- (Patrol_Builder *)addVideoSizes:(NSString*)value {
  if (result.videoSizesArray == nil) {
    result.videoSizesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoSizesArray addObject:value];
  return self;
}
- (Patrol_Builder *)setVideoSizesArray:(NSArray *)array {
  result.videoSizesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setVideoSizesValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoSizesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearVideoSizes {
  result.videoSizesArray = nil;
  return self;
}
- (PBAppendableArray *)videoDurations {
  return result.videoDurationsArray;
}
- (NSString*)videoDurationsAtIndex:(NSUInteger)index {
  return [result videoDurationsAtIndex:index];
}
- (Patrol_Builder *)addVideoDurations:(NSString*)value {
  if (result.videoDurationsArray == nil) {
    result.videoDurationsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoDurationsArray addObject:value];
  return self;
}
- (Patrol_Builder *)setVideoDurationsArray:(NSArray *)array {
  result.videoDurationsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setVideoDurationsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoDurationsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearVideoDurations {
  result.videoDurationsArray = nil;
  return self;
}
- (PBAppendableArray *)videoPixels {
  return result.videoPixelsArray;
}
- (NSString*)videoPixelsAtIndex:(NSUInteger)index {
  return [result videoPixelsAtIndex:index];
}
- (Patrol_Builder *)addVideoPixels:(NSString*)value {
  if (result.videoPixelsArray == nil) {
    result.videoPixelsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.videoPixelsArray addObject:value];
  return self;
}
- (Patrol_Builder *)setVideoPixelsArray:(NSArray *)array {
  result.videoPixelsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setVideoPixelsValues:(const NSString* *)values count:(NSUInteger)count {
  result.videoPixelsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearVideoPixels {
  result.videoPixelsArray = nil;
  return self;
}
- (PBAppendableArray *)patrolVideoDurationCategories {
  return result.patrolVideoDurationCategoriesArray;
}
- (PatrolVideoDurationCategory*)patrolVideoDurationCategoriesAtIndex:(NSUInteger)index {
  return [result patrolVideoDurationCategoriesAtIndex:index];
}
- (Patrol_Builder *)addPatrolVideoDurationCategories:(PatrolVideoDurationCategory*)value {
  if (result.patrolVideoDurationCategoriesArray == nil) {
    result.patrolVideoDurationCategoriesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.patrolVideoDurationCategoriesArray addObject:value];
  return self;
}
- (Patrol_Builder *)setPatrolVideoDurationCategoriesArray:(NSArray *)array {
  result.patrolVideoDurationCategoriesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)setPatrolVideoDurationCategoriesValues:(const PatrolVideoDurationCategory* *)values count:(NSUInteger)count {
  result.patrolVideoDurationCategoriesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Patrol_Builder *)clearPatrolVideoDurationCategories {
  result.patrolVideoDurationCategoriesArray = nil;
  return self;
}
- (BOOL) hasCameraCategory {
  return result.hasCameraCategory;
}
- (NSString*) cameraCategory {
  return result.cameraCategory;
}
- (Patrol_Builder*) setCameraCategory:(NSString*) value {
  result.hasCameraCategory = YES;
  result.cameraCategory = value;
  return self;
}
- (Patrol_Builder*) clearCameraCategory {
  result.hasCameraCategory = NO;
  result.cameraCategory = @"";
  return self;
}
@end

@interface PatrolCategory ()
@property int32_t id;
@property (retain) NSString* name;
@property BOOL isFav;
@property int32_t version;
@end

@implementation PatrolCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasIsFav {
  return !!hasIsFav_;
}
- (void) setHasIsFav:(BOOL) value_ {
  hasIsFav_ = !!value_;
}
- (BOOL) isFav {
  return !!isFav_;
}
- (void) setIsFav:(BOOL) value_ {
  isFav_ = !!value_;
}
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.isFav = NO;
    self.version = 1;
  }
  return self;
}
static PatrolCategory* defaultPatrolCategoryInstance = nil;
+ (void) initialize {
  if (self == [PatrolCategory class]) {
    defaultPatrolCategoryInstance = [[PatrolCategory alloc] init];
  }
}
+ (PatrolCategory*) defaultInstance {
  return defaultPatrolCategoryInstance;
}
- (PatrolCategory*) defaultInstance {
  return defaultPatrolCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasIsFav) {
    [output writeBool:3 value:self.isFav];
  }
  if (self.hasVersion) {
    [output writeInt32:4 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasIsFav) {
    size_ += computeBoolSize(3, self.isFav);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(4, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PatrolCategory*) parseFromData:(NSData*) data {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromData:data] build];
}
+ (PatrolCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PatrolCategory*) parseFromInputStream:(NSInputStream*) input {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromInputStream:input] build];
}
+ (PatrolCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromCodedInputStream:input] build];
}
+ (PatrolCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolCategory*)[[[PatrolCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolCategory_Builder*) builder {
  return [[[PatrolCategory_Builder alloc] init] autorelease];
}
+ (PatrolCategory_Builder*) builderWithPrototype:(PatrolCategory*) prototype {
  return [[PatrolCategory builder] mergeFrom:prototype];
}
- (PatrolCategory_Builder*) builder {
  return [PatrolCategory builder];
}
- (PatrolCategory_Builder*) toBuilder {
  return [PatrolCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasIsFav) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFav", [NSNumber numberWithBool:self.isFav]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PatrolCategory class]]) {
    return NO;
  }
  PatrolCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasIsFav == otherMessage.hasIsFav &&
      (!self.hasIsFav || self.isFav == otherMessage.isFav) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasIsFav) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFav] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PatrolCategory_Builder()
@property (retain) PatrolCategory* result;
@end

@implementation PatrolCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PatrolCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PatrolCategory_Builder*) clear {
  self.result = [[[PatrolCategory alloc] init] autorelease];
  return self;
}
- (PatrolCategory_Builder*) clone {
  return [PatrolCategory builderWithPrototype:result];
}
- (PatrolCategory*) defaultInstance {
  return [PatrolCategory defaultInstance];
}
- (PatrolCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PatrolCategory*) buildPartial {
  PatrolCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PatrolCategory_Builder*) mergeFrom:(PatrolCategory*) other {
  if (other == [PatrolCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasIsFav) {
    [self setIsFav:other.isFav];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PatrolCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PatrolCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setIsFav:[input readBool]];
        break;
      }
      case 32: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PatrolCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PatrolCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PatrolCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PatrolCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasIsFav {
  return result.hasIsFav;
}
- (BOOL) isFav {
  return result.isFav;
}
- (PatrolCategory_Builder*) setIsFav:(BOOL) value {
  result.hasIsFav = YES;
  result.isFav = value;
  return self;
}
- (PatrolCategory_Builder*) clearIsFav {
  result.hasIsFav = NO;
  result.isFav = NO;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PatrolCategory_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PatrolCategory_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 1;
  return self;
}
@end

@interface PatrolMediaCategory ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* value;
@end

@implementation PatrolMediaCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
  hasValue_ = !!value_;
}
@synthesize value;
- (void) dealloc {
  self.name = nil;
  self.value = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static PatrolMediaCategory* defaultPatrolMediaCategoryInstance = nil;
+ (void) initialize {
  if (self == [PatrolMediaCategory class]) {
    defaultPatrolMediaCategoryInstance = [[PatrolMediaCategory alloc] init];
  }
}
+ (PatrolMediaCategory*) defaultInstance {
  return defaultPatrolMediaCategoryInstance;
}
- (PatrolMediaCategory*) defaultInstance {
  return defaultPatrolMediaCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:3 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasValue) {
    size_ += computeStringSize(3, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PatrolMediaCategory*) parseFromData:(NSData*) data {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromData:data] build];
}
+ (PatrolMediaCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PatrolMediaCategory*) parseFromInputStream:(NSInputStream*) input {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromInputStream:input] build];
}
+ (PatrolMediaCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolMediaCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromCodedInputStream:input] build];
}
+ (PatrolMediaCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolMediaCategory*)[[[PatrolMediaCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolMediaCategory_Builder*) builder {
  return [[[PatrolMediaCategory_Builder alloc] init] autorelease];
}
+ (PatrolMediaCategory_Builder*) builderWithPrototype:(PatrolMediaCategory*) prototype {
  return [[PatrolMediaCategory builder] mergeFrom:prototype];
}
- (PatrolMediaCategory_Builder*) builder {
  return [PatrolMediaCategory builder];
}
- (PatrolMediaCategory_Builder*) toBuilder {
  return [PatrolMediaCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PatrolMediaCategory class]]) {
    return NO;
  }
  PatrolMediaCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PatrolMediaCategory_Builder()
@property (retain) PatrolMediaCategory* result;
@end

@implementation PatrolMediaCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PatrolMediaCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PatrolMediaCategory_Builder*) clear {
  self.result = [[[PatrolMediaCategory alloc] init] autorelease];
  return self;
}
- (PatrolMediaCategory_Builder*) clone {
  return [PatrolMediaCategory builderWithPrototype:result];
}
- (PatrolMediaCategory*) defaultInstance {
  return [PatrolMediaCategory defaultInstance];
}
- (PatrolMediaCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PatrolMediaCategory*) buildPartial {
  PatrolMediaCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PatrolMediaCategory_Builder*) mergeFrom:(PatrolMediaCategory*) other {
  if (other == [PatrolMediaCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PatrolMediaCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PatrolMediaCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PatrolMediaCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PatrolMediaCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PatrolMediaCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PatrolMediaCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (PatrolMediaCategory_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PatrolMediaCategory_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface PatrolVideoDurationCategory ()
@property int32_t id;
@property (retain) NSString* durationValue;
@end

@implementation PatrolVideoDurationCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasDurationValue {
  return !!hasDurationValue_;
}
- (void) setHasDurationValue:(BOOL) value_ {
  hasDurationValue_ = !!value_;
}
@synthesize durationValue;
- (void) dealloc {
  self.durationValue = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.durationValue = @"";
  }
  return self;
}
static PatrolVideoDurationCategory* defaultPatrolVideoDurationCategoryInstance = nil;
+ (void) initialize {
  if (self == [PatrolVideoDurationCategory class]) {
    defaultPatrolVideoDurationCategoryInstance = [[PatrolVideoDurationCategory alloc] init];
  }
}
+ (PatrolVideoDurationCategory*) defaultInstance {
  return defaultPatrolVideoDurationCategoryInstance;
}
- (PatrolVideoDurationCategory*) defaultInstance {
  return defaultPatrolVideoDurationCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasDurationValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasDurationValue) {
    [output writeString:2 value:self.durationValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasDurationValue) {
    size_ += computeStringSize(2, self.durationValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PatrolVideoDurationCategory*) parseFromData:(NSData*) data {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromData:data] build];
}
+ (PatrolVideoDurationCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PatrolVideoDurationCategory*) parseFromInputStream:(NSInputStream*) input {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromInputStream:input] build];
}
+ (PatrolVideoDurationCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolVideoDurationCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromCodedInputStream:input] build];
}
+ (PatrolVideoDurationCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolVideoDurationCategory*)[[[PatrolVideoDurationCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolVideoDurationCategory_Builder*) builder {
  return [[[PatrolVideoDurationCategory_Builder alloc] init] autorelease];
}
+ (PatrolVideoDurationCategory_Builder*) builderWithPrototype:(PatrolVideoDurationCategory*) prototype {
  return [[PatrolVideoDurationCategory builder] mergeFrom:prototype];
}
- (PatrolVideoDurationCategory_Builder*) builder {
  return [PatrolVideoDurationCategory builder];
}
- (PatrolVideoDurationCategory_Builder*) toBuilder {
  return [PatrolVideoDurationCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasDurationValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationValue", self.durationValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PatrolVideoDurationCategory class]]) {
    return NO;
  }
  PatrolVideoDurationCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasDurationValue == otherMessage.hasDurationValue &&
      (!self.hasDurationValue || [self.durationValue isEqual:otherMessage.durationValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasDurationValue) {
    hashCode = hashCode * 31 + [self.durationValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PatrolVideoDurationCategory_Builder()
@property (retain) PatrolVideoDurationCategory* result;
@end

@implementation PatrolVideoDurationCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PatrolVideoDurationCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PatrolVideoDurationCategory_Builder*) clear {
  self.result = [[[PatrolVideoDurationCategory alloc] init] autorelease];
  return self;
}
- (PatrolVideoDurationCategory_Builder*) clone {
  return [PatrolVideoDurationCategory builderWithPrototype:result];
}
- (PatrolVideoDurationCategory*) defaultInstance {
  return [PatrolVideoDurationCategory defaultInstance];
}
- (PatrolVideoDurationCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PatrolVideoDurationCategory*) buildPartial {
  PatrolVideoDurationCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PatrolVideoDurationCategory_Builder*) mergeFrom:(PatrolVideoDurationCategory*) other {
  if (other == [PatrolVideoDurationCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasDurationValue) {
    [self setDurationValue:other.durationValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PatrolVideoDurationCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PatrolVideoDurationCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setDurationValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PatrolVideoDurationCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PatrolVideoDurationCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasDurationValue {
  return result.hasDurationValue;
}
- (NSString*) durationValue {
  return result.durationValue;
}
- (PatrolVideoDurationCategory_Builder*) setDurationValue:(NSString*) value {
  result.hasDurationValue = YES;
  result.durationValue = value;
  return self;
}
- (PatrolVideoDurationCategory_Builder*) clearDurationValue {
  result.hasDurationValue = NO;
  result.durationValue = @"";
  return self;
}
@end

@interface PatrolReply ()
@property int32_t id;
@property int32_t patrolId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation PatrolReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasPatrolId {
  return !!hasPatrolId_;
}
- (void) setHasPatrolId:(BOOL) value_ {
  hasPatrolId_ = !!value_;
}
@synthesize patrolId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.patrolId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static PatrolReply* defaultPatrolReplyInstance = nil;
+ (void) initialize {
  if (self == [PatrolReply class]) {
    defaultPatrolReplyInstance = [[PatrolReply alloc] init];
  }
}
+ (PatrolReply*) defaultInstance {
  return defaultPatrolReplyInstance;
}
- (PatrolReply*) defaultInstance {
  return defaultPatrolReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasPatrolId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasPatrolId) {
    [output writeInt32:2 value:self.patrolId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasPatrolId) {
    size_ += computeInt32Size(2, self.patrolId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PatrolReply*) parseFromData:(NSData*) data {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromData:data] build];
}
+ (PatrolReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PatrolReply*) parseFromInputStream:(NSInputStream*) input {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromInputStream:input] build];
}
+ (PatrolReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromCodedInputStream:input] build];
}
+ (PatrolReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PatrolReply*)[[[PatrolReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PatrolReply_Builder*) builder {
  return [[[PatrolReply_Builder alloc] init] autorelease];
}
+ (PatrolReply_Builder*) builderWithPrototype:(PatrolReply*) prototype {
  return [[PatrolReply builder] mergeFrom:prototype];
}
- (PatrolReply_Builder*) builder {
  return [PatrolReply builder];
}
- (PatrolReply_Builder*) toBuilder {
  return [PatrolReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasPatrolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patrolId", [NSNumber numberWithInt:self.patrolId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PatrolReply class]]) {
    return NO;
  }
  PatrolReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPatrolId == otherMessage.hasPatrolId &&
      (!self.hasPatrolId || self.patrolId == otherMessage.patrolId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasPatrolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.patrolId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PatrolReply_Builder()
@property (retain) PatrolReply* result;
@end

@implementation PatrolReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PatrolReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PatrolReply_Builder*) clear {
  self.result = [[[PatrolReply alloc] init] autorelease];
  return self;
}
- (PatrolReply_Builder*) clone {
  return [PatrolReply builderWithPrototype:result];
}
- (PatrolReply*) defaultInstance {
  return [PatrolReply defaultInstance];
}
- (PatrolReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PatrolReply*) buildPartial {
  PatrolReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PatrolReply_Builder*) mergeFrom:(PatrolReply*) other {
  if (other == [PatrolReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPatrolId) {
    [self setPatrolId:other.patrolId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PatrolReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PatrolReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setPatrolId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (PatrolReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PatrolReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasPatrolId {
  return result.hasPatrolId;
}
- (int32_t) patrolId {
  return result.patrolId;
}
- (PatrolReply_Builder*) setPatrolId:(int32_t) value {
  result.hasPatrolId = YES;
  result.patrolId = value;
  return self;
}
- (PatrolReply_Builder*) clearPatrolId {
  result.hasPatrolId = NO;
  result.patrolId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (PatrolReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (PatrolReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (PatrolReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (PatrolReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (PatrolReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (PatrolReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (PatrolReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (PatrolReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (PatrolReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (PatrolReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (PatrolReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (PatrolReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (PatrolReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (PatrolReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PatrolReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

