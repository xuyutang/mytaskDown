// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Holiday.pb.h"

@implementation HolidayRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [HolidayRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface HolidayCategory ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* comment;
@end

@implementation HolidayCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (void) dealloc {
  self.name = nil;
  self.comment = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.comment = @"";
  }
  return self;
}
static HolidayCategory* defaultHolidayCategoryInstance = nil;
+ (void) initialize {
  if (self == [HolidayCategory class]) {
    defaultHolidayCategoryInstance = [[HolidayCategory alloc] init];
  }
}
+ (HolidayCategory*) defaultInstance {
  return defaultHolidayCategoryInstance;
}
- (HolidayCategory*) defaultInstance {
  return defaultHolidayCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HolidayCategory*) parseFromData:(NSData*) data {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromData:data] build];
}
+ (HolidayCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HolidayCategory*) parseFromInputStream:(NSInputStream*) input {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromInputStream:input] build];
}
+ (HolidayCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HolidayCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromCodedInputStream:input] build];
}
+ (HolidayCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayCategory*)[[[HolidayCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HolidayCategory_Builder*) builder {
  return [[[HolidayCategory_Builder alloc] init] autorelease];
}
+ (HolidayCategory_Builder*) builderWithPrototype:(HolidayCategory*) prototype {
  return [[HolidayCategory builder] mergeFrom:prototype];
}
- (HolidayCategory_Builder*) builder {
  return [HolidayCategory builder];
}
- (HolidayCategory_Builder*) toBuilder {
  return [HolidayCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HolidayCategory class]]) {
    return NO;
  }
  HolidayCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HolidayCategory_Builder()
@property (retain) HolidayCategory* result;
@end

@implementation HolidayCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HolidayCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HolidayCategory_Builder*) clear {
  self.result = [[[HolidayCategory alloc] init] autorelease];
  return self;
}
- (HolidayCategory_Builder*) clone {
  return [HolidayCategory builderWithPrototype:result];
}
- (HolidayCategory*) defaultInstance {
  return [HolidayCategory defaultInstance];
}
- (HolidayCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HolidayCategory*) buildPartial {
  HolidayCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HolidayCategory_Builder*) mergeFrom:(HolidayCategory*) other {
  if (other == [HolidayCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HolidayCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HolidayCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (HolidayCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (HolidayCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (HolidayCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (HolidayCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (HolidayCategory_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (HolidayCategory_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
@end

@interface HolidayApply ()
@property int32_t id;
@property (retain) User* user;
@property (retain) HolidayCategory* holidayCateory;
@property (retain) NSString* startTime;
@property (retain) NSString* endTime;
@property (retain) NSString* reason;
@property (retain) NSString* deviceId;
@end

@implementation HolidayApply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasHolidayCateory {
  return !!hasHolidayCateory_;
}
- (void) setHasHolidayCateory:(BOOL) value_ {
  hasHolidayCateory_ = !!value_;
}
@synthesize holidayCateory;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value_ {
  hasStartTime_ = !!value_;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) value_ {
  hasEndTime_ = !!value_;
}
@synthesize endTime;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) value_ {
  hasReason_ = !!value_;
}
@synthesize reason;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value_ {
  hasDeviceId_ = !!value_;
}
@synthesize deviceId;
- (void) dealloc {
  self.user = nil;
  self.holidayCateory = nil;
  self.startTime = nil;
  self.endTime = nil;
  self.reason = nil;
  self.deviceId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.holidayCateory = [HolidayCategory defaultInstance];
    self.startTime = @"";
    self.endTime = @"";
    self.reason = @"";
    self.deviceId = @"";
  }
  return self;
}
static HolidayApply* defaultHolidayApplyInstance = nil;
+ (void) initialize {
  if (self == [HolidayApply class]) {
    defaultHolidayApplyInstance = [[HolidayApply alloc] init];
  }
}
+ (HolidayApply*) defaultInstance {
  return defaultHolidayApplyInstance;
}
- (HolidayApply*) defaultInstance {
  return defaultHolidayApplyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasHolidayCateory) {
    return NO;
  }
  if (!self.hasStartTime) {
    return NO;
  }
  if (!self.hasEndTime) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (!self.holidayCateory.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasHolidayCateory) {
    [output writeMessage:3 value:self.holidayCateory];
  }
  if (self.hasStartTime) {
    [output writeString:4 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeString:5 value:self.endTime];
  }
  if (self.hasReason) {
    [output writeString:6 value:self.reason];
  }
  if (self.hasDeviceId) {
    [output writeString:7 value:self.deviceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasHolidayCateory) {
    size_ += computeMessageSize(3, self.holidayCateory);
  }
  if (self.hasStartTime) {
    size_ += computeStringSize(4, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeStringSize(5, self.endTime);
  }
  if (self.hasReason) {
    size_ += computeStringSize(6, self.reason);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(7, self.deviceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HolidayApply*) parseFromData:(NSData*) data {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromData:data] build];
}
+ (HolidayApply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HolidayApply*) parseFromInputStream:(NSInputStream*) input {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromInputStream:input] build];
}
+ (HolidayApply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HolidayApply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromCodedInputStream:input] build];
}
+ (HolidayApply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HolidayApply*)[[[HolidayApply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HolidayApply_Builder*) builder {
  return [[[HolidayApply_Builder alloc] init] autorelease];
}
+ (HolidayApply_Builder*) builderWithPrototype:(HolidayApply*) prototype {
  return [[HolidayApply builder] mergeFrom:prototype];
}
- (HolidayApply_Builder*) builder {
  return [HolidayApply builder];
}
- (HolidayApply_Builder*) toBuilder {
  return [HolidayApply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHolidayCateory) {
    [output appendFormat:@"%@%@ {\n", indent, @"holidayCateory"];
    [self.holidayCateory writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", self.startTime];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", self.endTime];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HolidayApply class]]) {
    return NO;
  }
  HolidayApply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasHolidayCateory == otherMessage.hasHolidayCateory &&
      (!self.hasHolidayCateory || [self.holidayCateory isEqual:otherMessage.holidayCateory]) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || [self.startTime isEqual:otherMessage.startTime]) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || [self.endTime isEqual:otherMessage.endTime]) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasHolidayCateory) {
    hashCode = hashCode * 31 + [self.holidayCateory hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [self.startTime hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [self.endTime hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HolidayApply_Builder()
@property (retain) HolidayApply* result;
@end

@implementation HolidayApply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[HolidayApply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (HolidayApply_Builder*) clear {
  self.result = [[[HolidayApply alloc] init] autorelease];
  return self;
}
- (HolidayApply_Builder*) clone {
  return [HolidayApply builderWithPrototype:result];
}
- (HolidayApply*) defaultInstance {
  return [HolidayApply defaultInstance];
}
- (HolidayApply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HolidayApply*) buildPartial {
  HolidayApply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (HolidayApply_Builder*) mergeFrom:(HolidayApply*) other {
  if (other == [HolidayApply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasHolidayCateory) {
    [self mergeHolidayCateory:other.holidayCateory];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HolidayApply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HolidayApply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        HolidayCategory_Builder* subBuilder = [HolidayCategory builder];
        if (self.hasHolidayCateory) {
          [subBuilder mergeFrom:self.holidayCateory];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHolidayCateory:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStartTime:[input readString]];
        break;
      }
      case 42: {
        [self setEndTime:[input readString]];
        break;
      }
      case 50: {
        [self setReason:[input readString]];
        break;
      }
      case 58: {
        [self setDeviceId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (HolidayApply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (HolidayApply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (HolidayApply_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (HolidayApply_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (HolidayApply_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (HolidayApply_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasHolidayCateory {
  return result.hasHolidayCateory;
}
- (HolidayCategory*) holidayCateory {
  return result.holidayCateory;
}
- (HolidayApply_Builder*) setHolidayCateory:(HolidayCategory*) value {
  result.hasHolidayCateory = YES;
  result.holidayCateory = value;
  return self;
}
- (HolidayApply_Builder*) setHolidayCateoryBuilder:(HolidayCategory_Builder*) builderForValue {
  return [self setHolidayCateory:[builderForValue build]];
}
- (HolidayApply_Builder*) mergeHolidayCateory:(HolidayCategory*) value {
  if (result.hasHolidayCateory &&
      result.holidayCateory != [HolidayCategory defaultInstance]) {
    result.holidayCateory =
      [[[HolidayCategory builderWithPrototype:result.holidayCateory] mergeFrom:value] buildPartial];
  } else {
    result.holidayCateory = value;
  }
  result.hasHolidayCateory = YES;
  return self;
}
- (HolidayApply_Builder*) clearHolidayCateory {
  result.hasHolidayCateory = NO;
  result.holidayCateory = [HolidayCategory defaultInstance];
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (NSString*) startTime {
  return result.startTime;
}
- (HolidayApply_Builder*) setStartTime:(NSString*) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (HolidayApply_Builder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = @"";
  return self;
}
- (BOOL) hasEndTime {
  return result.hasEndTime;
}
- (NSString*) endTime {
  return result.endTime;
}
- (HolidayApply_Builder*) setEndTime:(NSString*) value {
  result.hasEndTime = YES;
  result.endTime = value;
  return self;
}
- (HolidayApply_Builder*) clearEndTime {
  result.hasEndTime = NO;
  result.endTime = @"";
  return self;
}
- (BOOL) hasReason {
  return result.hasReason;
}
- (NSString*) reason {
  return result.reason;
}
- (HolidayApply_Builder*) setReason:(NSString*) value {
  result.hasReason = YES;
  result.reason = value;
  return self;
}
- (HolidayApply_Builder*) clearReason {
  result.hasReason = NO;
  result.reason = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (HolidayApply_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (HolidayApply_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
@end

