// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CheckIn.pb.h"

@implementation CheckInRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
    return extensionRegistry;
}

+ (void) initialize {
    if (self == [CheckInRoot class]) {
        PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
        [self registerAllExtensions:registry];
        [GenericRoot registerAllExtensions:registry];
        [UserRoot registerAllExtensions:registry];
        extensionRegistry = [registry retain];
    }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CheckInWifi ()
@property int32_t id;
@property (retain) User* user;
@property (retain) NSString* name;
@property (retain) NSString* macAddress;
@property int32_t enabled;
@property (retain) Location* location;
@property (retain) NSString* createDate;
@property (retain) NSString* comment;
@end

@implementation CheckInWifi

- (BOOL) hasId {
    return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
    hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
    return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
    hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasName {
    return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
    hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasMacAddress {
    return !!hasMacAddress_;
}
- (void) setHasMacAddress:(BOOL) value_ {
    hasMacAddress_ = !!value_;
}
@synthesize macAddress;
- (BOOL) hasEnabled {
    return !!hasEnabled_;
}
- (void) setHasEnabled:(BOOL) value_ {
    hasEnabled_ = !!value_;
}
@synthesize enabled;
- (BOOL) hasLocation {
    return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
    hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasCreateDate {
    return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
    hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasComment {
    return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
    hasComment_ = !!value_;
}
@synthesize comment;
- (void) dealloc {
    self.user = nil;
    self.name = nil;
    self.macAddress = nil;
    self.location = nil;
    self.createDate = nil;
    self.comment = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.id = 0;
        self.user = [User defaultInstance];
        self.name = @"";
        self.macAddress = @"";
        self.enabled = 0;
        self.location = [Location defaultInstance];
        self.createDate = @"";
        self.comment = @"";
    }
    return self;
}
static CheckInWifi* defaultCheckInWifiInstance = nil;
+ (void) initialize {
    if (self == [CheckInWifi class]) {
        defaultCheckInWifiInstance = [[CheckInWifi alloc] init];
    }
}
+ (CheckInWifi*) defaultInstance {
    return defaultCheckInWifiInstance;
}
- (CheckInWifi*) defaultInstance {
    return defaultCheckInWifiInstance;
}
- (BOOL) isInitialized {
    if (!self.hasId) {
        return NO;
    }
    if (!self.hasName) {
        return NO;
    }
    if (!self.hasMacAddress) {
        return NO;
    }
    if (self.hasUser) {
        if (!self.user.isInitialized) {
            return NO;
        }
    }
    if (self.hasLocation) {
        if (!self.location.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasId) {
        [output writeInt32:1 value:self.id];
    }
    if (self.hasUser) {
        [output writeMessage:2 value:self.user];
    }
    if (self.hasName) {
        [output writeString:3 value:self.name];
    }
    if (self.hasMacAddress) {
        [output writeString:4 value:self.macAddress];
    }
    if (self.hasEnabled) {
        [output writeInt32:5 value:self.enabled];
    }
    if (self.hasLocation) {
        [output writeMessage:6 value:self.location];
    }
    if (self.hasCreateDate) {
        [output writeString:7 value:self.createDate];
    }
    if (self.hasComment) {
        [output writeString:8 value:self.comment];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasId) {
        size_ += computeInt32Size(1, self.id);
    }
    if (self.hasUser) {
        size_ += computeMessageSize(2, self.user);
    }
    if (self.hasName) {
        size_ += computeStringSize(3, self.name);
    }
    if (self.hasMacAddress) {
        size_ += computeStringSize(4, self.macAddress);
    }
    if (self.hasEnabled) {
        size_ += computeInt32Size(5, self.enabled);
    }
    if (self.hasLocation) {
        size_ += computeMessageSize(6, self.location);
    }
    if (self.hasCreateDate) {
        size_ += computeStringSize(7, self.createDate);
    }
    if (self.hasComment) {
        size_ += computeStringSize(8, self.comment);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInWifi*) parseFromData:(NSData*) data {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromData:data] build];
}
+ (CheckInWifi*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInWifi*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromInputStream:input] build];
}
+ (CheckInWifi*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInWifi*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInWifi*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInWifi*)[[[CheckInWifi builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInWifi_Builder*) builder {
    return [[[CheckInWifi_Builder alloc] init] autorelease];
}
+ (CheckInWifi_Builder*) builderWithPrototype:(CheckInWifi*) prototype {
    return [[CheckInWifi builder] mergeFrom:prototype];
}
- (CheckInWifi_Builder*) builder {
    return [CheckInWifi builder];
}
- (CheckInWifi_Builder*) toBuilder {
    return [CheckInWifi builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
    }
    if (self.hasUser) {
        [output appendFormat:@"%@%@ {\n", indent, @"user"];
        [self.user writeDescriptionTo:output
                           withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasName) {
        [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
    }
    if (self.hasMacAddress) {
        [output appendFormat:@"%@%@: %@\n", indent, @"macAddress", self.macAddress];
    }
    if (self.hasEnabled) {
        [output appendFormat:@"%@%@: %@\n", indent, @"enabled", [NSNumber numberWithInt:self.enabled]];
    }
    if (self.hasLocation) {
        [output appendFormat:@"%@%@ {\n", indent, @"location"];
        [self.location writeDescriptionTo:output
                               withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasCreateDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
    }
    if (self.hasComment) {
        [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInWifi class]]) {
        return NO;
    }
    CheckInWifi *otherMessage = other;
    return
    self.hasId == otherMessage.hasId &&
    (!self.hasId || self.id == otherMessage.id) &&
    self.hasUser == otherMessage.hasUser &&
    (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
    self.hasName == otherMessage.hasName &&
    (!self.hasName || [self.name isEqual:otherMessage.name]) &&
    self.hasMacAddress == otherMessage.hasMacAddress &&
    (!self.hasMacAddress || [self.macAddress isEqual:otherMessage.macAddress]) &&
    self.hasEnabled == otherMessage.hasEnabled &&
    (!self.hasEnabled || self.enabled == otherMessage.enabled) &&
    self.hasLocation == otherMessage.hasLocation &&
    (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
    self.hasCreateDate == otherMessage.hasCreateDate &&
    (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
    self.hasComment == otherMessage.hasComment &&
    (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
    }
    if (self.hasUser) {
        hashCode = hashCode * 31 + [self.user hash];
    }
    if (self.hasName) {
        hashCode = hashCode * 31 + [self.name hash];
    }
    if (self.hasMacAddress) {
        hashCode = hashCode * 31 + [self.macAddress hash];
    }
    if (self.hasEnabled) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.enabled] hash];
    }
    if (self.hasLocation) {
        hashCode = hashCode * 31 + [self.location hash];
    }
    if (self.hasCreateDate) {
        hashCode = hashCode * 31 + [self.createDate hash];
    }
    if (self.hasComment) {
        hashCode = hashCode * 31 + [self.comment hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInWifi_Builder()
@property (retain) CheckInWifi* result;
@end

@implementation CheckInWifi_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInWifi alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInWifi_Builder*) clear {
    self.result = [[[CheckInWifi alloc] init] autorelease];
    return self;
}
- (CheckInWifi_Builder*) clone {
    return [CheckInWifi builderWithPrototype:result];
}
- (CheckInWifi*) defaultInstance {
    return [CheckInWifi defaultInstance];
}
- (CheckInWifi*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInWifi*) buildPartial {
    CheckInWifi* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInWifi_Builder*) mergeFrom:(CheckInWifi*) other {
    if (other == [CheckInWifi defaultInstance]) {
        return self;
    }
    if (other.hasId) {
        [self setId:other.id];
    }
    if (other.hasUser) {
        [self mergeUser:other.user];
    }
    if (other.hasName) {
        [self setName:other.name];
    }
    if (other.hasMacAddress) {
        [self setMacAddress:other.macAddress];
    }
    if (other.hasEnabled) {
        [self setEnabled:other.enabled];
    }
    if (other.hasLocation) {
        [self mergeLocation:other.location];
    }
    if (other.hasCreateDate) {
        [self setCreateDate:other.createDate];
    }
    if (other.hasComment) {
        [self setComment:other.comment];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInWifi_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInWifi_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 8: {
                [self setId:[input readInt32]];
                break;
            }
            case 18: {
                User_Builder* subBuilder = [User builder];
                if (self.hasUser) {
                    [subBuilder mergeFrom:self.user];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setUser:[subBuilder buildPartial]];
                break;
            }
            case 26: {
                [self setName:[input readString]];
                break;
            }
            case 34: {
                [self setMacAddress:[input readString]];
                break;
            }
            case 40: {
                [self setEnabled:[input readInt32]];
                break;
            }
            case 50: {
                Location_Builder* subBuilder = [Location builder];
                if (self.hasLocation) {
                    [subBuilder mergeFrom:self.location];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setLocation:[subBuilder buildPartial]];
                break;
            }
            case 58: {
                [self setCreateDate:[input readString]];
                break;
            }
            case 66: {
                [self setComment:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasId {
    return result.hasId;
}
- (int32_t) id {
    return result.id;
}
- (CheckInWifi_Builder*) setId:(int32_t) value {
    result.hasId = YES;
    result.id = value;
    return self;
}
- (CheckInWifi_Builder*) clearId {
    result.hasId = NO;
    result.id = 0;
    return self;
}
- (BOOL) hasUser {
    return result.hasUser;
}
- (User*) user {
    return result.user;
}
- (CheckInWifi_Builder*) setUser:(User*) value {
    result.hasUser = YES;
    result.user = value;
    return self;
}
- (CheckInWifi_Builder*) setUserBuilder:(User_Builder*) builderForValue {
    return [self setUser:[builderForValue build]];
}
- (CheckInWifi_Builder*) mergeUser:(User*) value {
    if (result.hasUser &&
        result.user != [User defaultInstance]) {
        result.user =
        [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
    } else {
        result.user = value;
    }
    result.hasUser = YES;
    return self;
}
- (CheckInWifi_Builder*) clearUser {
    result.hasUser = NO;
    result.user = [User defaultInstance];
    return self;
}
- (BOOL) hasName {
    return result.hasName;
}
- (NSString*) name {
    return result.name;
}
- (CheckInWifi_Builder*) setName:(NSString*) value {
    result.hasName = YES;
    result.name = value;
    return self;
}
- (CheckInWifi_Builder*) clearName {
    result.hasName = NO;
    result.name = @"";
    return self;
}
- (BOOL) hasMacAddress {
    return result.hasMacAddress;
}
- (NSString*) macAddress {
    return result.macAddress;
}
- (CheckInWifi_Builder*) setMacAddress:(NSString*) value {
    result.hasMacAddress = YES;
    result.macAddress = value;
    return self;
}
- (CheckInWifi_Builder*) clearMacAddress {
    result.hasMacAddress = NO;
    result.macAddress = @"";
    return self;
}
- (BOOL) hasEnabled {
    return result.hasEnabled;
}
- (int32_t) enabled {
    return result.enabled;
}
- (CheckInWifi_Builder*) setEnabled:(int32_t) value {
    result.hasEnabled = YES;
    result.enabled = value;
    return self;
}
- (CheckInWifi_Builder*) clearEnabled {
    result.hasEnabled = NO;
    result.enabled = 0;
    return self;
}
- (BOOL) hasLocation {
    return result.hasLocation;
}
- (Location*) location {
    return result.location;
}
- (CheckInWifi_Builder*) setLocation:(Location*) value {
    result.hasLocation = YES;
    result.location = value;
    return self;
}
- (CheckInWifi_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
    return [self setLocation:[builderForValue build]];
}
- (CheckInWifi_Builder*) mergeLocation:(Location*) value {
    if (result.hasLocation &&
        result.location != [Location defaultInstance]) {
        result.location =
        [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
    } else {
        result.location = value;
    }
    result.hasLocation = YES;
    return self;
}
- (CheckInWifi_Builder*) clearLocation {
    result.hasLocation = NO;
    result.location = [Location defaultInstance];
    return self;
}
- (BOOL) hasCreateDate {
    return result.hasCreateDate;
}
- (NSString*) createDate {
    return result.createDate;
}
- (CheckInWifi_Builder*) setCreateDate:(NSString*) value {
    result.hasCreateDate = YES;
    result.createDate = value;
    return self;
}
- (CheckInWifi_Builder*) clearCreateDate {
    result.hasCreateDate = NO;
    result.createDate = @"";
    return self;
}
- (BOOL) hasComment {
    return result.hasComment;
}
- (NSString*) comment {
    return result.comment;
}
- (CheckInWifi_Builder*) setComment:(NSString*) value {
    result.hasComment = YES;
    result.comment = value;
    return self;
}
- (CheckInWifi_Builder*) clearComment {
    result.hasComment = NO;
    result.comment = @"";
    return self;
}
@end

@interface AttendanceType ()
@property (retain) NSString* value;
@end

@implementation AttendanceType

- (BOOL) hasValue {
    return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
    hasValue_ = !!value_;
}
@synthesize value;
- (void) dealloc {
    self.value = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.value = @"";
    }
    return self;
}
static AttendanceType* defaultAttendanceTypeInstance = nil;
+ (void) initialize {
    if (self == [AttendanceType class]) {
        defaultAttendanceTypeInstance = [[AttendanceType alloc] init];
    }
}
+ (AttendanceType*) defaultInstance {
    return defaultAttendanceTypeInstance;
}
- (AttendanceType*) defaultInstance {
    return defaultAttendanceTypeInstance;
}
- (BOOL) isInitialized {
    if (!self.hasValue) {
        return NO;
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasValue) {
        [output writeString:1 value:self.value];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasValue) {
        size_ += computeStringSize(1, self.value);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (AttendanceType*) parseFromData:(NSData*) data {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromData:data] build];
}
+ (AttendanceType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AttendanceType*) parseFromInputStream:(NSInputStream*) input {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromInputStream:input] build];
}
+ (AttendanceType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromCodedInputStream:input] build];
}
+ (AttendanceType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (AttendanceType*)[[[AttendanceType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceType_Builder*) builder {
    return [[[AttendanceType_Builder alloc] init] autorelease];
}
+ (AttendanceType_Builder*) builderWithPrototype:(AttendanceType*) prototype {
    return [[AttendanceType builder] mergeFrom:prototype];
}
- (AttendanceType_Builder*) builder {
    return [AttendanceType builder];
}
- (AttendanceType_Builder*) toBuilder {
    return [AttendanceType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasValue) {
        [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[AttendanceType class]]) {
        return NO;
    }
    AttendanceType *otherMessage = other;
    return
    self.hasValue == otherMessage.hasValue &&
    (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasValue) {
        hashCode = hashCode * 31 + [self.value hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface AttendanceType_Builder()
@property (retain) AttendanceType* result;
@end

@implementation AttendanceType_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[AttendanceType alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (AttendanceType_Builder*) clear {
    self.result = [[[AttendanceType alloc] init] autorelease];
    return self;
}
- (AttendanceType_Builder*) clone {
    return [AttendanceType builderWithPrototype:result];
}
- (AttendanceType*) defaultInstance {
    return [AttendanceType defaultInstance];
}
- (AttendanceType*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (AttendanceType*) buildPartial {
    AttendanceType* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (AttendanceType_Builder*) mergeFrom:(AttendanceType*) other {
    if (other == [AttendanceType defaultInstance]) {
        return self;
    }
    if (other.hasValue) {
        [self setValue:other.value];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (AttendanceType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttendanceType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setValue:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasValue {
    return result.hasValue;
}
- (NSString*) value {
    return result.value;
}
- (AttendanceType_Builder*) setValue:(NSString*) value {
    result.hasValue = YES;
    result.value = value;
    return self;
}
- (AttendanceType_Builder*) clearValue {
    result.hasValue = NO;
    result.value = @"";
    return self;
}
@end

@interface CheckInChannel ()
@property (retain) NSString* channelValue;
@end

@implementation CheckInChannel

- (BOOL) hasChannelValue {
    return !!hasChannelValue_;
}
- (void) setHasChannelValue:(BOOL) value_ {
    hasChannelValue_ = !!value_;
}
@synthesize channelValue;
- (void) dealloc {
    self.channelValue = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.channelValue = @"";
    }
    return self;
}
static CheckInChannel* defaultCheckInChannelInstance = nil;
+ (void) initialize {
    if (self == [CheckInChannel class]) {
        defaultCheckInChannelInstance = [[CheckInChannel alloc] init];
    }
}
+ (CheckInChannel*) defaultInstance {
    return defaultCheckInChannelInstance;
}
- (CheckInChannel*) defaultInstance {
    return defaultCheckInChannelInstance;
}
- (BOOL) isInitialized {
    if (!self.hasChannelValue) {
        return NO;
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasChannelValue) {
        [output writeString:1 value:self.channelValue];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasChannelValue) {
        size_ += computeStringSize(1, self.channelValue);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInChannel*) parseFromData:(NSData*) data {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromData:data] build];
}
+ (CheckInChannel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInChannel*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromInputStream:input] build];
}
+ (CheckInChannel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInChannel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInChannel*)[[[CheckInChannel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInChannel_Builder*) builder {
    return [[[CheckInChannel_Builder alloc] init] autorelease];
}
+ (CheckInChannel_Builder*) builderWithPrototype:(CheckInChannel*) prototype {
    return [[CheckInChannel builder] mergeFrom:prototype];
}
- (CheckInChannel_Builder*) builder {
    return [CheckInChannel builder];
}
- (CheckInChannel_Builder*) toBuilder {
    return [CheckInChannel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasChannelValue) {
        [output appendFormat:@"%@%@: %@\n", indent, @"channelValue", self.channelValue];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInChannel class]]) {
        return NO;
    }
    CheckInChannel *otherMessage = other;
    return
    self.hasChannelValue == otherMessage.hasChannelValue &&
    (!self.hasChannelValue || [self.channelValue isEqual:otherMessage.channelValue]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasChannelValue) {
        hashCode = hashCode * 31 + [self.channelValue hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInChannel_Builder()
@property (retain) CheckInChannel* result;
@end

@implementation CheckInChannel_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInChannel alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInChannel_Builder*) clear {
    self.result = [[[CheckInChannel alloc] init] autorelease];
    return self;
}
- (CheckInChannel_Builder*) clone {
    return [CheckInChannel builderWithPrototype:result];
}
- (CheckInChannel*) defaultInstance {
    return [CheckInChannel defaultInstance];
}
- (CheckInChannel*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInChannel*) buildPartial {
    CheckInChannel* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInChannel_Builder*) mergeFrom:(CheckInChannel*) other {
    if (other == [CheckInChannel defaultInstance]) {
        return self;
    }
    if (other.hasChannelValue) {
        [self setChannelValue:other.channelValue];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInChannel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setChannelValue:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasChannelValue {
    return result.hasChannelValue;
}
- (NSString*) channelValue {
    return result.channelValue;
}
- (CheckInChannel_Builder*) setChannelValue:(NSString*) value {
    result.hasChannelValue = YES;
    result.channelValue = value;
    return self;
}
- (CheckInChannel_Builder*) clearChannelValue {
    result.hasChannelValue = NO;
    result.channelValue = @"";
    return self;
}
@end

@interface CheckInTrack ()
@property int32_t id;
@property (retain) User* user;
@property (retain) CheckInWifi* wifi;
@property (retain) NSString* comment;
@property (retain) CheckInShiftGroup* checkInShiftGroup;
@property (retain) Location* location;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) PBAppendableArray * checkInTrackRepliesArray;
@property int32_t replyCount;
@property (retain) NSString* cameraCategory;
@property (retain) NSString* channelValue;
@property (retain) NSString* checkInRemark;
@property (retain) NSString* checkInDate;
@property (retain) NSString* createTime;
@end

@implementation CheckInTrack

- (BOOL) hasId {
    return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
    hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
    return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
    hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasWifi {
    return !!hasWifi_;
}
- (void) setHasWifi:(BOOL) value_ {
    hasWifi_ = !!value_;
}
@synthesize wifi;
- (BOOL) hasComment {
    return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
    hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasCheckInShiftGroup {
    return !!hasCheckInShiftGroup_;
}
- (void) setHasCheckInShiftGroup:(BOOL) value_ {
    hasCheckInShiftGroup_ = !!value_;
}
@synthesize checkInShiftGroup;
- (BOOL) hasLocation {
    return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
    hasLocation_ = !!value_;
}
@synthesize location;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
@synthesize checkInTrackRepliesArray;
@dynamic checkInTrackReplies;
- (BOOL) hasReplyCount {
    return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
    hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasCameraCategory {
    return !!hasCameraCategory_;
}
- (void) setHasCameraCategory:(BOOL) value_ {
    hasCameraCategory_ = !!value_;
}
@synthesize cameraCategory;
- (BOOL) hasChannelValue {
    return !!hasChannelValue_;
}
- (void) setHasChannelValue:(BOOL) value_ {
    hasChannelValue_ = !!value_;
}
@synthesize channelValue;
- (BOOL) hasCheckInRemark {
    return !!hasCheckInRemark_;
}
- (void) setHasCheckInRemark:(BOOL) value_ {
    hasCheckInRemark_ = !!value_;
}
@synthesize checkInRemark;
- (BOOL) hasCheckInDate {
    return !!hasCheckInDate_;
}
- (void) setHasCheckInDate:(BOOL) value_ {
    hasCheckInDate_ = !!value_;
}
@synthesize checkInDate;
- (BOOL) hasCreateTime {
    return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
    hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (void) dealloc {
    self.user = nil;
    self.wifi = nil;
    self.comment = nil;
    self.checkInShiftGroup = nil;
    self.location = nil;
    self.filesArray = nil;
    self.filePathArray = nil;
    self.checkInTrackRepliesArray = nil;
    self.cameraCategory = nil;
    self.channelValue = nil;
    self.checkInRemark = nil;
    self.checkInDate = nil;
    self.createTime = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.id = 0;
        self.user = [User defaultInstance];
        self.wifi = [CheckInWifi defaultInstance];
        self.comment = @"";
        self.checkInShiftGroup = [CheckInShiftGroup defaultInstance];
        self.location = [Location defaultInstance];
        self.replyCount = 0;
        self.cameraCategory = @"";
        self.channelValue = @"";
        self.checkInRemark = @"";
        self.checkInDate = @"";
        self.createTime = @"";
    }
    return self;
}
static CheckInTrack* defaultCheckInTrackInstance = nil;
+ (void) initialize {
    if (self == [CheckInTrack class]) {
        defaultCheckInTrackInstance = [[CheckInTrack alloc] init];
    }
}
+ (CheckInTrack*) defaultInstance {
    return defaultCheckInTrackInstance;
}
- (CheckInTrack*) defaultInstance {
    return defaultCheckInTrackInstance;
}
- (PBArray *)files {
    return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
    return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
    return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
    return [filePathArray objectAtIndex:index];
}
- (PBArray *)checkInTrackReplies {
    return checkInTrackRepliesArray;
}
- (CheckInTrackReply*)checkInTrackRepliesAtIndex:(NSUInteger)index {
    return [checkInTrackRepliesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (!self.hasId) {
        return NO;
    }
    if (!self.hasCheckInShiftGroup) {
        return NO;
    }
    if (self.hasUser) {
        if (!self.user.isInitialized) {
            return NO;
        }
    }
    if (self.hasWifi) {
        if (!self.wifi.isInitialized) {
            return NO;
        }
    }
    if (!self.checkInShiftGroup.isInitialized) {
        return NO;
    }
    if (self.hasLocation) {
        if (!self.location.isInitialized) {
            return NO;
        }
    }
    for (CheckInTrackReply* element in self.checkInTrackReplies) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasId) {
        [output writeInt32:1 value:self.id];
    }
    if (self.hasUser) {
        [output writeMessage:2 value:self.user];
    }
    if (self.hasWifi) {
        [output writeMessage:3 value:self.wifi];
    }
    if (self.hasComment) {
        [output writeString:4 value:self.comment];
    }
    if (self.hasCheckInShiftGroup) {
        [output writeMessage:5 value:self.checkInShiftGroup];
    }
    if (self.hasLocation) {
        [output writeMessage:6 value:self.location];
    }
    const NSUInteger filesArrayCount = self.filesArray.count;
    if (filesArrayCount > 0) {
        const NSData* *values = (const NSData* *)self.filesArray.data;
        for (NSUInteger i = 0; i < filesArrayCount; ++i) {
            [output writeData:7 value:values[i]];
        }
    }
    const NSUInteger filePathArrayCount = self.filePathArray.count;
    if (filePathArrayCount > 0) {
        const NSString* *values = (const NSString* *)self.filePathArray.data;
        for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
            [output writeString:8 value:values[i]];
        }
    }
    for (CheckInTrackReply *element in self.checkInTrackRepliesArray) {
        [output writeMessage:9 value:element];
    }
    if (self.hasReplyCount) {
        [output writeInt32:10 value:self.replyCount];
    }
    if (self.hasCameraCategory) {
        [output writeString:11 value:self.cameraCategory];
    }
    if (self.hasChannelValue) {
        [output writeString:12 value:self.channelValue];
    }
    if (self.hasCheckInRemark) {
        [output writeString:13 value:self.checkInRemark];
    }
    if (self.hasCheckInDate) {
        [output writeString:14 value:self.checkInDate];
    }
    if (self.hasCreateTime) {
        [output writeString:15 value:self.createTime];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasId) {
        size_ += computeInt32Size(1, self.id);
    }
    if (self.hasUser) {
        size_ += computeMessageSize(2, self.user);
    }
    if (self.hasWifi) {
        size_ += computeMessageSize(3, self.wifi);
    }
    if (self.hasComment) {
        size_ += computeStringSize(4, self.comment);
    }
    if (self.hasCheckInShiftGroup) {
        size_ += computeMessageSize(5, self.checkInShiftGroup);
    }
    if (self.hasLocation) {
        size_ += computeMessageSize(6, self.location);
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.filesArray.count;
        const NSData* *values = (const NSData* *)self.filesArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeDataSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.filePathArray.count;
        const NSString* *values = (const NSString* *)self.filePathArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeStringSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    for (CheckInTrackReply *element in self.checkInTrackRepliesArray) {
        size_ += computeMessageSize(9, element);
    }
    if (self.hasReplyCount) {
        size_ += computeInt32Size(10, self.replyCount);
    }
    if (self.hasCameraCategory) {
        size_ += computeStringSize(11, self.cameraCategory);
    }
    if (self.hasChannelValue) {
        size_ += computeStringSize(12, self.channelValue);
    }
    if (self.hasCheckInRemark) {
        size_ += computeStringSize(13, self.checkInRemark);
    }
    if (self.hasCheckInDate) {
        size_ += computeStringSize(14, self.checkInDate);
    }
    if (self.hasCreateTime) {
        size_ += computeStringSize(15, self.createTime);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInTrack*) parseFromData:(NSData*) data {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromData:data] build];
}
+ (CheckInTrack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrack*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromInputStream:input] build];
}
+ (CheckInTrack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInTrack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrack*)[[[CheckInTrack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrack_Builder*) builder {
    return [[[CheckInTrack_Builder alloc] init] autorelease];
}
+ (CheckInTrack_Builder*) builderWithPrototype:(CheckInTrack*) prototype {
    return [[CheckInTrack builder] mergeFrom:prototype];
}
- (CheckInTrack_Builder*) builder {
    return [CheckInTrack builder];
}
- (CheckInTrack_Builder*) toBuilder {
    return [CheckInTrack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
    }
    if (self.hasUser) {
        [output appendFormat:@"%@%@ {\n", indent, @"user"];
        [self.user writeDescriptionTo:output
                           withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasWifi) {
        [output appendFormat:@"%@%@ {\n", indent, @"wifi"];
        [self.wifi writeDescriptionTo:output
                           withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasComment) {
        [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
    }
    if (self.hasCheckInShiftGroup) {
        [output appendFormat:@"%@%@ {\n", indent, @"checkInShiftGroup"];
        [self.checkInShiftGroup writeDescriptionTo:output
                                        withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasLocation) {
        [output appendFormat:@"%@%@ {\n", indent, @"location"];
        [self.location writeDescriptionTo:output
                               withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (NSData* element in self.filesArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
    }
    for (NSString* element in self.filePathArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
    }
    for (CheckInTrackReply* element in self.checkInTrackRepliesArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"checkInTrackReplies"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasReplyCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
    }
    if (self.hasCameraCategory) {
        [output appendFormat:@"%@%@: %@\n", indent, @"cameraCategory", self.cameraCategory];
    }
    if (self.hasChannelValue) {
        [output appendFormat:@"%@%@: %@\n", indent, @"channelValue", self.channelValue];
    }
    if (self.hasCheckInRemark) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInRemark", self.checkInRemark];
    }
    if (self.hasCheckInDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInDate", self.checkInDate];
    }
    if (self.hasCreateTime) {
        [output appendFormat:@"%@%@: %@\n", indent, @"createTime", self.createTime];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInTrack class]]) {
        return NO;
    }
    CheckInTrack *otherMessage = other;
    return
    self.hasId == otherMessage.hasId &&
    (!self.hasId || self.id == otherMessage.id) &&
    self.hasUser == otherMessage.hasUser &&
    (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
    self.hasWifi == otherMessage.hasWifi &&
    (!self.hasWifi || [self.wifi isEqual:otherMessage.wifi]) &&
    self.hasComment == otherMessage.hasComment &&
    (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
    self.hasCheckInShiftGroup == otherMessage.hasCheckInShiftGroup &&
    (!self.hasCheckInShiftGroup || [self.checkInShiftGroup isEqual:otherMessage.checkInShiftGroup]) &&
    self.hasLocation == otherMessage.hasLocation &&
    (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
    [self.filesArray isEqualToArray:otherMessage.filesArray] &&
    [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
    [self.checkInTrackRepliesArray isEqualToArray:otherMessage.checkInTrackRepliesArray] &&
    self.hasReplyCount == otherMessage.hasReplyCount &&
    (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
    self.hasCameraCategory == otherMessage.hasCameraCategory &&
    (!self.hasCameraCategory || [self.cameraCategory isEqual:otherMessage.cameraCategory]) &&
    self.hasChannelValue == otherMessage.hasChannelValue &&
    (!self.hasChannelValue || [self.channelValue isEqual:otherMessage.channelValue]) &&
    self.hasCheckInRemark == otherMessage.hasCheckInRemark &&
    (!self.hasCheckInRemark || [self.checkInRemark isEqual:otherMessage.checkInRemark]) &&
    self.hasCheckInDate == otherMessage.hasCheckInDate &&
    (!self.hasCheckInDate || [self.checkInDate isEqual:otherMessage.checkInDate]) &&
    self.hasCreateTime == otherMessage.hasCreateTime &&
    (!self.hasCreateTime || [self.createTime isEqual:otherMessage.createTime]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
    }
    if (self.hasUser) {
        hashCode = hashCode * 31 + [self.user hash];
    }
    if (self.hasWifi) {
        hashCode = hashCode * 31 + [self.wifi hash];
    }
    if (self.hasComment) {
        hashCode = hashCode * 31 + [self.comment hash];
    }
    if (self.hasCheckInShiftGroup) {
        hashCode = hashCode * 31 + [self.checkInShiftGroup hash];
    }
    if (self.hasLocation) {
        hashCode = hashCode * 31 + [self.location hash];
    }
    for (NSData* element in self.filesArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (NSString* element in self.filePathArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (CheckInTrackReply* element in self.checkInTrackRepliesArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasReplyCount) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
    }
    if (self.hasCameraCategory) {
        hashCode = hashCode * 31 + [self.cameraCategory hash];
    }
    if (self.hasChannelValue) {
        hashCode = hashCode * 31 + [self.channelValue hash];
    }
    if (self.hasCheckInRemark) {
        hashCode = hashCode * 31 + [self.checkInRemark hash];
    }
    if (self.hasCheckInDate) {
        hashCode = hashCode * 31 + [self.checkInDate hash];
    }
    if (self.hasCreateTime) {
        hashCode = hashCode * 31 + [self.createTime hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInTrack_Builder()
@property (retain) CheckInTrack* result;
@end

@implementation CheckInTrack_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInTrack alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInTrack_Builder*) clear {
    self.result = [[[CheckInTrack alloc] init] autorelease];
    return self;
}
- (CheckInTrack_Builder*) clone {
    return [CheckInTrack builderWithPrototype:result];
}
- (CheckInTrack*) defaultInstance {
    return [CheckInTrack defaultInstance];
}
- (CheckInTrack*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInTrack*) buildPartial {
    CheckInTrack* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInTrack_Builder*) mergeFrom:(CheckInTrack*) other {
    if (other == [CheckInTrack defaultInstance]) {
        return self;
    }
    if (other.hasId) {
        [self setId:other.id];
    }
    if (other.hasUser) {
        [self mergeUser:other.user];
    }
    if (other.hasWifi) {
        [self mergeWifi:other.wifi];
    }
    if (other.hasComment) {
        [self setComment:other.comment];
    }
    if (other.hasCheckInShiftGroup) {
        [self mergeCheckInShiftGroup:other.checkInShiftGroup];
    }
    if (other.hasLocation) {
        [self mergeLocation:other.location];
    }
    if (other.filesArray.count > 0) {
        if (result.filesArray == nil) {
            result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
        } else {
            [result.filesArray appendArray:other.filesArray];
        }
    }
    if (other.filePathArray.count > 0) {
        if (result.filePathArray == nil) {
            result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
        } else {
            [result.filePathArray appendArray:other.filePathArray];
        }
    }
    if (other.checkInTrackRepliesArray.count > 0) {
        if (result.checkInTrackRepliesArray == nil) {
            result.checkInTrackRepliesArray = [[other.checkInTrackRepliesArray copyWithZone:[other.checkInTrackRepliesArray zone]] autorelease];
        } else {
            [result.checkInTrackRepliesArray appendArray:other.checkInTrackRepliesArray];
        }
    }
    if (other.hasReplyCount) {
        [self setReplyCount:other.replyCount];
    }
    if (other.hasCameraCategory) {
        [self setCameraCategory:other.cameraCategory];
    }
    if (other.hasChannelValue) {
        [self setChannelValue:other.channelValue];
    }
    if (other.hasCheckInRemark) {
        [self setCheckInRemark:other.checkInRemark];
    }
    if (other.hasCheckInDate) {
        [self setCheckInDate:other.checkInDate];
    }
    if (other.hasCreateTime) {
        [self setCreateTime:other.createTime];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInTrack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInTrack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 8: {
                [self setId:[input readInt32]];
                break;
            }
            case 18: {
                User_Builder* subBuilder = [User builder];
                if (self.hasUser) {
                    [subBuilder mergeFrom:self.user];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setUser:[subBuilder buildPartial]];
                break;
            }
            case 26: {
                CheckInWifi_Builder* subBuilder = [CheckInWifi builder];
                if (self.hasWifi) {
                    [subBuilder mergeFrom:self.wifi];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setWifi:[subBuilder buildPartial]];
                break;
            }
            case 34: {
                [self setComment:[input readString]];
                break;
            }
            case 42: {
                CheckInShiftGroup_Builder* subBuilder = [CheckInShiftGroup builder];
                if (self.hasCheckInShiftGroup) {
                    [subBuilder mergeFrom:self.checkInShiftGroup];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setCheckInShiftGroup:[subBuilder buildPartial]];
                break;
            }
            case 50: {
                Location_Builder* subBuilder = [Location builder];
                if (self.hasLocation) {
                    [subBuilder mergeFrom:self.location];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setLocation:[subBuilder buildPartial]];
                break;
            }
            case 58: {
                [self addFiles:[input readData]];
                break;
            }
            case 66: {
                [self addFilePath:[input readString]];
                break;
            }
            case 74: {
                CheckInTrackReply_Builder* subBuilder = [CheckInTrackReply builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addCheckInTrackReplies:[subBuilder buildPartial]];
                break;
            }
            case 80: {
                [self setReplyCount:[input readInt32]];
                break;
            }
            case 90: {
                [self setCameraCategory:[input readString]];
                break;
            }
            case 98: {
                [self setChannelValue:[input readString]];
                break;
            }
            case 106: {
                [self setCheckInRemark:[input readString]];
                break;
            }
            case 114: {
                [self setCheckInDate:[input readString]];
                break;
            }
            case 122: {
                [self setCreateTime:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasId {
    return result.hasId;
}
- (int32_t) id {
    return result.id;
}
- (CheckInTrack_Builder*) setId:(int32_t) value {
    result.hasId = YES;
    result.id = value;
    return self;
}
- (CheckInTrack_Builder*) clearId {
    result.hasId = NO;
    result.id = 0;
    return self;
}
- (BOOL) hasUser {
    return result.hasUser;
}
- (User*) user {
    return result.user;
}
- (CheckInTrack_Builder*) setUser:(User*) value {
    result.hasUser = YES;
    result.user = value;
    return self;
}
- (CheckInTrack_Builder*) setUserBuilder:(User_Builder*) builderForValue {
    return [self setUser:[builderForValue build]];
}
- (CheckInTrack_Builder*) mergeUser:(User*) value {
    if (result.hasUser &&
        result.user != [User defaultInstance]) {
        result.user =
        [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
    } else {
        result.user = value;
    }
    result.hasUser = YES;
    return self;
}
- (CheckInTrack_Builder*) clearUser {
    result.hasUser = NO;
    result.user = [User defaultInstance];
    return self;
}
- (BOOL) hasWifi {
    return result.hasWifi;
}
- (CheckInWifi*) wifi {
    return result.wifi;
}
- (CheckInTrack_Builder*) setWifi:(CheckInWifi*) value {
    result.hasWifi = YES;
    result.wifi = value;
    return self;
}
- (CheckInTrack_Builder*) setWifiBuilder:(CheckInWifi_Builder*) builderForValue {
    return [self setWifi:[builderForValue build]];
}
- (CheckInTrack_Builder*) mergeWifi:(CheckInWifi*) value {
    if (result.hasWifi &&
        result.wifi != [CheckInWifi defaultInstance]) {
        result.wifi =
        [[[CheckInWifi builderWithPrototype:result.wifi] mergeFrom:value] buildPartial];
    } else {
        result.wifi = value;
    }
    result.hasWifi = YES;
    return self;
}
- (CheckInTrack_Builder*) clearWifi {
    result.hasWifi = NO;
    result.wifi = [CheckInWifi defaultInstance];
    return self;
}
- (BOOL) hasComment {
    return result.hasComment;
}
- (NSString*) comment {
    return result.comment;
}
- (CheckInTrack_Builder*) setComment:(NSString*) value {
    result.hasComment = YES;
    result.comment = value;
    return self;
}
- (CheckInTrack_Builder*) clearComment {
    result.hasComment = NO;
    result.comment = @"";
    return self;
}
- (BOOL) hasCheckInShiftGroup {
    return result.hasCheckInShiftGroup;
}
- (CheckInShiftGroup*) checkInShiftGroup {
    return result.checkInShiftGroup;
}
- (CheckInTrack_Builder*) setCheckInShiftGroup:(CheckInShiftGroup*) value {
    result.hasCheckInShiftGroup = YES;
    result.checkInShiftGroup = value;
    return self;
}
- (CheckInTrack_Builder*) setCheckInShiftGroupBuilder:(CheckInShiftGroup_Builder*) builderForValue {
    return [self setCheckInShiftGroup:[builderForValue build]];
}
- (CheckInTrack_Builder*) mergeCheckInShiftGroup:(CheckInShiftGroup*) value {
    if (result.hasCheckInShiftGroup &&
        result.checkInShiftGroup != [CheckInShiftGroup defaultInstance]) {
        result.checkInShiftGroup =
        [[[CheckInShiftGroup builderWithPrototype:result.checkInShiftGroup] mergeFrom:value] buildPartial];
    } else {
        result.checkInShiftGroup = value;
    }
    result.hasCheckInShiftGroup = YES;
    return self;
}
- (CheckInTrack_Builder*) clearCheckInShiftGroup {
    result.hasCheckInShiftGroup = NO;
    result.checkInShiftGroup = [CheckInShiftGroup defaultInstance];
    return self;
}
- (BOOL) hasLocation {
    return result.hasLocation;
}
- (Location*) location {
    return result.location;
}
- (CheckInTrack_Builder*) setLocation:(Location*) value {
    result.hasLocation = YES;
    result.location = value;
    return self;
}
- (CheckInTrack_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
    return [self setLocation:[builderForValue build]];
}
- (CheckInTrack_Builder*) mergeLocation:(Location*) value {
    if (result.hasLocation &&
        result.location != [Location defaultInstance]) {
        result.location =
        [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
    } else {
        result.location = value;
    }
    result.hasLocation = YES;
    return self;
}
- (CheckInTrack_Builder*) clearLocation {
    result.hasLocation = NO;
    result.location = [Location defaultInstance];
    return self;
}
- (PBAppendableArray *)files {
    return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
    return [result filesAtIndex:index];
}
- (CheckInTrack_Builder *)addFiles:(NSData*)value {
    if (result.filesArray == nil) {
        result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.filesArray addObject:value];
    return self;
}
- (CheckInTrack_Builder *)setFilesArray:(NSArray *)array {
    result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
    result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)clearFiles {
    result.filesArray = nil;
    return self;
}
- (PBAppendableArray *)filePath {
    return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
    return [result filePathAtIndex:index];
}
- (CheckInTrack_Builder *)addFilePath:(NSString*)value {
    if (result.filePathArray == nil) {
        result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.filePathArray addObject:value];
    return self;
}
- (CheckInTrack_Builder *)setFilePathArray:(NSArray *)array {
    result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
    result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)clearFilePath {
    result.filePathArray = nil;
    return self;
}
- (PBAppendableArray *)checkInTrackReplies {
    return result.checkInTrackRepliesArray;
}
- (CheckInTrackReply*)checkInTrackRepliesAtIndex:(NSUInteger)index {
    return [result checkInTrackRepliesAtIndex:index];
}
- (CheckInTrack_Builder *)addCheckInTrackReplies:(CheckInTrackReply*)value {
    if (result.checkInTrackRepliesArray == nil) {
        result.checkInTrackRepliesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.checkInTrackRepliesArray addObject:value];
    return self;
}
- (CheckInTrack_Builder *)setCheckInTrackRepliesArray:(NSArray *)array {
    result.checkInTrackRepliesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)setCheckInTrackRepliesValues:(const CheckInTrackReply* *)values count:(NSUInteger)count {
    result.checkInTrackRepliesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrack_Builder *)clearCheckInTrackReplies {
    result.checkInTrackRepliesArray = nil;
    return self;
}
- (BOOL) hasReplyCount {
    return result.hasReplyCount;
}
- (int32_t) replyCount {
    return result.replyCount;
}
- (CheckInTrack_Builder*) setReplyCount:(int32_t) value {
    result.hasReplyCount = YES;
    result.replyCount = value;
    return self;
}
- (CheckInTrack_Builder*) clearReplyCount {
    result.hasReplyCount = NO;
    result.replyCount = 0;
    return self;
}
- (BOOL) hasCameraCategory {
    return result.hasCameraCategory;
}
- (NSString*) cameraCategory {
    return result.cameraCategory;
}
- (CheckInTrack_Builder*) setCameraCategory:(NSString*) value {
    result.hasCameraCategory = YES;
    result.cameraCategory = value;
    return self;
}
- (CheckInTrack_Builder*) clearCameraCategory {
    result.hasCameraCategory = NO;
    result.cameraCategory = @"";
    return self;
}
- (BOOL) hasChannelValue {
    return result.hasChannelValue;
}
- (NSString*) channelValue {
    return result.channelValue;
}
- (CheckInTrack_Builder*) setChannelValue:(NSString*) value {
    result.hasChannelValue = YES;
    result.channelValue = value;
    return self;
}
- (CheckInTrack_Builder*) clearChannelValue {
    result.hasChannelValue = NO;
    result.channelValue = @"";
    return self;
}
- (BOOL) hasCheckInRemark {
    return result.hasCheckInRemark;
}
- (NSString*) checkInRemark {
    return result.checkInRemark;
}
- (CheckInTrack_Builder*) setCheckInRemark:(NSString*) value {
    result.hasCheckInRemark = YES;
    result.checkInRemark = value;
    return self;
}
- (CheckInTrack_Builder*) clearCheckInRemark {
    result.hasCheckInRemark = NO;
    result.checkInRemark = @"";
    return self;
}
- (BOOL) hasCheckInDate {
    return result.hasCheckInDate;
}
- (NSString*) checkInDate {
    return result.checkInDate;
}
- (CheckInTrack_Builder*) setCheckInDate:(NSString*) value {
    result.hasCheckInDate = YES;
    result.checkInDate = value;
    return self;
}
- (CheckInTrack_Builder*) clearCheckInDate {
    result.hasCheckInDate = NO;
    result.checkInDate = @"";
    return self;
}
- (BOOL) hasCreateTime {
    return result.hasCreateTime;
}
- (NSString*) createTime {
    return result.createTime;
}
- (CheckInTrack_Builder*) setCreateTime:(NSString*) value {
    result.hasCreateTime = YES;
    result.createTime = value;
    return self;
}
- (CheckInTrack_Builder*) clearCreateTime {
    result.hasCreateTime = NO;
    result.createTime = @"";
    return self;
}
@end

@interface CheckInShift ()
@property int32_t id;
@property (retain) NSString* name;
@property int32_t checkInCount;
@property int32_t isDaySpan;
@property (retain) NSString* versionNo;
@property (retain) NSString* workingTime;
@property (retain) PBAppendableArray * shiftGroupsArray;
@property (retain) NSString* weekDay;
@property (retain) NSString* humanizedSet;
@property (retain) NSString* syncTime;
@property (retain) NSString* checkInAhead;
@property (retain) PBAppendableArray * holidaysArray;
@property (retain) NSString* date;
@end

@implementation CheckInShift

- (BOOL) hasId {
    return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
    hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
    return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
    hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasCheckInCount {
    return !!hasCheckInCount_;
}
- (void) setHasCheckInCount:(BOOL) value_ {
    hasCheckInCount_ = !!value_;
}
@synthesize checkInCount;
- (BOOL) hasIsDaySpan {
    return !!hasIsDaySpan_;
}
- (void) setHasIsDaySpan:(BOOL) value_ {
    hasIsDaySpan_ = !!value_;
}
@synthesize isDaySpan;
- (BOOL) hasVersionNo {
    return !!hasVersionNo_;
}
- (void) setHasVersionNo:(BOOL) value_ {
    hasVersionNo_ = !!value_;
}
@synthesize versionNo;
- (BOOL) hasWorkingTime {
    return !!hasWorkingTime_;
}
- (void) setHasWorkingTime:(BOOL) value_ {
    hasWorkingTime_ = !!value_;
}
@synthesize workingTime;
@synthesize shiftGroupsArray;
@dynamic shiftGroups;
- (BOOL) hasWeekDay {
    return !!hasWeekDay_;
}
- (void) setHasWeekDay:(BOOL) value_ {
    hasWeekDay_ = !!value_;
}
@synthesize weekDay;
- (BOOL) hasHumanizedSet {
    return !!hasHumanizedSet_;
}
- (void) setHasHumanizedSet:(BOOL) value_ {
    hasHumanizedSet_ = !!value_;
}
@synthesize humanizedSet;
- (BOOL) hasSyncTime {
    return !!hasSyncTime_;
}
- (void) setHasSyncTime:(BOOL) value_ {
    hasSyncTime_ = !!value_;
}
@synthesize syncTime;
- (BOOL) hasCheckInAhead {
    return !!hasCheckInAhead_;
}
- (void) setHasCheckInAhead:(BOOL) value_ {
    hasCheckInAhead_ = !!value_;
}
@synthesize checkInAhead;
@synthesize holidaysArray;
@dynamic holidays;
- (BOOL) hasDate {
    return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
    hasDate_ = !!value_;
}
@synthesize date;
- (void) dealloc {
    self.name = nil;
    self.versionNo = nil;
    self.workingTime = nil;
    self.shiftGroupsArray = nil;
    self.weekDay = nil;
    self.humanizedSet = nil;
    self.syncTime = nil;
    self.checkInAhead = nil;
    self.holidaysArray = nil;
    self.date = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.id = 0;
        self.name = @"";
        self.checkInCount = 0;
        self.isDaySpan = 0;
        self.versionNo = @"";
        self.workingTime = @"";
        self.weekDay = @"";
        self.humanizedSet = @"";
        self.syncTime = @"";
        self.checkInAhead = @"";
        self.date = @"";
    }
    return self;
}
static CheckInShift* defaultCheckInShiftInstance = nil;
+ (void) initialize {
    if (self == [CheckInShift class]) {
        defaultCheckInShiftInstance = [[CheckInShift alloc] init];
    }
}
+ (CheckInShift*) defaultInstance {
    return defaultCheckInShiftInstance;
}
- (CheckInShift*) defaultInstance {
    return defaultCheckInShiftInstance;
}
- (PBArray *)shiftGroups {
    return shiftGroupsArray;
}
- (CheckInShiftGroup*)shiftGroupsAtIndex:(NSUInteger)index {
    return [shiftGroupsArray objectAtIndex:index];
}
- (PBArray *)holidays {
    return holidaysArray;
}
- (NSString*)holidaysAtIndex:(NSUInteger)index {
    return [holidaysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (!self.hasId) {
        return NO;
    }
    if (!self.hasName) {
        return NO;
    }
    if (!self.hasCheckInCount) {
        return NO;
    }
    if (!self.hasIsDaySpan) {
        return NO;
    }
    if (!self.hasVersionNo) {
        return NO;
    }
    if (!self.hasWorkingTime) {
        return NO;
    }
    if (!self.hasWeekDay) {
        return NO;
    }
    for (CheckInShiftGroup* element in self.shiftGroups) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasId) {
        [output writeInt32:1 value:self.id];
    }
    if (self.hasName) {
        [output writeString:2 value:self.name];
    }
    if (self.hasCheckInCount) {
        [output writeInt32:3 value:self.checkInCount];
    }
    if (self.hasIsDaySpan) {
        [output writeInt32:4 value:self.isDaySpan];
    }
    if (self.hasVersionNo) {
        [output writeString:5 value:self.versionNo];
    }
    if (self.hasWorkingTime) {
        [output writeString:6 value:self.workingTime];
    }
    for (CheckInShiftGroup *element in self.shiftGroupsArray) {
        [output writeMessage:7 value:element];
    }
    if (self.hasWeekDay) {
        [output writeString:8 value:self.weekDay];
    }
    if (self.hasHumanizedSet) {
        [output writeString:9 value:self.humanizedSet];
    }
    if (self.hasSyncTime) {
        [output writeString:10 value:self.syncTime];
    }
    if (self.hasCheckInAhead) {
        [output writeString:11 value:self.checkInAhead];
    }
    const NSUInteger holidaysArrayCount = self.holidaysArray.count;
    if (holidaysArrayCount > 0) {
        const NSString* *values = (const NSString* *)self.holidaysArray.data;
        for (NSUInteger i = 0; i < holidaysArrayCount; ++i) {
            [output writeString:12 value:values[i]];
        }
    }
    if (self.hasDate) {
        [output writeString:13 value:self.date];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasId) {
        size_ += computeInt32Size(1, self.id);
    }
    if (self.hasName) {
        size_ += computeStringSize(2, self.name);
    }
    if (self.hasCheckInCount) {
        size_ += computeInt32Size(3, self.checkInCount);
    }
    if (self.hasIsDaySpan) {
        size_ += computeInt32Size(4, self.isDaySpan);
    }
    if (self.hasVersionNo) {
        size_ += computeStringSize(5, self.versionNo);
    }
    if (self.hasWorkingTime) {
        size_ += computeStringSize(6, self.workingTime);
    }
    for (CheckInShiftGroup *element in self.shiftGroupsArray) {
        size_ += computeMessageSize(7, element);
    }
    if (self.hasWeekDay) {
        size_ += computeStringSize(8, self.weekDay);
    }
    if (self.hasHumanizedSet) {
        size_ += computeStringSize(9, self.humanizedSet);
    }
    if (self.hasSyncTime) {
        size_ += computeStringSize(10, self.syncTime);
    }
    if (self.hasCheckInAhead) {
        size_ += computeStringSize(11, self.checkInAhead);
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.holidaysArray.count;
        const NSString* *values = (const NSString* *)self.holidaysArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeStringSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    if (self.hasDate) {
        size_ += computeStringSize(13, self.date);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInShift*) parseFromData:(NSData*) data {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromData:data] build];
}
+ (CheckInShift*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInShift*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromInputStream:input] build];
}
+ (CheckInShift*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInShift*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInShift*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShift*)[[[CheckInShift builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInShift_Builder*) builder {
    return [[[CheckInShift_Builder alloc] init] autorelease];
}
+ (CheckInShift_Builder*) builderWithPrototype:(CheckInShift*) prototype {
    return [[CheckInShift builder] mergeFrom:prototype];
}
- (CheckInShift_Builder*) builder {
    return [CheckInShift builder];
}
- (CheckInShift_Builder*) toBuilder {
    return [CheckInShift builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
    }
    if (self.hasName) {
        [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
    }
    if (self.hasCheckInCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInCount", [NSNumber numberWithInt:self.checkInCount]];
    }
    if (self.hasIsDaySpan) {
        [output appendFormat:@"%@%@: %@\n", indent, @"isDaySpan", [NSNumber numberWithInt:self.isDaySpan]];
    }
    if (self.hasVersionNo) {
        [output appendFormat:@"%@%@: %@\n", indent, @"versionNo", self.versionNo];
    }
    if (self.hasWorkingTime) {
        [output appendFormat:@"%@%@: %@\n", indent, @"workingTime", self.workingTime];
    }
    for (CheckInShiftGroup* element in self.shiftGroupsArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"shiftGroups"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasWeekDay) {
        [output appendFormat:@"%@%@: %@\n", indent, @"weekDay", self.weekDay];
    }
    if (self.hasHumanizedSet) {
        [output appendFormat:@"%@%@: %@\n", indent, @"humanizedSet", self.humanizedSet];
    }
    if (self.hasSyncTime) {
        [output appendFormat:@"%@%@: %@\n", indent, @"syncTime", self.syncTime];
    }
    if (self.hasCheckInAhead) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInAhead", self.checkInAhead];
    }
    for (NSString* element in self.holidaysArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"holidays", element];
    }
    if (self.hasDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"date", self.date];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInShift class]]) {
        return NO;
    }
    CheckInShift *otherMessage = other;
    return
    self.hasId == otherMessage.hasId &&
    (!self.hasId || self.id == otherMessage.id) &&
    self.hasName == otherMessage.hasName &&
    (!self.hasName || [self.name isEqual:otherMessage.name]) &&
    self.hasCheckInCount == otherMessage.hasCheckInCount &&
    (!self.hasCheckInCount || self.checkInCount == otherMessage.checkInCount) &&
    self.hasIsDaySpan == otherMessage.hasIsDaySpan &&
    (!self.hasIsDaySpan || self.isDaySpan == otherMessage.isDaySpan) &&
    self.hasVersionNo == otherMessage.hasVersionNo &&
    (!self.hasVersionNo || [self.versionNo isEqual:otherMessage.versionNo]) &&
    self.hasWorkingTime == otherMessage.hasWorkingTime &&
    (!self.hasWorkingTime || [self.workingTime isEqual:otherMessage.workingTime]) &&
    [self.shiftGroupsArray isEqualToArray:otherMessage.shiftGroupsArray] &&
    self.hasWeekDay == otherMessage.hasWeekDay &&
    (!self.hasWeekDay || [self.weekDay isEqual:otherMessage.weekDay]) &&
    self.hasHumanizedSet == otherMessage.hasHumanizedSet &&
    (!self.hasHumanizedSet || [self.humanizedSet isEqual:otherMessage.humanizedSet]) &&
    self.hasSyncTime == otherMessage.hasSyncTime &&
    (!self.hasSyncTime || [self.syncTime isEqual:otherMessage.syncTime]) &&
    self.hasCheckInAhead == otherMessage.hasCheckInAhead &&
    (!self.hasCheckInAhead || [self.checkInAhead isEqual:otherMessage.checkInAhead]) &&
    [self.holidaysArray isEqualToArray:otherMessage.holidaysArray] &&
    self.hasDate == otherMessage.hasDate &&
    (!self.hasDate || [self.date isEqual:otherMessage.date]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
    }
    if (self.hasName) {
        hashCode = hashCode * 31 + [self.name hash];
    }
    if (self.hasCheckInCount) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInCount] hash];
    }
    if (self.hasIsDaySpan) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.isDaySpan] hash];
    }
    if (self.hasVersionNo) {
        hashCode = hashCode * 31 + [self.versionNo hash];
    }
    if (self.hasWorkingTime) {
        hashCode = hashCode * 31 + [self.workingTime hash];
    }
    for (CheckInShiftGroup* element in self.shiftGroupsArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasWeekDay) {
        hashCode = hashCode * 31 + [self.weekDay hash];
    }
    if (self.hasHumanizedSet) {
        hashCode = hashCode * 31 + [self.humanizedSet hash];
    }
    if (self.hasSyncTime) {
        hashCode = hashCode * 31 + [self.syncTime hash];
    }
    if (self.hasCheckInAhead) {
        hashCode = hashCode * 31 + [self.checkInAhead hash];
    }
    for (NSString* element in self.holidaysArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasDate) {
        hashCode = hashCode * 31 + [self.date hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInShift_Builder()
@property (retain) CheckInShift* result;
@end

@implementation CheckInShift_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInShift alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInShift_Builder*) clear {
    self.result = [[[CheckInShift alloc] init] autorelease];
    return self;
}
- (CheckInShift_Builder*) clone {
    return [CheckInShift builderWithPrototype:result];
}
- (CheckInShift*) defaultInstance {
    return [CheckInShift defaultInstance];
}
- (CheckInShift*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInShift*) buildPartial {
    CheckInShift* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInShift_Builder*) mergeFrom:(CheckInShift*) other {
    if (other == [CheckInShift defaultInstance]) {
        return self;
    }
    if (other.hasId) {
        [self setId:other.id];
    }
    if (other.hasName) {
        [self setName:other.name];
    }
    if (other.hasCheckInCount) {
        [self setCheckInCount:other.checkInCount];
    }
    if (other.hasIsDaySpan) {
        [self setIsDaySpan:other.isDaySpan];
    }
    if (other.hasVersionNo) {
        [self setVersionNo:other.versionNo];
    }
    if (other.hasWorkingTime) {
        [self setWorkingTime:other.workingTime];
    }
    if (other.shiftGroupsArray.count > 0) {
        if (result.shiftGroupsArray == nil) {
            result.shiftGroupsArray = [[other.shiftGroupsArray copyWithZone:[other.shiftGroupsArray zone]] autorelease];
        } else {
            [result.shiftGroupsArray appendArray:other.shiftGroupsArray];
        }
    }
    if (other.hasWeekDay) {
        [self setWeekDay:other.weekDay];
    }
    if (other.hasHumanizedSet) {
        [self setHumanizedSet:other.humanizedSet];
    }
    if (other.hasSyncTime) {
        [self setSyncTime:other.syncTime];
    }
    if (other.hasCheckInAhead) {
        [self setCheckInAhead:other.checkInAhead];
    }
    if (other.holidaysArray.count > 0) {
        if (result.holidaysArray == nil) {
            result.holidaysArray = [[other.holidaysArray copyWithZone:[other.holidaysArray zone]] autorelease];
        } else {
            [result.holidaysArray appendArray:other.holidaysArray];
        }
    }
    if (other.hasDate) {
        [self setDate:other.date];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInShift_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInShift_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 8: {
                [self setId:[input readInt32]];
                break;
            }
            case 18: {
                [self setName:[input readString]];
                break;
            }
            case 24: {
                [self setCheckInCount:[input readInt32]];
                break;
            }
            case 32: {
                [self setIsDaySpan:[input readInt32]];
                break;
            }
            case 42: {
                [self setVersionNo:[input readString]];
                break;
            }
            case 50: {
                [self setWorkingTime:[input readString]];
                break;
            }
            case 58: {
                CheckInShiftGroup_Builder* subBuilder = [CheckInShiftGroup builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addShiftGroups:[subBuilder buildPartial]];
                break;
            }
            case 66: {
                [self setWeekDay:[input readString]];
                break;
            }
            case 74: {
                [self setHumanizedSet:[input readString]];
                break;
            }
            case 82: {
                [self setSyncTime:[input readString]];
                break;
            }
            case 90: {
                [self setCheckInAhead:[input readString]];
                break;
            }
            case 98: {
                [self addHolidays:[input readString]];
                break;
            }
            case 106: {
                [self setDate:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasId {
    return result.hasId;
}
- (int32_t) id {
    return result.id;
}
- (CheckInShift_Builder*) setId:(int32_t) value {
    result.hasId = YES;
    result.id = value;
    return self;
}
- (CheckInShift_Builder*) clearId {
    result.hasId = NO;
    result.id = 0;
    return self;
}
- (BOOL) hasName {
    return result.hasName;
}
- (NSString*) name {
    return result.name;
}
- (CheckInShift_Builder*) setName:(NSString*) value {
    result.hasName = YES;
    result.name = value;
    return self;
}
- (CheckInShift_Builder*) clearName {
    result.hasName = NO;
    result.name = @"";
    return self;
}
- (BOOL) hasCheckInCount {
    return result.hasCheckInCount;
}
- (int32_t) checkInCount {
    return result.checkInCount;
}
- (CheckInShift_Builder*) setCheckInCount:(int32_t) value {
    result.hasCheckInCount = YES;
    result.checkInCount = value;
    return self;
}
- (CheckInShift_Builder*) clearCheckInCount {
    result.hasCheckInCount = NO;
    result.checkInCount = 0;
    return self;
}
- (BOOL) hasIsDaySpan {
    return result.hasIsDaySpan;
}
- (int32_t) isDaySpan {
    return result.isDaySpan;
}
- (CheckInShift_Builder*) setIsDaySpan:(int32_t) value {
    result.hasIsDaySpan = YES;
    result.isDaySpan = value;
    return self;
}
- (CheckInShift_Builder*) clearIsDaySpan {
    result.hasIsDaySpan = NO;
    result.isDaySpan = 0;
    return self;
}
- (BOOL) hasVersionNo {
    return result.hasVersionNo;
}
- (NSString*) versionNo {
    return result.versionNo;
}
- (CheckInShift_Builder*) setVersionNo:(NSString*) value {
    result.hasVersionNo = YES;
    result.versionNo = value;
    return self;
}
- (CheckInShift_Builder*) clearVersionNo {
    result.hasVersionNo = NO;
    result.versionNo = @"";
    return self;
}
- (BOOL) hasWorkingTime {
    return result.hasWorkingTime;
}
- (NSString*) workingTime {
    return result.workingTime;
}
- (CheckInShift_Builder*) setWorkingTime:(NSString*) value {
    result.hasWorkingTime = YES;
    result.workingTime = value;
    return self;
}
- (CheckInShift_Builder*) clearWorkingTime {
    result.hasWorkingTime = NO;
    result.workingTime = @"";
    return self;
}
- (PBAppendableArray *)shiftGroups {
    return result.shiftGroupsArray;
}
- (CheckInShiftGroup*)shiftGroupsAtIndex:(NSUInteger)index {
    return [result shiftGroupsAtIndex:index];
}
- (CheckInShift_Builder *)addShiftGroups:(CheckInShiftGroup*)value {
    if (result.shiftGroupsArray == nil) {
        result.shiftGroupsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.shiftGroupsArray addObject:value];
    return self;
}
- (CheckInShift_Builder *)setShiftGroupsArray:(NSArray *)array {
    result.shiftGroupsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInShift_Builder *)setShiftGroupsValues:(const CheckInShiftGroup* *)values count:(NSUInteger)count {
    result.shiftGroupsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInShift_Builder *)clearShiftGroups {
    result.shiftGroupsArray = nil;
    return self;
}
- (BOOL) hasWeekDay {
    return result.hasWeekDay;
}
- (NSString*) weekDay {
    return result.weekDay;
}
- (CheckInShift_Builder*) setWeekDay:(NSString*) value {
    result.hasWeekDay = YES;
    result.weekDay = value;
    return self;
}
- (CheckInShift_Builder*) clearWeekDay {
    result.hasWeekDay = NO;
    result.weekDay = @"";
    return self;
}
- (BOOL) hasHumanizedSet {
    return result.hasHumanizedSet;
}
- (NSString*) humanizedSet {
    return result.humanizedSet;
}
- (CheckInShift_Builder*) setHumanizedSet:(NSString*) value {
    result.hasHumanizedSet = YES;
    result.humanizedSet = value;
    return self;
}
- (CheckInShift_Builder*) clearHumanizedSet {
    result.hasHumanizedSet = NO;
    result.humanizedSet = @"";
    return self;
}
- (BOOL) hasSyncTime {
    return result.hasSyncTime;
}
- (NSString*) syncTime {
    return result.syncTime;
}
- (CheckInShift_Builder*) setSyncTime:(NSString*) value {
    result.hasSyncTime = YES;
    result.syncTime = value;
    return self;
}
- (CheckInShift_Builder*) clearSyncTime {
    result.hasSyncTime = NO;
    result.syncTime = @"";
    return self;
}
- (BOOL) hasCheckInAhead {
    return result.hasCheckInAhead;
}
- (NSString*) checkInAhead {
    return result.checkInAhead;
}
- (CheckInShift_Builder*) setCheckInAhead:(NSString*) value {
    result.hasCheckInAhead = YES;
    result.checkInAhead = value;
    return self;
}
- (CheckInShift_Builder*) clearCheckInAhead {
    result.hasCheckInAhead = NO;
    result.checkInAhead = @"";
    return self;
}
- (PBAppendableArray *)holidays {
    return result.holidaysArray;
}
- (NSString*)holidaysAtIndex:(NSUInteger)index {
    return [result holidaysAtIndex:index];
}
- (CheckInShift_Builder *)addHolidays:(NSString*)value {
    if (result.holidaysArray == nil) {
        result.holidaysArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.holidaysArray addObject:value];
    return self;
}
- (CheckInShift_Builder *)setHolidaysArray:(NSArray *)array {
    result.holidaysArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInShift_Builder *)setHolidaysValues:(const NSString* *)values count:(NSUInteger)count {
    result.holidaysArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInShift_Builder *)clearHolidays {
    result.holidaysArray = nil;
    return self;
}
- (BOOL) hasDate {
    return result.hasDate;
}
- (NSString*) date {
    return result.date;
}
- (CheckInShift_Builder*) setDate:(NSString*) value {
    result.hasDate = YES;
    result.date = value;
    return self;
}
- (CheckInShift_Builder*) clearDate {
    result.hasDate = NO;
    result.date = @"";
    return self;
}
@end

@interface CheckInShiftGroup ()
@property (retain) NSString* id;
@property (retain) CheckInShift* shift;
@property (retain) NSString* name;
@property (retain) NSString* date;
@property int32_t checkInStatus;
@property int32_t checkInType;
@property (retain) NSString* checkInTime;
@property int32_t checkInAbnormal;
@end

@implementation CheckInShiftGroup

- (BOOL) hasId {
    return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
    hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasShift {
    return !!hasShift_;
}
- (void) setHasShift:(BOOL) value_ {
    hasShift_ = !!value_;
}
@synthesize shift;
- (BOOL) hasName {
    return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
    hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDate {
    return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
    hasDate_ = !!value_;
}
@synthesize date;
- (BOOL) hasCheckInStatus {
    return !!hasCheckInStatus_;
}
- (void) setHasCheckInStatus:(BOOL) value_ {
    hasCheckInStatus_ = !!value_;
}
@synthesize checkInStatus;
- (BOOL) hasCheckInType {
    return !!hasCheckInType_;
}
- (void) setHasCheckInType:(BOOL) value_ {
    hasCheckInType_ = !!value_;
}
@synthesize checkInType;
- (BOOL) hasCheckInTime {
    return !!hasCheckInTime_;
}
- (void) setHasCheckInTime:(BOOL) value_ {
    hasCheckInTime_ = !!value_;
}
@synthesize checkInTime;
- (BOOL) hasCheckInAbnormal {
    return !!hasCheckInAbnormal_;
}
- (void) setHasCheckInAbnormal:(BOOL) value_ {
    hasCheckInAbnormal_ = !!value_;
}
@synthesize checkInAbnormal;
- (void) dealloc {
    self.id = nil;
    self.shift = nil;
    self.name = nil;
    self.date = nil;
    self.checkInTime = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.id = @"";
        self.shift = [CheckInShift defaultInstance];
        self.name = @"";
        self.date = @"";
        self.checkInStatus = 0;
        self.checkInType = 0;
        self.checkInTime = @"";
        self.checkInAbnormal = 0;
    }
    return self;
}
static CheckInShiftGroup* defaultCheckInShiftGroupInstance = nil;
+ (void) initialize {
    if (self == [CheckInShiftGroup class]) {
        defaultCheckInShiftGroupInstance = [[CheckInShiftGroup alloc] init];
    }
}
+ (CheckInShiftGroup*) defaultInstance {
    return defaultCheckInShiftGroupInstance;
}
- (CheckInShiftGroup*) defaultInstance {
    return defaultCheckInShiftGroupInstance;
}
- (BOOL) isInitialized {
    if (!self.hasId) {
        return NO;
    }
    if (!self.hasShift) {
        return NO;
    }
    if (!self.hasName) {
        return NO;
    }
    if (!self.hasDate) {
        return NO;
    }
    if (!self.hasCheckInType) {
        return NO;
    }
    if (!self.shift.isInitialized) {
        return NO;
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasId) {
        [output writeString:1 value:self.id];
    }
    if (self.hasShift) {
        [output writeMessage:2 value:self.shift];
    }
    if (self.hasName) {
        [output writeString:3 value:self.name];
    }
    if (self.hasDate) {
        [output writeString:4 value:self.date];
    }
    if (self.hasCheckInStatus) {
        [output writeInt32:5 value:self.checkInStatus];
    }
    if (self.hasCheckInType) {
        [output writeInt32:6 value:self.checkInType];
    }
    if (self.hasCheckInTime) {
        [output writeString:7 value:self.checkInTime];
    }
    if (self.hasCheckInAbnormal) {
        [output writeInt32:8 value:self.checkInAbnormal];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasId) {
        size_ += computeStringSize(1, self.id);
    }
    if (self.hasShift) {
        size_ += computeMessageSize(2, self.shift);
    }
    if (self.hasName) {
        size_ += computeStringSize(3, self.name);
    }
    if (self.hasDate) {
        size_ += computeStringSize(4, self.date);
    }
    if (self.hasCheckInStatus) {
        size_ += computeInt32Size(5, self.checkInStatus);
    }
    if (self.hasCheckInType) {
        size_ += computeInt32Size(6, self.checkInType);
    }
    if (self.hasCheckInTime) {
        size_ += computeStringSize(7, self.checkInTime);
    }
    if (self.hasCheckInAbnormal) {
        size_ += computeInt32Size(8, self.checkInAbnormal);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInShiftGroup*) parseFromData:(NSData*) data {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromData:data] build];
}
+ (CheckInShiftGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInShiftGroup*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromInputStream:input] build];
}
+ (CheckInShiftGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInShiftGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInShiftGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInShiftGroup*)[[[CheckInShiftGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInShiftGroup_Builder*) builder {
    return [[[CheckInShiftGroup_Builder alloc] init] autorelease];
}
+ (CheckInShiftGroup_Builder*) builderWithPrototype:(CheckInShiftGroup*) prototype {
    return [[CheckInShiftGroup builder] mergeFrom:prototype];
}
- (CheckInShiftGroup_Builder*) builder {
    return [CheckInShiftGroup builder];
}
- (CheckInShiftGroup_Builder*) toBuilder {
    return [CheckInShiftGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
    }
    if (self.hasShift) {
        [output appendFormat:@"%@%@ {\n", indent, @"shift"];
        [self.shift writeDescriptionTo:output
                            withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasName) {
        [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
    }
    if (self.hasDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"date", self.date];
    }
    if (self.hasCheckInStatus) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInStatus", [NSNumber numberWithInt:self.checkInStatus]];
    }
    if (self.hasCheckInType) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInType", [NSNumber numberWithInt:self.checkInType]];
    }
    if (self.hasCheckInTime) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInTime", self.checkInTime];
    }
    if (self.hasCheckInAbnormal) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInAbnormal", [NSNumber numberWithInt:self.checkInAbnormal]];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInShiftGroup class]]) {
        return NO;
    }
    CheckInShiftGroup *otherMessage = other;
    return
    self.hasId == otherMessage.hasId &&
    (!self.hasId || [self.id isEqual:otherMessage.id]) &&
    self.hasShift == otherMessage.hasShift &&
    (!self.hasShift || [self.shift isEqual:otherMessage.shift]) &&
    self.hasName == otherMessage.hasName &&
    (!self.hasName || [self.name isEqual:otherMessage.name]) &&
    self.hasDate == otherMessage.hasDate &&
    (!self.hasDate || [self.date isEqual:otherMessage.date]) &&
    self.hasCheckInStatus == otherMessage.hasCheckInStatus &&
    (!self.hasCheckInStatus || self.checkInStatus == otherMessage.checkInStatus) &&
    self.hasCheckInType == otherMessage.hasCheckInType &&
    (!self.hasCheckInType || self.checkInType == otherMessage.checkInType) &&
    self.hasCheckInTime == otherMessage.hasCheckInTime &&
    (!self.hasCheckInTime || [self.checkInTime isEqual:otherMessage.checkInTime]) &&
    self.hasCheckInAbnormal == otherMessage.hasCheckInAbnormal &&
    (!self.hasCheckInAbnormal || self.checkInAbnormal == otherMessage.checkInAbnormal) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasId) {
        hashCode = hashCode * 31 + [self.id hash];
    }
    if (self.hasShift) {
        hashCode = hashCode * 31 + [self.shift hash];
    }
    if (self.hasName) {
        hashCode = hashCode * 31 + [self.name hash];
    }
    if (self.hasDate) {
        hashCode = hashCode * 31 + [self.date hash];
    }
    if (self.hasCheckInStatus) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInStatus] hash];
    }
    if (self.hasCheckInType) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInType] hash];
    }
    if (self.hasCheckInTime) {
        hashCode = hashCode * 31 + [self.checkInTime hash];
    }
    if (self.hasCheckInAbnormal) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInAbnormal] hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInShiftGroup_Builder()
@property (retain) CheckInShiftGroup* result;
@end

@implementation CheckInShiftGroup_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInShiftGroup alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInShiftGroup_Builder*) clear {
    self.result = [[[CheckInShiftGroup alloc] init] autorelease];
    return self;
}
- (CheckInShiftGroup_Builder*) clone {
    return [CheckInShiftGroup builderWithPrototype:result];
}
- (CheckInShiftGroup*) defaultInstance {
    return [CheckInShiftGroup defaultInstance];
}
- (CheckInShiftGroup*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInShiftGroup*) buildPartial {
    CheckInShiftGroup* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInShiftGroup_Builder*) mergeFrom:(CheckInShiftGroup*) other {
    if (other == [CheckInShiftGroup defaultInstance]) {
        return self;
    }
    if (other.hasId) {
        [self setId:other.id];
    }
    if (other.hasShift) {
        [self mergeShift:other.shift];
    }
    if (other.hasName) {
        [self setName:other.name];
    }
    if (other.hasDate) {
        [self setDate:other.date];
    }
    if (other.hasCheckInStatus) {
        [self setCheckInStatus:other.checkInStatus];
    }
    if (other.hasCheckInType) {
        [self setCheckInType:other.checkInType];
    }
    if (other.hasCheckInTime) {
        [self setCheckInTime:other.checkInTime];
    }
    if (other.hasCheckInAbnormal) {
        [self setCheckInAbnormal:other.checkInAbnormal];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInShiftGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInShiftGroup_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setId:[input readString]];
                break;
            }
            case 18: {
                CheckInShift_Builder* subBuilder = [CheckInShift builder];
                if (self.hasShift) {
                    [subBuilder mergeFrom:self.shift];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setShift:[subBuilder buildPartial]];
                break;
            }
            case 26: {
                [self setName:[input readString]];
                break;
            }
            case 34: {
                [self setDate:[input readString]];
                break;
            }
            case 40: {
                [self setCheckInStatus:[input readInt32]];
                break;
            }
            case 48: {
                [self setCheckInType:[input readInt32]];
                break;
            }
            case 58: {
                [self setCheckInTime:[input readString]];
                break;
            }
            case 64: {
                [self setCheckInAbnormal:[input readInt32]];
                break;
            }
        }
    }
}
- (BOOL) hasId {
    return result.hasId;
}
- (NSString*) id {
    return result.id;
}
- (CheckInShiftGroup_Builder*) setId:(NSString*) value {
    result.hasId = YES;
    result.id = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearId {
    result.hasId = NO;
    result.id = @"";
    return self;
}
- (BOOL) hasShift {
    return result.hasShift;
}
- (CheckInShift*) shift {
    return result.shift;
}
- (CheckInShiftGroup_Builder*) setShift:(CheckInShift*) value {
    result.hasShift = YES;
    result.shift = value;
    return self;
}
- (CheckInShiftGroup_Builder*) setShiftBuilder:(CheckInShift_Builder*) builderForValue {
    return [self setShift:[builderForValue build]];
}
- (CheckInShiftGroup_Builder*) mergeShift:(CheckInShift*) value {
    if (result.hasShift &&
        result.shift != [CheckInShift defaultInstance]) {
        result.shift =
        [[[CheckInShift builderWithPrototype:result.shift] mergeFrom:value] buildPartial];
    } else {
        result.shift = value;
    }
    result.hasShift = YES;
    return self;
}
- (CheckInShiftGroup_Builder*) clearShift {
    result.hasShift = NO;
    result.shift = [CheckInShift defaultInstance];
    return self;
}
- (BOOL) hasName {
    return result.hasName;
}
- (NSString*) name {
    return result.name;
}
- (CheckInShiftGroup_Builder*) setName:(NSString*) value {
    result.hasName = YES;
    result.name = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearName {
    result.hasName = NO;
    result.name = @"";
    return self;
}
- (BOOL) hasDate {
    return result.hasDate;
}
- (NSString*) date {
    return result.date;
}
- (CheckInShiftGroup_Builder*) setDate:(NSString*) value {
    result.hasDate = YES;
    result.date = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearDate {
    result.hasDate = NO;
    result.date = @"";
    return self;
}
- (BOOL) hasCheckInStatus {
    return result.hasCheckInStatus;
}
- (int32_t) checkInStatus {
    return result.checkInStatus;
}
- (CheckInShiftGroup_Builder*) setCheckInStatus:(int32_t) value {
    result.hasCheckInStatus = YES;
    result.checkInStatus = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearCheckInStatus {
    result.hasCheckInStatus = NO;
    result.checkInStatus = 0;
    return self;
}
- (BOOL) hasCheckInType {
    return result.hasCheckInType;
}
- (int32_t) checkInType {
    return result.checkInType;
}
- (CheckInShiftGroup_Builder*) setCheckInType:(int32_t) value {
    result.hasCheckInType = YES;
    result.checkInType = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearCheckInType {
    result.hasCheckInType = NO;
    result.checkInType = 0;
    return self;
}
- (BOOL) hasCheckInTime {
    return result.hasCheckInTime;
}
- (NSString*) checkInTime {
    return result.checkInTime;
}
- (CheckInShiftGroup_Builder*) setCheckInTime:(NSString*) value {
    result.hasCheckInTime = YES;
    result.checkInTime = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearCheckInTime {
    result.hasCheckInTime = NO;
    result.checkInTime = @"";
    return self;
}
- (BOOL) hasCheckInAbnormal {
    return result.hasCheckInAbnormal;
}
- (int32_t) checkInAbnormal {
    return result.checkInAbnormal;
}
- (CheckInShiftGroup_Builder*) setCheckInAbnormal:(int32_t) value {
    result.hasCheckInAbnormal = YES;
    result.checkInAbnormal = value;
    return self;
}
- (CheckInShiftGroup_Builder*) clearCheckInAbnormal {
    result.hasCheckInAbnormal = NO;
    result.checkInAbnormal = 0;
    return self;
}
@end

@interface CheckInTrackReply ()
@property int32_t id;
@property int32_t checkInTrackId;
@property (retain) User* sender;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation CheckInTrackReply

- (BOOL) hasId {
    return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
    hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasCheckInTrackId {
    return !!hasCheckInTrackId_;
}
- (void) setHasCheckInTrackId:(BOOL) value_ {
    hasCheckInTrackId_ = !!value_;
}
@synthesize checkInTrackId;
- (BOOL) hasSender {
    return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
    hasSender_ = !!value_;
}
@synthesize sender;
- (BOOL) hasContent {
    return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
    hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
    return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
    hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
    self.sender = nil;
    self.content = nil;
    self.createDate = nil;
    self.filesArray = nil;
    self.filePathArray = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.id = 0;
        self.checkInTrackId = 0;
        self.sender = [User defaultInstance];
        self.content = @"";
        self.createDate = @"";
    }
    return self;
}
static CheckInTrackReply* defaultCheckInTrackReplyInstance = nil;
+ (void) initialize {
    if (self == [CheckInTrackReply class]) {
        defaultCheckInTrackReplyInstance = [[CheckInTrackReply alloc] init];
    }
}
+ (CheckInTrackReply*) defaultInstance {
    return defaultCheckInTrackReplyInstance;
}
- (CheckInTrackReply*) defaultInstance {
    return defaultCheckInTrackReplyInstance;
}
- (PBArray *)files {
    return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
    return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
    return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
    return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (!self.hasId) {
        return NO;
    }
    if (!self.hasCheckInTrackId) {
        return NO;
    }
    if (!self.hasContent) {
        return NO;
    }
    if (self.hasSender) {
        if (!self.sender.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasId) {
        [output writeInt32:1 value:self.id];
    }
    if (self.hasCheckInTrackId) {
        [output writeInt32:2 value:self.checkInTrackId];
    }
    if (self.hasSender) {
        [output writeMessage:3 value:self.sender];
    }
    if (self.hasContent) {
        [output writeString:4 value:self.content];
    }
    if (self.hasCreateDate) {
        [output writeString:5 value:self.createDate];
    }
    const NSUInteger filesArrayCount = self.filesArray.count;
    if (filesArrayCount > 0) {
        const NSData* *values = (const NSData* *)self.filesArray.data;
        for (NSUInteger i = 0; i < filesArrayCount; ++i) {
            [output writeData:6 value:values[i]];
        }
    }
    const NSUInteger filePathArrayCount = self.filePathArray.count;
    if (filePathArrayCount > 0) {
        const NSString* *values = (const NSString* *)self.filePathArray.data;
        for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
            [output writeString:7 value:values[i]];
        }
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasId) {
        size_ += computeInt32Size(1, self.id);
    }
    if (self.hasCheckInTrackId) {
        size_ += computeInt32Size(2, self.checkInTrackId);
    }
    if (self.hasSender) {
        size_ += computeMessageSize(3, self.sender);
    }
    if (self.hasContent) {
        size_ += computeStringSize(4, self.content);
    }
    if (self.hasCreateDate) {
        size_ += computeStringSize(5, self.createDate);
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.filesArray.count;
        const NSData* *values = (const NSData* *)self.filesArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeDataSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.filePathArray.count;
        const NSString* *values = (const NSString* *)self.filePathArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeStringSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInTrackReply*) parseFromData:(NSData*) data {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromData:data] build];
}
+ (CheckInTrackReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackReply*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromInputStream:input] build];
}
+ (CheckInTrackReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInTrackReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackReply*)[[[CheckInTrackReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackReply_Builder*) builder {
    return [[[CheckInTrackReply_Builder alloc] init] autorelease];
}
+ (CheckInTrackReply_Builder*) builderWithPrototype:(CheckInTrackReply*) prototype {
    return [[CheckInTrackReply builder] mergeFrom:prototype];
}
- (CheckInTrackReply_Builder*) builder {
    return [CheckInTrackReply builder];
}
- (CheckInTrackReply_Builder*) toBuilder {
    return [CheckInTrackReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
    }
    if (self.hasCheckInTrackId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInTrackId", [NSNumber numberWithInt:self.checkInTrackId]];
    }
    if (self.hasSender) {
        [output appendFormat:@"%@%@ {\n", indent, @"sender"];
        [self.sender writeDescriptionTo:output
                             withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasContent) {
        [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
    }
    if (self.hasCreateDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
    }
    for (NSData* element in self.filesArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
    }
    for (NSString* element in self.filePathArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInTrackReply class]]) {
        return NO;
    }
    CheckInTrackReply *otherMessage = other;
    return
    self.hasId == otherMessage.hasId &&
    (!self.hasId || self.id == otherMessage.id) &&
    self.hasCheckInTrackId == otherMessage.hasCheckInTrackId &&
    (!self.hasCheckInTrackId || self.checkInTrackId == otherMessage.checkInTrackId) &&
    self.hasSender == otherMessage.hasSender &&
    (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
    self.hasContent == otherMessage.hasContent &&
    (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
    self.hasCreateDate == otherMessage.hasCreateDate &&
    (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
    [self.filesArray isEqualToArray:otherMessage.filesArray] &&
    [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
    }
    if (self.hasCheckInTrackId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInTrackId] hash];
    }
    if (self.hasSender) {
        hashCode = hashCode * 31 + [self.sender hash];
    }
    if (self.hasContent) {
        hashCode = hashCode * 31 + [self.content hash];
    }
    if (self.hasCreateDate) {
        hashCode = hashCode * 31 + [self.createDate hash];
    }
    for (NSData* element in self.filesArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (NSString* element in self.filePathArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInTrackReply_Builder()
@property (retain) CheckInTrackReply* result;
@end

@implementation CheckInTrackReply_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInTrackReply alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInTrackReply_Builder*) clear {
    self.result = [[[CheckInTrackReply alloc] init] autorelease];
    return self;
}
- (CheckInTrackReply_Builder*) clone {
    return [CheckInTrackReply builderWithPrototype:result];
}
- (CheckInTrackReply*) defaultInstance {
    return [CheckInTrackReply defaultInstance];
}
- (CheckInTrackReply*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInTrackReply*) buildPartial {
    CheckInTrackReply* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInTrackReply_Builder*) mergeFrom:(CheckInTrackReply*) other {
    if (other == [CheckInTrackReply defaultInstance]) {
        return self;
    }
    if (other.hasId) {
        [self setId:other.id];
    }
    if (other.hasCheckInTrackId) {
        [self setCheckInTrackId:other.checkInTrackId];
    }
    if (other.hasSender) {
        [self mergeSender:other.sender];
    }
    if (other.hasContent) {
        [self setContent:other.content];
    }
    if (other.hasCreateDate) {
        [self setCreateDate:other.createDate];
    }
    if (other.filesArray.count > 0) {
        if (result.filesArray == nil) {
            result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
        } else {
            [result.filesArray appendArray:other.filesArray];
        }
    }
    if (other.filePathArray.count > 0) {
        if (result.filePathArray == nil) {
            result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
        } else {
            [result.filePathArray appendArray:other.filePathArray];
        }
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInTrackReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInTrackReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 8: {
                [self setId:[input readInt32]];
                break;
            }
            case 16: {
                [self setCheckInTrackId:[input readInt32]];
                break;
            }
            case 26: {
                User_Builder* subBuilder = [User builder];
                if (self.hasSender) {
                    [subBuilder mergeFrom:self.sender];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setSender:[subBuilder buildPartial]];
                break;
            }
            case 34: {
                [self setContent:[input readString]];
                break;
            }
            case 42: {
                [self setCreateDate:[input readString]];
                break;
            }
            case 50: {
                [self addFiles:[input readData]];
                break;
            }
            case 58: {
                [self addFilePath:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasId {
    return result.hasId;
}
- (int32_t) id {
    return result.id;
}
- (CheckInTrackReply_Builder*) setId:(int32_t) value {
    result.hasId = YES;
    result.id = value;
    return self;
}
- (CheckInTrackReply_Builder*) clearId {
    result.hasId = NO;
    result.id = 0;
    return self;
}
- (BOOL) hasCheckInTrackId {
    return result.hasCheckInTrackId;
}
- (int32_t) checkInTrackId {
    return result.checkInTrackId;
}
- (CheckInTrackReply_Builder*) setCheckInTrackId:(int32_t) value {
    result.hasCheckInTrackId = YES;
    result.checkInTrackId = value;
    return self;
}
- (CheckInTrackReply_Builder*) clearCheckInTrackId {
    result.hasCheckInTrackId = NO;
    result.checkInTrackId = 0;
    return self;
}
- (BOOL) hasSender {
    return result.hasSender;
}
- (User*) sender {
    return result.sender;
}
- (CheckInTrackReply_Builder*) setSender:(User*) value {
    result.hasSender = YES;
    result.sender = value;
    return self;
}
- (CheckInTrackReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
    return [self setSender:[builderForValue build]];
}
- (CheckInTrackReply_Builder*) mergeSender:(User*) value {
    if (result.hasSender &&
        result.sender != [User defaultInstance]) {
        result.sender =
        [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
    } else {
        result.sender = value;
    }
    result.hasSender = YES;
    return self;
}
- (CheckInTrackReply_Builder*) clearSender {
    result.hasSender = NO;
    result.sender = [User defaultInstance];
    return self;
}
- (BOOL) hasContent {
    return result.hasContent;
}
- (NSString*) content {
    return result.content;
}
- (CheckInTrackReply_Builder*) setContent:(NSString*) value {
    result.hasContent = YES;
    result.content = value;
    return self;
}
- (CheckInTrackReply_Builder*) clearContent {
    result.hasContent = NO;
    result.content = @"";
    return self;
}
- (BOOL) hasCreateDate {
    return result.hasCreateDate;
}
- (NSString*) createDate {
    return result.createDate;
}
- (CheckInTrackReply_Builder*) setCreateDate:(NSString*) value {
    result.hasCreateDate = YES;
    result.createDate = value;
    return self;
}
- (CheckInTrackReply_Builder*) clearCreateDate {
    result.hasCreateDate = NO;
    result.createDate = @"";
    return self;
}
- (PBAppendableArray *)files {
    return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
    return [result filesAtIndex:index];
}
- (CheckInTrackReply_Builder *)addFiles:(NSData*)value {
    if (result.filesArray == nil) {
        result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.filesArray addObject:value];
    return self;
}
- (CheckInTrackReply_Builder *)setFilesArray:(NSArray *)array {
    result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
    result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackReply_Builder *)clearFiles {
    result.filesArray = nil;
    return self;
}
- (PBAppendableArray *)filePath {
    return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
    return [result filePathAtIndex:index];
}
- (CheckInTrackReply_Builder *)addFilePath:(NSString*)value {
    if (result.filePathArray == nil) {
        result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.filePathArray addObject:value];
    return self;
}
- (CheckInTrackReply_Builder *)setFilePathArray:(NSArray *)array {
    result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
    result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackReply_Builder *)clearFilePath {
    result.filePathArray = nil;
    return self;
}
@end

@interface PageCheckInTrack ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * checkInTracksArray;
@end

@implementation PageCheckInTrack

- (BOOL) hasPage {
    return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
    hasPage_ = !!value_;
}
@synthesize page;
@synthesize checkInTracksArray;
@dynamic checkInTracks;
- (void) dealloc {
    self.page = nil;
    self.checkInTracksArray = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.page = [Pagination defaultInstance];
    }
    return self;
}
static PageCheckInTrack* defaultPageCheckInTrackInstance = nil;
+ (void) initialize {
    if (self == [PageCheckInTrack class]) {
        defaultPageCheckInTrackInstance = [[PageCheckInTrack alloc] init];
    }
}
+ (PageCheckInTrack*) defaultInstance {
    return defaultPageCheckInTrackInstance;
}
- (PageCheckInTrack*) defaultInstance {
    return defaultPageCheckInTrackInstance;
}
- (PBArray *)checkInTracks {
    return checkInTracksArray;
}
- (CheckInTrack*)checkInTracksAtIndex:(NSUInteger)index {
    return [checkInTracksArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (self.hasPage) {
        if (!self.page.isInitialized) {
            return NO;
        }
    }
    for (CheckInTrack* element in self.checkInTracks) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasPage) {
        [output writeMessage:1 value:self.page];
    }
    for (CheckInTrack *element in self.checkInTracksArray) {
        [output writeMessage:2 value:element];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasPage) {
        size_ += computeMessageSize(1, self.page);
    }
    for (CheckInTrack *element in self.checkInTracksArray) {
        size_ += computeMessageSize(2, element);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (PageCheckInTrack*) parseFromData:(NSData*) data {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromData:data] build];
}
+ (PageCheckInTrack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageCheckInTrack*) parseFromInputStream:(NSInputStream*) input {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromInputStream:input] build];
}
+ (PageCheckInTrack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCheckInTrack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromCodedInputStream:input] build];
}
+ (PageCheckInTrack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (PageCheckInTrack*)[[[PageCheckInTrack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCheckInTrack_Builder*) builder {
    return [[[PageCheckInTrack_Builder alloc] init] autorelease];
}
+ (PageCheckInTrack_Builder*) builderWithPrototype:(PageCheckInTrack*) prototype {
    return [[PageCheckInTrack builder] mergeFrom:prototype];
}
- (PageCheckInTrack_Builder*) builder {
    return [PageCheckInTrack builder];
}
- (PageCheckInTrack_Builder*) toBuilder {
    return [PageCheckInTrack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasPage) {
        [output appendFormat:@"%@%@ {\n", indent, @"page"];
        [self.page writeDescriptionTo:output
                           withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (CheckInTrack* element in self.checkInTracksArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"checkInTracks"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[PageCheckInTrack class]]) {
        return NO;
    }
    PageCheckInTrack *otherMessage = other;
    return
    self.hasPage == otherMessage.hasPage &&
    (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
    [self.checkInTracksArray isEqualToArray:otherMessage.checkInTracksArray] &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasPage) {
        hashCode = hashCode * 31 + [self.page hash];
    }
    for (CheckInTrack* element in self.checkInTracksArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface PageCheckInTrack_Builder()
@property (retain) PageCheckInTrack* result;
@end

@implementation PageCheckInTrack_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[PageCheckInTrack alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (PageCheckInTrack_Builder*) clear {
    self.result = [[[PageCheckInTrack alloc] init] autorelease];
    return self;
}
- (PageCheckInTrack_Builder*) clone {
    return [PageCheckInTrack builderWithPrototype:result];
}
- (PageCheckInTrack*) defaultInstance {
    return [PageCheckInTrack defaultInstance];
}
- (PageCheckInTrack*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (PageCheckInTrack*) buildPartial {
    PageCheckInTrack* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (PageCheckInTrack_Builder*) mergeFrom:(PageCheckInTrack*) other {
    if (other == [PageCheckInTrack defaultInstance]) {
        return self;
    }
    if (other.hasPage) {
        [self mergePage:other.page];
    }
    if (other.checkInTracksArray.count > 0) {
        if (result.checkInTracksArray == nil) {
            result.checkInTracksArray = [[other.checkInTracksArray copyWithZone:[other.checkInTracksArray zone]] autorelease];
        } else {
            [result.checkInTracksArray appendArray:other.checkInTracksArray];
        }
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (PageCheckInTrack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageCheckInTrack_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                Pagination_Builder* subBuilder = [Pagination builder];
                if (self.hasPage) {
                    [subBuilder mergeFrom:self.page];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setPage:[subBuilder buildPartial]];
                break;
            }
            case 18: {
                CheckInTrack_Builder* subBuilder = [CheckInTrack builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addCheckInTracks:[subBuilder buildPartial]];
                break;
            }
        }
    }
}
- (BOOL) hasPage {
    return result.hasPage;
}
- (Pagination*) page {
    return result.page;
}
- (PageCheckInTrack_Builder*) setPage:(Pagination*) value {
    result.hasPage = YES;
    result.page = value;
    return self;
}
- (PageCheckInTrack_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
    return [self setPage:[builderForValue build]];
}
- (PageCheckInTrack_Builder*) mergePage:(Pagination*) value {
    if (result.hasPage &&
        result.page != [Pagination defaultInstance]) {
        result.page =
        [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
    } else {
        result.page = value;
    }
    result.hasPage = YES;
    return self;
}
- (PageCheckInTrack_Builder*) clearPage {
    result.hasPage = NO;
    result.page = [Pagination defaultInstance];
    return self;
}
- (PBAppendableArray *)checkInTracks {
    return result.checkInTracksArray;
}
- (CheckInTrack*)checkInTracksAtIndex:(NSUInteger)index {
    return [result checkInTracksAtIndex:index];
}
- (PageCheckInTrack_Builder *)addCheckInTracks:(CheckInTrack*)value {
    if (result.checkInTracksArray == nil) {
        result.checkInTracksArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.checkInTracksArray addObject:value];
    return self;
}
- (PageCheckInTrack_Builder *)setCheckInTracksArray:(NSArray *)array {
    result.checkInTracksArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (PageCheckInTrack_Builder *)setCheckInTracksValues:(const CheckInTrack* *)values count:(NSUInteger)count {
    result.checkInTracksArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (PageCheckInTrack_Builder *)clearCheckInTracks {
    result.checkInTracksArray = nil;
    return self;
}
@end

@interface CheckInTrackParams ()
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t page;
@property int32_t checkInTrackId;
@property (retain) NSString* checkInDate;
@end

@implementation CheckInTrackParams

@synthesize usersArray;
@dynamic users;
@synthesize departmentsArray;
@dynamic departments;
- (BOOL) hasStartDate {
    return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
    hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
    return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
    hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasPage {
    return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
    hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasCheckInTrackId {
    return !!hasCheckInTrackId_;
}
- (void) setHasCheckInTrackId:(BOOL) value_ {
    hasCheckInTrackId_ = !!value_;
}
@synthesize checkInTrackId;
- (BOOL) hasCheckInDate {
    return !!hasCheckInDate_;
}
- (void) setHasCheckInDate:(BOOL) value_ {
    hasCheckInDate_ = !!value_;
}
@synthesize checkInDate;
- (void) dealloc {
    self.usersArray = nil;
    self.departmentsArray = nil;
    self.startDate = nil;
    self.endDate = nil;
    self.checkInDate = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.startDate = @"";
        self.endDate = @"";
        self.page = 0;
        self.checkInTrackId = 0;
        self.checkInDate = @"";
    }
    return self;
}
static CheckInTrackParams* defaultCheckInTrackParamsInstance = nil;
+ (void) initialize {
    if (self == [CheckInTrackParams class]) {
        defaultCheckInTrackParamsInstance = [[CheckInTrackParams alloc] init];
    }
}
+ (CheckInTrackParams*) defaultInstance {
    return defaultCheckInTrackParamsInstance;
}
- (CheckInTrackParams*) defaultInstance {
    return defaultCheckInTrackParamsInstance;
}
- (PBArray *)users {
    return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
    return [usersArray objectAtIndex:index];
}
- (PBArray *)departments {
    return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
    return [departmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    for (User* element in self.users) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    for (Department* element in self.departments) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    for (User *element in self.usersArray) {
        [output writeMessage:1 value:element];
    }
    for (Department *element in self.departmentsArray) {
        [output writeMessage:2 value:element];
    }
    if (self.hasStartDate) {
        [output writeString:3 value:self.startDate];
    }
    if (self.hasEndDate) {
        [output writeString:4 value:self.endDate];
    }
    if (self.hasPage) {
        [output writeInt32:5 value:self.page];
    }
    if (self.hasCheckInTrackId) {
        [output writeInt32:6 value:self.checkInTrackId];
    }
    if (self.hasCheckInDate) {
        [output writeString:7 value:self.checkInDate];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    for (User *element in self.usersArray) {
        size_ += computeMessageSize(1, element);
    }
    for (Department *element in self.departmentsArray) {
        size_ += computeMessageSize(2, element);
    }
    if (self.hasStartDate) {
        size_ += computeStringSize(3, self.startDate);
    }
    if (self.hasEndDate) {
        size_ += computeStringSize(4, self.endDate);
    }
    if (self.hasPage) {
        size_ += computeInt32Size(5, self.page);
    }
    if (self.hasCheckInTrackId) {
        size_ += computeInt32Size(6, self.checkInTrackId);
    }
    if (self.hasCheckInDate) {
        size_ += computeStringSize(7, self.checkInDate);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CheckInTrackParams*) parseFromData:(NSData*) data {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromData:data] build];
}
+ (CheckInTrackParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackParams*) parseFromInputStream:(NSInputStream*) input {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromInputStream:input] build];
}
+ (CheckInTrackParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromCodedInputStream:input] build];
}
+ (CheckInTrackParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CheckInTrackParams*)[[[CheckInTrackParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckInTrackParams_Builder*) builder {
    return [[[CheckInTrackParams_Builder alloc] init] autorelease];
}
+ (CheckInTrackParams_Builder*) builderWithPrototype:(CheckInTrackParams*) prototype {
    return [[CheckInTrackParams builder] mergeFrom:prototype];
}
- (CheckInTrackParams_Builder*) builder {
    return [CheckInTrackParams builder];
}
- (CheckInTrackParams_Builder*) toBuilder {
    return [CheckInTrackParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    for (User* element in self.usersArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"users"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (Department* element in self.departmentsArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"departments"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasStartDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
    }
    if (self.hasEndDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
    }
    if (self.hasPage) {
        [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
    }
    if (self.hasCheckInTrackId) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInTrackId", [NSNumber numberWithInt:self.checkInTrackId]];
    }
    if (self.hasCheckInDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkInDate", self.checkInDate];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CheckInTrackParams class]]) {
        return NO;
    }
    CheckInTrackParams *otherMessage = other;
    return
    [self.usersArray isEqualToArray:otherMessage.usersArray] &&
    [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
    self.hasStartDate == otherMessage.hasStartDate &&
    (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
    self.hasEndDate == otherMessage.hasEndDate &&
    (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
    self.hasPage == otherMessage.hasPage &&
    (!self.hasPage || self.page == otherMessage.page) &&
    self.hasCheckInTrackId == otherMessage.hasCheckInTrackId &&
    (!self.hasCheckInTrackId || self.checkInTrackId == otherMessage.checkInTrackId) &&
    self.hasCheckInDate == otherMessage.hasCheckInDate &&
    (!self.hasCheckInDate || [self.checkInDate isEqual:otherMessage.checkInDate]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    for (User* element in self.usersArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (Department* element in self.departmentsArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasStartDate) {
        hashCode = hashCode * 31 + [self.startDate hash];
    }
    if (self.hasEndDate) {
        hashCode = hashCode * 31 + [self.endDate hash];
    }
    if (self.hasPage) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
    }
    if (self.hasCheckInTrackId) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.checkInTrackId] hash];
    }
    if (self.hasCheckInDate) {
        hashCode = hashCode * 31 + [self.checkInDate hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CheckInTrackParams_Builder()
@property (retain) CheckInTrackParams* result;
@end

@implementation CheckInTrackParams_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CheckInTrackParams alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CheckInTrackParams_Builder*) clear {
    self.result = [[[CheckInTrackParams alloc] init] autorelease];
    return self;
}
- (CheckInTrackParams_Builder*) clone {
    return [CheckInTrackParams builderWithPrototype:result];
}
- (CheckInTrackParams*) defaultInstance {
    return [CheckInTrackParams defaultInstance];
}
- (CheckInTrackParams*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CheckInTrackParams*) buildPartial {
    CheckInTrackParams* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CheckInTrackParams_Builder*) mergeFrom:(CheckInTrackParams*) other {
    if (other == [CheckInTrackParams defaultInstance]) {
        return self;
    }
    if (other.usersArray.count > 0) {
        if (result.usersArray == nil) {
            result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
        } else {
            [result.usersArray appendArray:other.usersArray];
        }
    }
    if (other.departmentsArray.count > 0) {
        if (result.departmentsArray == nil) {
            result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
        } else {
            [result.departmentsArray appendArray:other.departmentsArray];
        }
    }
    if (other.hasStartDate) {
        [self setStartDate:other.startDate];
    }
    if (other.hasEndDate) {
        [self setEndDate:other.endDate];
    }
    if (other.hasPage) {
        [self setPage:other.page];
    }
    if (other.hasCheckInTrackId) {
        [self setCheckInTrackId:other.checkInTrackId];
    }
    if (other.hasCheckInDate) {
        [self setCheckInDate:other.checkInDate];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CheckInTrackParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckInTrackParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                User_Builder* subBuilder = [User builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addUsers:[subBuilder buildPartial]];
                break;
            }
            case 18: {
                Department_Builder* subBuilder = [Department builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addDepartments:[subBuilder buildPartial]];
                break;
            }
            case 26: {
                [self setStartDate:[input readString]];
                break;
            }
            case 34: {
                [self setEndDate:[input readString]];
                break;
            }
            case 40: {
                [self setPage:[input readInt32]];
                break;
            }
            case 48: {
                [self setCheckInTrackId:[input readInt32]];
                break;
            }
            case 58: {
                [self setCheckInDate:[input readString]];
                break;
            }
        }
    }
}
- (PBAppendableArray *)users {
    return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
    return [result usersAtIndex:index];
}
- (CheckInTrackParams_Builder *)addUsers:(User*)value {
    if (result.usersArray == nil) {
        result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.usersArray addObject:value];
    return self;
}
- (CheckInTrackParams_Builder *)setUsersArray:(NSArray *)array {
    result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
    result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackParams_Builder *)clearUsers {
    result.usersArray = nil;
    return self;
}
- (PBAppendableArray *)departments {
    return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
    return [result departmentsAtIndex:index];
}
- (CheckInTrackParams_Builder *)addDepartments:(Department*)value {
    if (result.departmentsArray == nil) {
        result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.departmentsArray addObject:value];
    return self;
}
- (CheckInTrackParams_Builder *)setDepartmentsArray:(NSArray *)array {
    result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
    result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CheckInTrackParams_Builder *)clearDepartments {
    result.departmentsArray = nil;
    return self;
}
- (BOOL) hasStartDate {
    return result.hasStartDate;
}
- (NSString*) startDate {
    return result.startDate;
}
- (CheckInTrackParams_Builder*) setStartDate:(NSString*) value {
    result.hasStartDate = YES;
    result.startDate = value;
    return self;
}
- (CheckInTrackParams_Builder*) clearStartDate {
    result.hasStartDate = NO;
    result.startDate = @"";
    return self;
}
- (BOOL) hasEndDate {
    return result.hasEndDate;
}
- (NSString*) endDate {
    return result.endDate;
}
- (CheckInTrackParams_Builder*) setEndDate:(NSString*) value {
    result.hasEndDate = YES;
    result.endDate = value;
    return self;
}
- (CheckInTrackParams_Builder*) clearEndDate {
    result.hasEndDate = NO;
    result.endDate = @"";
    return self;
}
- (BOOL) hasPage {
    return result.hasPage;
}
- (int32_t) page {
    return result.page;
}
- (CheckInTrackParams_Builder*) setPage:(int32_t) value {
    result.hasPage = YES;
    result.page = value;
    return self;
}
- (CheckInTrackParams_Builder*) clearPage {
    result.hasPage = NO;
    result.page = 0;
    return self;
}
- (BOOL) hasCheckInTrackId {
    return result.hasCheckInTrackId;
}
- (int32_t) checkInTrackId {
    return result.checkInTrackId;
}
- (CheckInTrackParams_Builder*) setCheckInTrackId:(int32_t) value {
    result.hasCheckInTrackId = YES;
    result.checkInTrackId = value;
    return self;
}
- (CheckInTrackParams_Builder*) clearCheckInTrackId {
    result.hasCheckInTrackId = NO;
    result.checkInTrackId = 0;
    return self;
}
- (BOOL) hasCheckInDate {
    return result.hasCheckInDate;
}
- (NSString*) checkInDate {
    return result.checkInDate;
}
- (CheckInTrackParams_Builder*) setCheckInDate:(NSString*) value {
    result.hasCheckInDate = YES;
    result.checkInDate = value;
    return self;
}
- (CheckInTrackParams_Builder*) clearCheckInDate {
    result.hasCheckInDate = NO;
    result.checkInDate = @"";
    return self;
}
@end

