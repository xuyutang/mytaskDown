// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Session.pb.h"

@implementation SessionRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
    return extensionRegistry;
}

+ (void) initialize {
    if (self == [SessionRoot class]) {
        PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
        [self registerAllExtensions:registry];
        extensionRegistry = [registry retain];
    }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ActionTypeIsValidValue(ActionType value) {
    switch (value) {
        case ActionTypeLogin:
        case ActionTypeLogout:
        case ActionTypeLocationSave:
        case ActionTypeChangePwd:
        case ActionTypePatrolSave:
        case ActionTypePatrolList:
        case ActionTypePatrolGet:
        case ActionTypePatrolReply:
        case ActionTypeWorklogList:
        case ActionTypeWorklogSave:
        case ActionTypeWorklogGet:
        case ActionTypeWorklogReply:
        case ActionTypeAttendanceSave:
        case ActionTypeAttendanceCategoryList:
        case ActionTypeAttendanceList:
        case ActionTypeAttendanceGet:
        case ActionTypeAttendanceReply:
        case ActionTypeMarketresearchSave:
        case ActionTypeMarketresearchList:
        case ActionTypeMarketresearchGet:
        case ActionTypeMarketresearchReply:
        case ActionTypeBusinessopportunitySave:
        case ActionTypeBusinessopportunityList:
        case ActionTypeBusinessopportunityGet:
        case ActionTypeBusinessopportunityReply:
        case ActionTypeApplyItemSave:
        case ActionTypeApplyItemList:
        case ActionTypeApplyItemGet:
        case ActionTypeApplyItemReply:
        case ActionTypeInspectionReportSave:
        case ActionTypeInspectionReportList:
        case ActionTypeInspectionReportGet:
        case ActionTypeInspectionReportReply:
        case ActionTypeOrdergoodsSave:
        case ActionTypeOrdergoodsList:
        case ActionTypeStockSave:
        case ActionTypeStockList:
        case ActionTypeSalegoodsSave:
        case ActionTypeSalegoodsList:
        case ActionTypeCompetitiongoodsSave:
        case ActionTypeCompetitiongoodsList:
        case ActionTypeGiftPurchaseSave:
        case ActionTypeGiftPurchaseList:
        case ActionTypeGiftPurchaseGet:
        case ActionTypeGiftDeliverySave:
        case ActionTypeGiftDeliveryList:
        case ActionTypeGiftDeliveryGet:
        case ActionTypeGiftDistributeSave:
        case ActionTypeGiftDistributeList:
        case ActionTypeGiftDistributeGet:
        case ActionTypeGiftStockSave:
        case ActionTypeGiftStockList:
        case ActionTypeGiftStockGet:
        case ActionTypeTaskPatrolGet:
        case ActionTypeTaskPatrolList:
        case ActionTypeTaskPatrolDetailSave:
        case ActionTypeTaskPatrolReply:
        case ActionTypeMyTaskPatrolList:
        case ActionTypeMyTaskPatrolGet:
        case ActionTypeMessageList:
        case ActionTypeAnnounceList:
        case ActionTypeAnnounceAck:
        case ActionTypeMessageAck:
        case ActionTypeCompanyspaceCategoryList:
        case ActionTypeCompanyspaceList:
        case ActionTypeFavSave:
        case ActionTypeSyncBaseData:
        case ActionTypeSyncCustomerList:
        case ActionTypeCustomerList:
        case ActionTypeUserList:
        case ActionTypeUserInfoGet:
        case ActionTypeCustomerInfoGet:
        case ActionTypeCountDataGet:
        case ActionTypeUserInfoUpdate:
        case ActionTypeCustomerSave:
        case ActionTypeUserLogSave:
        case ActionTypePushMsg:
        case ActionTypeCompanyContactList:
        case ActionTypePatrolReplyList:
        case ActionTypeWorklogReplyList:
        case ActionTypeTaskPatrolReplyList:
        case ActionTypeApplyItemReplyList:
        case ActionTypeVideoTopicSave:
        case ActionTypeVideoTopicList:
        case ActionTypeVideoTopicGet:
        case ActionTypeVideoTopicReply:
        case ActionTypeVideoTopicReplyList:
        case ActionTypeFavLangSave:
        case ActionTypeFavLangList:
        case ActionTypeFavLangDelete:
        case ActionTypeFavLangUpdate:
        case ActionTypePrintOrder:
        case ActionTypeCustomerFavList:
        case ActionTypeCustomerFavSave:
        case ActionTypeCustomerFavDelete:
        case ActionTypeQchatUsergroupList:
        case ActionTypeQchatUsergroupSave:
        case ActionTypeQchatUsergroupDelete:
        case ActionTypeQchatUsergroupUpdate:
        case ActionTypeQchatUserList:
        case ActionTypePaperPostSave:
        case ActionTypePaperPostList:
        case ActionTypePaperPostGet:
        case ActionTypePaperTemplateList:
        case ActionTypeHolidayApplySave:
        case ActionTypeIsExistHolidayCategoryFlow:
        case ActionTypeCheckinShiftGet:
        case ActionTypeCheckinTrackSave:
        case ActionTypeCheckinTrackList:
        case ActionTypeCheckinTrackGet:
        case ActionTypeCheckinTrackReply:
        case ActionTypeCheckinTrackReplyList:
        case ActionTypeCheckinWifiSave:
        case ActionTypeCheckinWifiList:
        case ActionTypeCheckinTrackDate:
        case ActionTypeCheckinTrackRemark:
            return YES;
        default:
            return NO;
    }
}
BOOL ActionCodeIsValidValue(ActionCode value) {
    switch (value) {
        case ActionCodeDone:
        case ActionCodeErrorTimeout:
        case ActionCodeErrorServer:
        case ActionCodeErrorInvalidAction:
        case ActionCodeErrorAccountException:
        case ActionCodeErrorAppException:
        case ActionCodeErrorCameraCategoryInvalid:
            return YES;
        default:
            return NO;
    }
}
@interface SessionRequest ()
@property (retain) NSString* sequence;
@property (retain) NSString* type;
@property (retain) NSData* param;
@property (retain) NSData* data;
@property (retain) PBAppendableArray * datasArray;
@property (retain) Token* token;
@property (retain) NSData* device;
@end

@implementation SessionRequest

- (BOOL) hasSequence {
    return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value_ {
    hasSequence_ = !!value_;
}
@synthesize sequence;
- (BOOL) hasType {
    return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
    hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasParam {
    return !!hasParam_;
}
- (void) setHasParam:(BOOL) value_ {
    hasParam_ = !!value_;
}
@synthesize param;
- (BOOL) hasData {
    return !!hasData_;
}
- (void) setHasData:(BOOL) value_ {
    hasData_ = !!value_;
}
@synthesize data;
@synthesize datasArray;
@dynamic datas;
- (BOOL) hasToken {
    return !!hasToken_;
}
- (void) setHasToken:(BOOL) value_ {
    hasToken_ = !!value_;
}
@synthesize token;
- (BOOL) hasDevice {
    return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) value_ {
    hasDevice_ = !!value_;
}
@synthesize device;
- (void) dealloc {
    self.sequence = nil;
    self.type = nil;
    self.param = nil;
    self.data = nil;
    self.datasArray = nil;
    self.token = nil;
    self.device = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.sequence = @"";
        self.type = @"";
        self.param = [NSData data];
        self.data = [NSData data];
        self.token = [Token defaultInstance];
        self.device = [NSData data];
    }
    return self;
}
static SessionRequest* defaultSessionRequestInstance = nil;
+ (void) initialize {
    if (self == [SessionRequest class]) {
        defaultSessionRequestInstance = [[SessionRequest alloc] init];
    }
}
+ (SessionRequest*) defaultInstance {
    return defaultSessionRequestInstance;
}
- (SessionRequest*) defaultInstance {
    return defaultSessionRequestInstance;
}
- (PBArray *)datas {
    return datasArray;
}
- (NSData*)datasAtIndex:(NSUInteger)index {
    return [datasArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (!self.hasSequence) {
        return NO;
    }
    if (!self.hasType) {
        return NO;
    }
    if (self.hasToken) {
        if (!self.token.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasSequence) {
        [output writeString:1 value:self.sequence];
    }
    if (self.hasType) {
        [output writeString:2 value:self.type];
    }
    if (self.hasParam) {
        [output writeData:3 value:self.param];
    }
    if (self.hasData) {
        [output writeData:4 value:self.data];
    }
    const NSUInteger datasArrayCount = self.datasArray.count;
    if (datasArrayCount > 0) {
        const NSData* *values = (const NSData* *)self.datasArray.data;
        for (NSUInteger i = 0; i < datasArrayCount; ++i) {
            [output writeData:5 value:values[i]];
        }
    }
    if (self.hasToken) {
        [output writeMessage:6 value:self.token];
    }
    if (self.hasDevice) {
        [output writeData:7 value:self.device];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasSequence) {
        size_ += computeStringSize(1, self.sequence);
    }
    if (self.hasType) {
        size_ += computeStringSize(2, self.type);
    }
    if (self.hasParam) {
        size_ += computeDataSize(3, self.param);
    }
    if (self.hasData) {
        size_ += computeDataSize(4, self.data);
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.datasArray.count;
        const NSData* *values = (const NSData* *)self.datasArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeDataSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    if (self.hasToken) {
        size_ += computeMessageSize(6, self.token);
    }
    if (self.hasDevice) {
        size_ += computeDataSize(7, self.device);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (SessionRequest*) parseFromData:(NSData*) data {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromData:data] build];
}
+ (SessionRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionRequest*) parseFromInputStream:(NSInputStream*) input {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromInputStream:input] build];
}
+ (SessionRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SessionRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionRequest*)[[[SessionRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionRequest_Builder*) builder {
    return [[[SessionRequest_Builder alloc] init] autorelease];
}
+ (SessionRequest_Builder*) builderWithPrototype:(SessionRequest*) prototype {
    return [[SessionRequest builder] mergeFrom:prototype];
}
- (SessionRequest_Builder*) builder {
    return [SessionRequest builder];
}
- (SessionRequest_Builder*) toBuilder {
    return [SessionRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasSequence) {
        [output appendFormat:@"%@%@: %@\n", indent, @"sequence", self.sequence];
    }
    if (self.hasType) {
        [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
    }
    if (self.hasParam) {
        [output appendFormat:@"%@%@: %@\n", indent, @"param", self.param];
    }
    if (self.hasData) {
        [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
    }
    for (NSData* element in self.datasArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"datas", element];
    }
    if (self.hasToken) {
        [output appendFormat:@"%@%@ {\n", indent, @"token"];
        [self.token writeDescriptionTo:output
                            withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasDevice) {
        [output appendFormat:@"%@%@: %@\n", indent, @"device", self.device];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[SessionRequest class]]) {
        return NO;
    }
    SessionRequest *otherMessage = other;
    return
    self.hasSequence == otherMessage.hasSequence &&
    (!self.hasSequence || [self.sequence isEqual:otherMessage.sequence]) &&
    self.hasType == otherMessage.hasType &&
    (!self.hasType || [self.type isEqual:otherMessage.type]) &&
    self.hasParam == otherMessage.hasParam &&
    (!self.hasParam || [self.param isEqual:otherMessage.param]) &&
    self.hasData == otherMessage.hasData &&
    (!self.hasData || [self.data isEqual:otherMessage.data]) &&
    [self.datasArray isEqualToArray:otherMessage.datasArray] &&
    self.hasToken == otherMessage.hasToken &&
    (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
    self.hasDevice == otherMessage.hasDevice &&
    (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasSequence) {
        hashCode = hashCode * 31 + [self.sequence hash];
    }
    if (self.hasType) {
        hashCode = hashCode * 31 + [self.type hash];
    }
    if (self.hasParam) {
        hashCode = hashCode * 31 + [self.param hash];
    }
    if (self.hasData) {
        hashCode = hashCode * 31 + [self.data hash];
    }
    for (NSData* element in self.datasArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasToken) {
        hashCode = hashCode * 31 + [self.token hash];
    }
    if (self.hasDevice) {
        hashCode = hashCode * 31 + [self.device hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface SessionRequest_Builder()
@property (retain) SessionRequest* result;
@end

@implementation SessionRequest_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[SessionRequest alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (SessionRequest_Builder*) clear {
    self.result = [[[SessionRequest alloc] init] autorelease];
    return self;
}
- (SessionRequest_Builder*) clone {
    return [SessionRequest builderWithPrototype:result];
}
- (SessionRequest*) defaultInstance {
    return [SessionRequest defaultInstance];
}
- (SessionRequest*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (SessionRequest*) buildPartial {
    SessionRequest* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (SessionRequest_Builder*) mergeFrom:(SessionRequest*) other {
    if (other == [SessionRequest defaultInstance]) {
        return self;
    }
    if (other.hasSequence) {
        [self setSequence:other.sequence];
    }
    if (other.hasType) {
        [self setType:other.type];
    }
    if (other.hasParam) {
        [self setParam:other.param];
    }
    if (other.hasData) {
        [self setData:other.data];
    }
    if (other.datasArray.count > 0) {
        if (result.datasArray == nil) {
            result.datasArray = [[other.datasArray copyWithZone:[other.datasArray zone]] autorelease];
        } else {
            [result.datasArray appendArray:other.datasArray];
        }
    }
    if (other.hasToken) {
        [self mergeToken:other.token];
    }
    if (other.hasDevice) {
        [self setDevice:other.device];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (SessionRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setSequence:[input readString]];
                break;
            }
            case 18: {
                [self setType:[input readString]];
                break;
            }
            case 26: {
                [self setParam:[input readData]];
                break;
            }
            case 34: {
                [self setData:[input readData]];
                break;
            }
            case 42: {
                [self addDatas:[input readData]];
                break;
            }
            case 50: {
                Token_Builder* subBuilder = [Token builder];
                if (self.hasToken) {
                    [subBuilder mergeFrom:self.token];
                }
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self setToken:[subBuilder buildPartial]];
                break;
            }
            case 58: {
                [self setDevice:[input readData]];
                break;
            }
        }
    }
}
- (BOOL) hasSequence {
    return result.hasSequence;
}
- (NSString*) sequence {
    return result.sequence;
}
- (SessionRequest_Builder*) setSequence:(NSString*) value {
    result.hasSequence = YES;
    result.sequence = value;
    return self;
}
- (SessionRequest_Builder*) clearSequence {
    result.hasSequence = NO;
    result.sequence = @"";
    return self;
}
- (BOOL) hasType {
    return result.hasType;
}
- (NSString*) type {
    return result.type;
}
- (SessionRequest_Builder*) setType:(NSString*) value {
    result.hasType = YES;
    result.type = value;
    return self;
}
- (SessionRequest_Builder*) clearType {
    result.hasType = NO;
    result.type = @"";
    return self;
}
- (BOOL) hasParam {
    return result.hasParam;
}
- (NSData*) param {
    return result.param;
}
- (SessionRequest_Builder*) setParam:(NSData*) value {
    result.hasParam = YES;
    result.param = value;
    return self;
}
- (SessionRequest_Builder*) clearParam {
    result.hasParam = NO;
    result.param = [NSData data];
    return self;
}
- (BOOL) hasData {
    return result.hasData;
}
- (NSData*) data {
    return result.data;
}
- (SessionRequest_Builder*) setData:(NSData*) value {
    result.hasData = YES;
    result.data = value;
    return self;
}
- (SessionRequest_Builder*) clearData {
    result.hasData = NO;
    result.data = [NSData data];
    return self;
}
- (PBAppendableArray *)datas {
    return result.datasArray;
}
- (NSData*)datasAtIndex:(NSUInteger)index {
    return [result datasAtIndex:index];
}
- (SessionRequest_Builder *)addDatas:(NSData*)value {
    if (result.datasArray == nil) {
        result.datasArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.datasArray addObject:value];
    return self;
}
- (SessionRequest_Builder *)setDatasArray:(NSArray *)array {
    result.datasArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (SessionRequest_Builder *)setDatasValues:(const NSData* *)values count:(NSUInteger)count {
    result.datasArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (SessionRequest_Builder *)clearDatas {
    result.datasArray = nil;
    return self;
}
- (BOOL) hasToken {
    return result.hasToken;
}
- (Token*) token {
    return result.token;
}
- (SessionRequest_Builder*) setToken:(Token*) value {
    result.hasToken = YES;
    result.token = value;
    return self;
}
- (SessionRequest_Builder*) setTokenBuilder:(Token_Builder*) builderForValue {
    return [self setToken:[builderForValue build]];
}
- (SessionRequest_Builder*) mergeToken:(Token*) value {
    if (result.hasToken &&
        result.token != [Token defaultInstance]) {
        result.token =
        [[[Token builderWithPrototype:result.token] mergeFrom:value] buildPartial];
    } else {
        result.token = value;
    }
    result.hasToken = YES;
    return self;
}
- (SessionRequest_Builder*) clearToken {
    result.hasToken = NO;
    result.token = [Token defaultInstance];
    return self;
}
- (BOOL) hasDevice {
    return result.hasDevice;
}
- (NSData*) device {
    return result.device;
}
- (SessionRequest_Builder*) setDevice:(NSData*) value {
    result.hasDevice = YES;
    result.device = value;
    return self;
}
- (SessionRequest_Builder*) clearDevice {
    result.hasDevice = NO;
    result.device = [NSData data];
    return self;
}
@end

@interface Token ()
@property (retain) NSString* tokenTime;
@property (retain) NSString* appKey;
@property (retain) NSString* token;
@property int32_t version;
@end

@implementation Token

- (BOOL) hasTokenTime {
    return !!hasTokenTime_;
}
- (void) setHasTokenTime:(BOOL) value_ {
    hasTokenTime_ = !!value_;
}
@synthesize tokenTime;
- (BOOL) hasAppKey {
    return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) value_ {
    hasAppKey_ = !!value_;
}
@synthesize appKey;
- (BOOL) hasToken {
    return !!hasToken_;
}
- (void) setHasToken:(BOOL) value_ {
    hasToken_ = !!value_;
}
@synthesize token;
- (BOOL) hasVersion {
    return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
    hasVersion_ = !!value_;
}
@synthesize version;
- (void) dealloc {
    self.tokenTime = nil;
    self.appKey = nil;
    self.token = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.tokenTime = @"";
        self.appKey = @"";
        self.token = @"";
        self.version = 1;
    }
    return self;
}
static Token* defaultTokenInstance = nil;
+ (void) initialize {
    if (self == [Token class]) {
        defaultTokenInstance = [[Token alloc] init];
    }
}
+ (Token*) defaultInstance {
    return defaultTokenInstance;
}
- (Token*) defaultInstance {
    return defaultTokenInstance;
}
- (BOOL) isInitialized {
    if (!self.hasTokenTime) {
        return NO;
    }
    if (!self.hasAppKey) {
        return NO;
    }
    if (!self.hasToken) {
        return NO;
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasTokenTime) {
        [output writeString:1 value:self.tokenTime];
    }
    if (self.hasAppKey) {
        [output writeString:2 value:self.appKey];
    }
    if (self.hasToken) {
        [output writeString:3 value:self.token];
    }
    if (self.hasVersion) {
        [output writeInt32:4 value:self.version];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasTokenTime) {
        size_ += computeStringSize(1, self.tokenTime);
    }
    if (self.hasAppKey) {
        size_ += computeStringSize(2, self.appKey);
    }
    if (self.hasToken) {
        size_ += computeStringSize(3, self.token);
    }
    if (self.hasVersion) {
        size_ += computeInt32Size(4, self.version);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (Token*) parseFromData:(NSData*) data {
    return (Token*)[[[Token builder] mergeFromData:data] build];
}
+ (Token*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (Token*)[[[Token builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Token*) parseFromInputStream:(NSInputStream*) input {
    return (Token*)[[[Token builder] mergeFromInputStream:input] build];
}
+ (Token*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (Token*)[[[Token builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Token*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (Token*)[[[Token builder] mergeFromCodedInputStream:input] build];
}
+ (Token*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (Token*)[[[Token builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Token_Builder*) builder {
    return [[[Token_Builder alloc] init] autorelease];
}
+ (Token_Builder*) builderWithPrototype:(Token*) prototype {
    return [[Token builder] mergeFrom:prototype];
}
- (Token_Builder*) builder {
    return [Token builder];
}
- (Token_Builder*) toBuilder {
    return [Token builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasTokenTime) {
        [output appendFormat:@"%@%@: %@\n", indent, @"tokenTime", self.tokenTime];
    }
    if (self.hasAppKey) {
        [output appendFormat:@"%@%@: %@\n", indent, @"appKey", self.appKey];
    }
    if (self.hasToken) {
        [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
    }
    if (self.hasVersion) {
        [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[Token class]]) {
        return NO;
    }
    Token *otherMessage = other;
    return
    self.hasTokenTime == otherMessage.hasTokenTime &&
    (!self.hasTokenTime || [self.tokenTime isEqual:otherMessage.tokenTime]) &&
    self.hasAppKey == otherMessage.hasAppKey &&
    (!self.hasAppKey || [self.appKey isEqual:otherMessage.appKey]) &&
    self.hasToken == otherMessage.hasToken &&
    (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
    self.hasVersion == otherMessage.hasVersion &&
    (!self.hasVersion || self.version == otherMessage.version) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasTokenTime) {
        hashCode = hashCode * 31 + [self.tokenTime hash];
    }
    if (self.hasAppKey) {
        hashCode = hashCode * 31 + [self.appKey hash];
    }
    if (self.hasToken) {
        hashCode = hashCode * 31 + [self.token hash];
    }
    if (self.hasVersion) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface Token_Builder()
@property (retain) Token* result;
@end

@implementation Token_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[Token alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (Token_Builder*) clear {
    self.result = [[[Token alloc] init] autorelease];
    return self;
}
- (Token_Builder*) clone {
    return [Token builderWithPrototype:result];
}
- (Token*) defaultInstance {
    return [Token defaultInstance];
}
- (Token*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (Token*) buildPartial {
    Token* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (Token_Builder*) mergeFrom:(Token*) other {
    if (other == [Token defaultInstance]) {
        return self;
    }
    if (other.hasTokenTime) {
        [self setTokenTime:other.tokenTime];
    }
    if (other.hasAppKey) {
        [self setAppKey:other.appKey];
    }
    if (other.hasToken) {
        [self setToken:other.token];
    }
    if (other.hasVersion) {
        [self setVersion:other.version];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (Token_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Token_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setTokenTime:[input readString]];
                break;
            }
            case 18: {
                [self setAppKey:[input readString]];
                break;
            }
            case 26: {
                [self setToken:[input readString]];
                break;
            }
            case 32: {
                [self setVersion:[input readInt32]];
                break;
            }
        }
    }
}
- (BOOL) hasTokenTime {
    return result.hasTokenTime;
}
- (NSString*) tokenTime {
    return result.tokenTime;
}
- (Token_Builder*) setTokenTime:(NSString*) value {
    result.hasTokenTime = YES;
    result.tokenTime = value;
    return self;
}
- (Token_Builder*) clearTokenTime {
    result.hasTokenTime = NO;
    result.tokenTime = @"";
    return self;
}
- (BOOL) hasAppKey {
    return result.hasAppKey;
}
- (NSString*) appKey {
    return result.appKey;
}
- (Token_Builder*) setAppKey:(NSString*) value {
    result.hasAppKey = YES;
    result.appKey = value;
    return self;
}
- (Token_Builder*) clearAppKey {
    result.hasAppKey = NO;
    result.appKey = @"";
    return self;
}
- (BOOL) hasToken {
    return result.hasToken;
}
- (NSString*) token {
    return result.token;
}
- (Token_Builder*) setToken:(NSString*) value {
    result.hasToken = YES;
    result.token = value;
    return self;
}
- (Token_Builder*) clearToken {
    result.hasToken = NO;
    result.token = @"";
    return self;
}
- (BOOL) hasVersion {
    return result.hasVersion;
}
- (int32_t) version {
    return result.version;
}
- (Token_Builder*) setVersion:(int32_t) value {
    result.hasVersion = YES;
    result.version = value;
    return self;
}
- (Token_Builder*) clearVersion {
    result.hasVersion = NO;
    result.version = 1;
    return self;
}
@end

@interface SessionResponse ()
@property (retain) NSString* sequence;
@property (retain) NSString* type;
@property (retain) NSString* code;
@property (retain) NSString* resultMessage;
@property (retain) NSData* data;
@property (retain) PBAppendableArray * datasArray;
@property (retain) NSString* value;
@end

@implementation SessionResponse

- (BOOL) hasSequence {
    return !!hasSequence_;
}
- (void) setHasSequence:(BOOL) value_ {
    hasSequence_ = !!value_;
}
@synthesize sequence;
- (BOOL) hasType {
    return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
    hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasCode {
    return !!hasCode_;
}
- (void) setHasCode:(BOOL) value_ {
    hasCode_ = !!value_;
}
@synthesize code;
- (BOOL) hasResultMessage {
    return !!hasResultMessage_;
}
- (void) setHasResultMessage:(BOOL) value_ {
    hasResultMessage_ = !!value_;
}
@synthesize resultMessage;
- (BOOL) hasData {
    return !!hasData_;
}
- (void) setHasData:(BOOL) value_ {
    hasData_ = !!value_;
}
@synthesize data;
@synthesize datasArray;
@dynamic datas;
- (BOOL) hasValue {
    return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
    hasValue_ = !!value_;
}
@synthesize value;
- (void) dealloc {
    self.sequence = nil;
    self.type = nil;
    self.code = nil;
    self.resultMessage = nil;
    self.data = nil;
    self.datasArray = nil;
    self.value = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.sequence = @"";
        self.type = @"";
        self.code = @"";
        self.resultMessage = @"";
        self.data = [NSData data];
        self.value = @"";
    }
    return self;
}
static SessionResponse* defaultSessionResponseInstance = nil;
+ (void) initialize {
    if (self == [SessionResponse class]) {
        defaultSessionResponseInstance = [[SessionResponse alloc] init];
    }
}
+ (SessionResponse*) defaultInstance {
    return defaultSessionResponseInstance;
}
- (SessionResponse*) defaultInstance {
    return defaultSessionResponseInstance;
}
- (PBArray *)datas {
    return datasArray;
}
- (NSData*)datasAtIndex:(NSUInteger)index {
    return [datasArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    if (!self.hasSequence) {
        return NO;
    }
    if (!self.hasType) {
        return NO;
    }
    if (!self.hasCode) {
        return NO;
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasSequence) {
        [output writeString:1 value:self.sequence];
    }
    if (self.hasType) {
        [output writeString:2 value:self.type];
    }
    if (self.hasCode) {
        [output writeString:3 value:self.code];
    }
    if (self.hasResultMessage) {
        [output writeString:4 value:self.resultMessage];
    }
    if (self.hasData) {
        [output writeData:5 value:self.data];
    }
    const NSUInteger datasArrayCount = self.datasArray.count;
    if (datasArrayCount > 0) {
        const NSData* *values = (const NSData* *)self.datasArray.data;
        for (NSUInteger i = 0; i < datasArrayCount; ++i) {
            [output writeData:6 value:values[i]];
        }
    }
    if (self.hasValue) {
        [output writeString:7 value:self.value];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasSequence) {
        size_ += computeStringSize(1, self.sequence);
    }
    if (self.hasType) {
        size_ += computeStringSize(2, self.type);
    }
    if (self.hasCode) {
        size_ += computeStringSize(3, self.code);
    }
    if (self.hasResultMessage) {
        size_ += computeStringSize(4, self.resultMessage);
    }
    if (self.hasData) {
        size_ += computeDataSize(5, self.data);
    }
    {
        int32_t dataSize = 0;
        const NSUInteger count = self.datasArray.count;
        const NSData* *values = (const NSData* *)self.datasArray.data;
        for (NSUInteger i = 0; i < count; ++i) {
            dataSize += computeDataSizeNoTag(values[i]);
        }
        size_ += dataSize;
        size_ += 1 * count;
    }
    if (self.hasValue) {
        size_ += computeStringSize(7, self.value);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (SessionResponse*) parseFromData:(NSData*) data {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromData:data] build];
}
+ (SessionResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionResponse*) parseFromInputStream:(NSInputStream*) input {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromInputStream:input] build];
}
+ (SessionResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromCodedInputStream:input] build];
}
+ (SessionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (SessionResponse*)[[[SessionResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionResponse_Builder*) builder {
    return [[[SessionResponse_Builder alloc] init] autorelease];
}
+ (SessionResponse_Builder*) builderWithPrototype:(SessionResponse*) prototype {
    return [[SessionResponse builder] mergeFrom:prototype];
}
- (SessionResponse_Builder*) builder {
    return [SessionResponse builder];
}
- (SessionResponse_Builder*) toBuilder {
    return [SessionResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasSequence) {
        [output appendFormat:@"%@%@: %@\n", indent, @"sequence", self.sequence];
    }
    if (self.hasType) {
        [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
    }
    if (self.hasCode) {
        [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
    }
    if (self.hasResultMessage) {
        [output appendFormat:@"%@%@: %@\n", indent, @"resultMessage", self.resultMessage];
    }
    if (self.hasData) {
        [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
    }
    for (NSData* element in self.datasArray) {
        [output appendFormat:@"%@%@: %@\n", indent, @"datas", element];
    }
    if (self.hasValue) {
        [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[SessionResponse class]]) {
        return NO;
    }
    SessionResponse *otherMessage = other;
    return
    self.hasSequence == otherMessage.hasSequence &&
    (!self.hasSequence || [self.sequence isEqual:otherMessage.sequence]) &&
    self.hasType == otherMessage.hasType &&
    (!self.hasType || [self.type isEqual:otherMessage.type]) &&
    self.hasCode == otherMessage.hasCode &&
    (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
    self.hasResultMessage == otherMessage.hasResultMessage &&
    (!self.hasResultMessage || [self.resultMessage isEqual:otherMessage.resultMessage]) &&
    self.hasData == otherMessage.hasData &&
    (!self.hasData || [self.data isEqual:otherMessage.data]) &&
    [self.datasArray isEqualToArray:otherMessage.datasArray] &&
    self.hasValue == otherMessage.hasValue &&
    (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasSequence) {
        hashCode = hashCode * 31 + [self.sequence hash];
    }
    if (self.hasType) {
        hashCode = hashCode * 31 + [self.type hash];
    }
    if (self.hasCode) {
        hashCode = hashCode * 31 + [self.code hash];
    }
    if (self.hasResultMessage) {
        hashCode = hashCode * 31 + [self.resultMessage hash];
    }
    if (self.hasData) {
        hashCode = hashCode * 31 + [self.data hash];
    }
    for (NSData* element in self.datasArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasValue) {
        hashCode = hashCode * 31 + [self.value hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface SessionResponse_Builder()
@property (retain) SessionResponse* result;
@end

@implementation SessionResponse_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[SessionResponse alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (SessionResponse_Builder*) clear {
    self.result = [[[SessionResponse alloc] init] autorelease];
    return self;
}
- (SessionResponse_Builder*) clone {
    return [SessionResponse builderWithPrototype:result];
}
- (SessionResponse*) defaultInstance {
    return [SessionResponse defaultInstance];
}
- (SessionResponse*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (SessionResponse*) buildPartial {
    SessionResponse* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (SessionResponse_Builder*) mergeFrom:(SessionResponse*) other {
    if (other == [SessionResponse defaultInstance]) {
        return self;
    }
    if (other.hasSequence) {
        [self setSequence:other.sequence];
    }
    if (other.hasType) {
        [self setType:other.type];
    }
    if (other.hasCode) {
        [self setCode:other.code];
    }
    if (other.hasResultMessage) {
        [self setResultMessage:other.resultMessage];
    }
    if (other.hasData) {
        [self setData:other.data];
    }
    if (other.datasArray.count > 0) {
        if (result.datasArray == nil) {
            result.datasArray = [[other.datasArray copyWithZone:[other.datasArray zone]] autorelease];
        } else {
            [result.datasArray appendArray:other.datasArray];
        }
    }
    if (other.hasValue) {
        [self setValue:other.value];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (SessionResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setSequence:[input readString]];
                break;
            }
            case 18: {
                [self setType:[input readString]];
                break;
            }
            case 26: {
                [self setCode:[input readString]];
                break;
            }
            case 34: {
                [self setResultMessage:[input readString]];
                break;
            }
            case 42: {
                [self setData:[input readData]];
                break;
            }
            case 50: {
                [self addDatas:[input readData]];
                break;
            }
            case 58: {
                [self setValue:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasSequence {
    return result.hasSequence;
}
- (NSString*) sequence {
    return result.sequence;
}
- (SessionResponse_Builder*) setSequence:(NSString*) value {
    result.hasSequence = YES;
    result.sequence = value;
    return self;
}
- (SessionResponse_Builder*) clearSequence {
    result.hasSequence = NO;
    result.sequence = @"";
    return self;
}
- (BOOL) hasType {
    return result.hasType;
}
- (NSString*) type {
    return result.type;
}
- (SessionResponse_Builder*) setType:(NSString*) value {
    result.hasType = YES;
    result.type = value;
    return self;
}
- (SessionResponse_Builder*) clearType {
    result.hasType = NO;
    result.type = @"";
    return self;
}
- (BOOL) hasCode {
    return result.hasCode;
}
- (NSString*) code {
    return result.code;
}
- (SessionResponse_Builder*) setCode:(NSString*) value {
    result.hasCode = YES;
    result.code = value;
    return self;
}
- (SessionResponse_Builder*) clearCode {
    result.hasCode = NO;
    result.code = @"";
    return self;
}
- (BOOL) hasResultMessage {
    return result.hasResultMessage;
}
- (NSString*) resultMessage {
    return result.resultMessage;
}
- (SessionResponse_Builder*) setResultMessage:(NSString*) value {
    result.hasResultMessage = YES;
    result.resultMessage = value;
    return self;
}
- (SessionResponse_Builder*) clearResultMessage {
    result.hasResultMessage = NO;
    result.resultMessage = @"";
    return self;
}
- (BOOL) hasData {
    return result.hasData;
}
- (NSData*) data {
    return result.data;
}
- (SessionResponse_Builder*) setData:(NSData*) value {
    result.hasData = YES;
    result.data = value;
    return self;
}
- (SessionResponse_Builder*) clearData {
    result.hasData = NO;
    result.data = [NSData data];
    return self;
}
- (PBAppendableArray *)datas {
    return result.datasArray;
}
- (NSData*)datasAtIndex:(NSUInteger)index {
    return [result datasAtIndex:index];
}
- (SessionResponse_Builder *)addDatas:(NSData*)value {
    if (result.datasArray == nil) {
        result.datasArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.datasArray addObject:value];
    return self;
}
- (SessionResponse_Builder *)setDatasArray:(NSArray *)array {
    result.datasArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (SessionResponse_Builder *)setDatasValues:(const NSData* *)values count:(NSUInteger)count {
    result.datasArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (SessionResponse_Builder *)clearDatas {
    result.datasArray = nil;
    return self;
}
- (BOOL) hasValue {
    return result.hasValue;
}
- (NSString*) value {
    return result.value;
}
- (SessionResponse_Builder*) setValue:(NSString*) value {
    result.hasValue = YES;
    result.value = value;
    return self;
}
- (SessionResponse_Builder*) clearValue {
    result.hasValue = NO;
    result.value = @"";
    return self;
}
@end

