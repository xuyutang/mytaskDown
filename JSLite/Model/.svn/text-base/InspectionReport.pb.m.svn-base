// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "InspectionReport.pb.h"

@implementation InspectionReportRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [InspectionReportRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface InspectionReport ()
@property int32_t id;
@property (retain) User* user;
@property (retain) InspectionReportCategory* inspectionReportCategory;
@property (retain) PBAppendableArray * inspectionTargetsArray;
@property (retain) NSString* content;
@property (retain) Location* location;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * inspectionReportRepliesArray;
@property (retain) Company* company;
@property int32_t replyCount;
@end

@implementation InspectionReport

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasInspectionReportCategory {
  return !!hasInspectionReportCategory_;
}
- (void) setHasInspectionReportCategory:(BOOL) value_ {
  hasInspectionReportCategory_ = !!value_;
}
@synthesize inspectionReportCategory;
@synthesize inspectionTargetsArray;
@dynamic inspectionTargets;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize inspectionReportRepliesArray;
@dynamic inspectionReportReplies;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (void) dealloc {
  self.user = nil;
  self.inspectionReportCategory = nil;
  self.inspectionTargetsArray = nil;
  self.content = nil;
  self.location = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  self.createDate = nil;
  self.inspectionReportRepliesArray = nil;
  self.company = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.inspectionReportCategory = [InspectionReportCategory defaultInstance];
    self.content = @"";
    self.location = [Location defaultInstance];
    self.createDate = @"";
    self.company = [Company defaultInstance];
    self.replyCount = 0;
  }
  return self;
}
static InspectionReport* defaultInspectionReportInstance = nil;
+ (void) initialize {
  if (self == [InspectionReport class]) {
    defaultInspectionReportInstance = [[InspectionReport alloc] init];
  }
}
+ (InspectionReport*) defaultInstance {
  return defaultInspectionReportInstance;
}
- (InspectionReport*) defaultInstance {
  return defaultInspectionReportInstance;
}
- (PBArray *)inspectionTargets {
  return inspectionTargetsArray;
}
- (InspectionTarget*)inspectionTargetsAtIndex:(NSUInteger)index {
  return [inspectionTargetsArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (PBArray *)inspectionReportReplies {
  return inspectionReportRepliesArray;
}
- (InspectionReportReply*)inspectionReportRepliesAtIndex:(NSUInteger)index {
  return [inspectionReportRepliesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasInspectionReportCategory) {
    if (!self.inspectionReportCategory.isInitialized) {
      return NO;
    }
  }
  for (InspectionTarget* element in self.inspectionTargets) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (InspectionReportReply* element in self.inspectionReportReplies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasInspectionReportCategory) {
    [output writeMessage:3 value:self.inspectionReportCategory];
  }
  for (InspectionTarget *element in self.inspectionTargetsArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasLocation) {
    [output writeMessage:6 value:self.location];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  if (self.hasCreateDate) {
    [output writeString:9 value:self.createDate];
  }
  for (InspectionReportReply *element in self.inspectionReportRepliesArray) {
    [output writeMessage:10 value:element];
  }
  if (self.hasCompany) {
    [output writeMessage:11 value:self.company];
  }
  if (self.hasReplyCount) {
    [output writeInt32:12 value:self.replyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasInspectionReportCategory) {
    size_ += computeMessageSize(3, self.inspectionReportCategory);
  }
  for (InspectionTarget *element in self.inspectionTargetsArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(6, self.location);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(9, self.createDate);
  }
  for (InspectionReportReply *element in self.inspectionReportRepliesArray) {
    size_ += computeMessageSize(10, element);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(11, self.company);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(12, self.replyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionReport*) parseFromData:(NSData*) data {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromData:data] build];
}
+ (InspectionReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionReport*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromInputStream:input] build];
}
+ (InspectionReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReport*)[[[InspectionReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReport_Builder*) builder {
  return [[[InspectionReport_Builder alloc] init] autorelease];
}
+ (InspectionReport_Builder*) builderWithPrototype:(InspectionReport*) prototype {
  return [[InspectionReport builder] mergeFrom:prototype];
}
- (InspectionReport_Builder*) builder {
  return [InspectionReport builder];
}
- (InspectionReport_Builder*) toBuilder {
  return [InspectionReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInspectionReportCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionReportCategory"];
    [self.inspectionReportCategory writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (InspectionTarget* element in self.inspectionTargetsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionTargets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (InspectionReportReply* element in self.inspectionReportRepliesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionReportReplies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionReport class]]) {
    return NO;
  }
  InspectionReport *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasInspectionReportCategory == otherMessage.hasInspectionReportCategory &&
      (!self.hasInspectionReportCategory || [self.inspectionReportCategory isEqual:otherMessage.inspectionReportCategory]) &&
      [self.inspectionTargetsArray isEqualToArray:otherMessage.inspectionTargetsArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.inspectionReportRepliesArray isEqualToArray:otherMessage.inspectionReportRepliesArray] &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasInspectionReportCategory) {
    hashCode = hashCode * 31 + [self.inspectionReportCategory hash];
  }
  for (InspectionTarget* element in self.inspectionTargetsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (InspectionReportReply* element in self.inspectionReportRepliesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionReport_Builder()
@property (retain) InspectionReport* result;
@end

@implementation InspectionReport_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionReport_Builder*) clear {
  self.result = [[[InspectionReport alloc] init] autorelease];
  return self;
}
- (InspectionReport_Builder*) clone {
  return [InspectionReport builderWithPrototype:result];
}
- (InspectionReport*) defaultInstance {
  return [InspectionReport defaultInstance];
}
- (InspectionReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionReport*) buildPartial {
  InspectionReport* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionReport_Builder*) mergeFrom:(InspectionReport*) other {
  if (other == [InspectionReport defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasInspectionReportCategory) {
    [self mergeInspectionReportCategory:other.inspectionReportCategory];
  }
  if (other.inspectionTargetsArray.count > 0) {
    if (result.inspectionTargetsArray == nil) {
      result.inspectionTargetsArray = [[other.inspectionTargetsArray copyWithZone:[other.inspectionTargetsArray zone]] autorelease];
    } else {
      [result.inspectionTargetsArray appendArray:other.inspectionTargetsArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.inspectionReportRepliesArray.count > 0) {
    if (result.inspectionReportRepliesArray == nil) {
      result.inspectionReportRepliesArray = [[other.inspectionReportRepliesArray copyWithZone:[other.inspectionReportRepliesArray zone]] autorelease];
    } else {
      [result.inspectionReportRepliesArray appendArray:other.inspectionReportRepliesArray];
    }
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        InspectionReportCategory_Builder* subBuilder = [InspectionReportCategory builder];
        if (self.hasInspectionReportCategory) {
          [subBuilder mergeFrom:self.inspectionReportCategory];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionReportCategory:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        InspectionTarget_Builder* subBuilder = [InspectionTarget builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionTargets:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
      case 74: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 82: {
        InspectionReportReply_Builder* subBuilder = [InspectionReportReply builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionReportReplies:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 96: {
        [self setReplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionReport_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionReport_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (InspectionReport_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (InspectionReport_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (InspectionReport_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (InspectionReport_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasInspectionReportCategory {
  return result.hasInspectionReportCategory;
}
- (InspectionReportCategory*) inspectionReportCategory {
  return result.inspectionReportCategory;
}
- (InspectionReport_Builder*) setInspectionReportCategory:(InspectionReportCategory*) value {
  result.hasInspectionReportCategory = YES;
  result.inspectionReportCategory = value;
  return self;
}
- (InspectionReport_Builder*) setInspectionReportCategoryBuilder:(InspectionReportCategory_Builder*) builderForValue {
  return [self setInspectionReportCategory:[builderForValue build]];
}
- (InspectionReport_Builder*) mergeInspectionReportCategory:(InspectionReportCategory*) value {
  if (result.hasInspectionReportCategory &&
      result.inspectionReportCategory != [InspectionReportCategory defaultInstance]) {
    result.inspectionReportCategory =
      [[[InspectionReportCategory builderWithPrototype:result.inspectionReportCategory] mergeFrom:value] buildPartial];
  } else {
    result.inspectionReportCategory = value;
  }
  result.hasInspectionReportCategory = YES;
  return self;
}
- (InspectionReport_Builder*) clearInspectionReportCategory {
  result.hasInspectionReportCategory = NO;
  result.inspectionReportCategory = [InspectionReportCategory defaultInstance];
  return self;
}
- (PBAppendableArray *)inspectionTargets {
  return result.inspectionTargetsArray;
}
- (InspectionTarget*)inspectionTargetsAtIndex:(NSUInteger)index {
  return [result inspectionTargetsAtIndex:index];
}
- (InspectionReport_Builder *)addInspectionTargets:(InspectionTarget*)value {
  if (result.inspectionTargetsArray == nil) {
    result.inspectionTargetsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionTargetsArray addObject:value];
  return self;
}
- (InspectionReport_Builder *)setInspectionTargetsArray:(NSArray *)array {
  result.inspectionTargetsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)setInspectionTargetsValues:(const InspectionTarget* *)values count:(NSUInteger)count {
  result.inspectionTargetsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)clearInspectionTargets {
  result.inspectionTargetsArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (InspectionReport_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (InspectionReport_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (InspectionReport_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (InspectionReport_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (InspectionReport_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (InspectionReport_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (InspectionReport_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (InspectionReport_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (InspectionReport_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (InspectionReport_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (InspectionReport_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (InspectionReport_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)inspectionReportReplies {
  return result.inspectionReportRepliesArray;
}
- (InspectionReportReply*)inspectionReportRepliesAtIndex:(NSUInteger)index {
  return [result inspectionReportRepliesAtIndex:index];
}
- (InspectionReport_Builder *)addInspectionReportReplies:(InspectionReportReply*)value {
  if (result.inspectionReportRepliesArray == nil) {
    result.inspectionReportRepliesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionReportRepliesArray addObject:value];
  return self;
}
- (InspectionReport_Builder *)setInspectionReportRepliesArray:(NSArray *)array {
  result.inspectionReportRepliesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)setInspectionReportRepliesValues:(const InspectionReportReply* *)values count:(NSUInteger)count {
  result.inspectionReportRepliesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReport_Builder *)clearInspectionReportReplies {
  result.inspectionReportRepliesArray = nil;
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionReport_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionReport_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionReport_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionReport_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (InspectionReport_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (InspectionReport_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
@end

@interface InspectionType ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* comment;
@property (retain) Company* company;
@end

@implementation InspectionType

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (void) dealloc {
  self.name = nil;
  self.comment = nil;
  self.company = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.comment = @"";
    self.company = [Company defaultInstance];
  }
  return self;
}
static InspectionType* defaultInspectionTypeInstance = nil;
+ (void) initialize {
  if (self == [InspectionType class]) {
    defaultInspectionTypeInstance = [[InspectionType alloc] init];
  }
}
+ (InspectionType*) defaultInstance {
  return defaultInspectionTypeInstance;
}
- (InspectionType*) defaultInstance {
  return defaultInspectionTypeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasCompany) {
    [output writeMessage:4 value:self.company];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(4, self.company);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionType*) parseFromData:(NSData*) data {
  return (InspectionType*)[[[InspectionType builder] mergeFromData:data] build];
}
+ (InspectionType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionType*)[[[InspectionType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionType*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionType*)[[[InspectionType builder] mergeFromInputStream:input] build];
}
+ (InspectionType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionType*)[[[InspectionType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionType*)[[[InspectionType builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionType*)[[[InspectionType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionType_Builder*) builder {
  return [[[InspectionType_Builder alloc] init] autorelease];
}
+ (InspectionType_Builder*) builderWithPrototype:(InspectionType*) prototype {
  return [[InspectionType builder] mergeFrom:prototype];
}
- (InspectionType_Builder*) builder {
  return [InspectionType builder];
}
- (InspectionType_Builder*) toBuilder {
  return [InspectionType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionType class]]) {
    return NO;
  }
  InspectionType *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionType_Builder()
@property (retain) InspectionType* result;
@end

@implementation InspectionType_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionType alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionType_Builder*) clear {
  self.result = [[[InspectionType alloc] init] autorelease];
  return self;
}
- (InspectionType_Builder*) clone {
  return [InspectionType builderWithPrototype:result];
}
- (InspectionType*) defaultInstance {
  return [InspectionType defaultInstance];
}
- (InspectionType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionType*) buildPartial {
  InspectionType* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionType_Builder*) mergeFrom:(InspectionType*) other {
  if (other == [InspectionType defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionType_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionType_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionType_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (InspectionType_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (InspectionType_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (InspectionType_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (InspectionType_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionType_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionType_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionType_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionType_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
@end

@interface InspectionModel ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* comment;
@property (retain) Company* company;
@property (retain) PBAppendableArray * inspectionStatusArray;
@end

@implementation InspectionModel

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
@synthesize inspectionStatusArray;
@dynamic inspectionStatus;
- (void) dealloc {
  self.name = nil;
  self.comment = nil;
  self.company = nil;
  self.inspectionStatusArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.comment = @"";
    self.company = [Company defaultInstance];
  }
  return self;
}
static InspectionModel* defaultInspectionModelInstance = nil;
+ (void) initialize {
  if (self == [InspectionModel class]) {
    defaultInspectionModelInstance = [[InspectionModel alloc] init];
  }
}
+ (InspectionModel*) defaultInstance {
  return defaultInspectionModelInstance;
}
- (InspectionModel*) defaultInstance {
  return defaultInspectionModelInstance;
}
- (PBArray *)inspectionStatus {
  return inspectionStatusArray;
}
- (InspectionStatus*)inspectionStatusAtIndex:(NSUInteger)index {
  return [inspectionStatusArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  for (InspectionStatus* element in self.inspectionStatus) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasCompany) {
    [output writeMessage:4 value:self.company];
  }
  for (InspectionStatus *element in self.inspectionStatusArray) {
    [output writeMessage:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(4, self.company);
  }
  for (InspectionStatus *element in self.inspectionStatusArray) {
    size_ += computeMessageSize(5, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionModel*) parseFromData:(NSData*) data {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromData:data] build];
}
+ (InspectionModel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionModel*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromInputStream:input] build];
}
+ (InspectionModel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionModel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionModel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionModel*)[[[InspectionModel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionModel_Builder*) builder {
  return [[[InspectionModel_Builder alloc] init] autorelease];
}
+ (InspectionModel_Builder*) builderWithPrototype:(InspectionModel*) prototype {
  return [[InspectionModel builder] mergeFrom:prototype];
}
- (InspectionModel_Builder*) builder {
  return [InspectionModel builder];
}
- (InspectionModel_Builder*) toBuilder {
  return [InspectionModel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (InspectionStatus* element in self.inspectionStatusArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionStatus"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionModel class]]) {
    return NO;
  }
  InspectionModel *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      [self.inspectionStatusArray isEqualToArray:otherMessage.inspectionStatusArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  for (InspectionStatus* element in self.inspectionStatusArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionModel_Builder()
@property (retain) InspectionModel* result;
@end

@implementation InspectionModel_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionModel alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionModel_Builder*) clear {
  self.result = [[[InspectionModel alloc] init] autorelease];
  return self;
}
- (InspectionModel_Builder*) clone {
  return [InspectionModel builderWithPrototype:result];
}
- (InspectionModel*) defaultInstance {
  return [InspectionModel defaultInstance];
}
- (InspectionModel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionModel*) buildPartial {
  InspectionModel* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionModel_Builder*) mergeFrom:(InspectionModel*) other {
  if (other == [InspectionModel defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.inspectionStatusArray.count > 0) {
    if (result.inspectionStatusArray == nil) {
      result.inspectionStatusArray = [[other.inspectionStatusArray copyWithZone:[other.inspectionStatusArray zone]] autorelease];
    } else {
      [result.inspectionStatusArray appendArray:other.inspectionStatusArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionModel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionModel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        InspectionStatus_Builder* subBuilder = [InspectionStatus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionStatus:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionModel_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionModel_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (InspectionModel_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (InspectionModel_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (InspectionModel_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (InspectionModel_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionModel_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionModel_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionModel_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionModel_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (PBAppendableArray *)inspectionStatus {
  return result.inspectionStatusArray;
}
- (InspectionStatus*)inspectionStatusAtIndex:(NSUInteger)index {
  return [result inspectionStatusAtIndex:index];
}
- (InspectionModel_Builder *)addInspectionStatus:(InspectionStatus*)value {
  if (result.inspectionStatusArray == nil) {
    result.inspectionStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionStatusArray addObject:value];
  return self;
}
- (InspectionModel_Builder *)setInspectionStatusArray:(NSArray *)array {
  result.inspectionStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionModel_Builder *)setInspectionStatusValues:(const InspectionStatus* *)values count:(NSUInteger)count {
  result.inspectionStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionModel_Builder *)clearInspectionStatus {
  result.inspectionStatusArray = nil;
  return self;
}
@end

@interface InspectionStatus ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* comment;
@property (retain) Company* company;
@property BOOL isDefault;
@end

@implementation InspectionStatus

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (BOOL) hasIsDefault {
  return !!hasIsDefault_;
}
- (void) setHasIsDefault:(BOOL) value_ {
  hasIsDefault_ = !!value_;
}
- (BOOL) isDefault {
  return !!isDefault_;
}
- (void) setIsDefault:(BOOL) value_ {
  isDefault_ = !!value_;
}
- (void) dealloc {
  self.name = nil;
  self.comment = nil;
  self.company = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.comment = @"";
    self.company = [Company defaultInstance];
    self.isDefault = NO;
  }
  return self;
}
static InspectionStatus* defaultInspectionStatusInstance = nil;
+ (void) initialize {
  if (self == [InspectionStatus class]) {
    defaultInspectionStatusInstance = [[InspectionStatus alloc] init];
  }
}
+ (InspectionStatus*) defaultInstance {
  return defaultInspectionStatusInstance;
}
- (InspectionStatus*) defaultInstance {
  return defaultInspectionStatusInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasCompany) {
    [output writeMessage:4 value:self.company];
  }
  if (self.hasIsDefault) {
    [output writeBool:5 value:self.isDefault];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(4, self.company);
  }
  if (self.hasIsDefault) {
    size_ += computeBoolSize(5, self.isDefault);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionStatus*) parseFromData:(NSData*) data {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromData:data] build];
}
+ (InspectionStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionStatus*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromInputStream:input] build];
}
+ (InspectionStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionStatus*)[[[InspectionStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionStatus_Builder*) builder {
  return [[[InspectionStatus_Builder alloc] init] autorelease];
}
+ (InspectionStatus_Builder*) builderWithPrototype:(InspectionStatus*) prototype {
  return [[InspectionStatus builder] mergeFrom:prototype];
}
- (InspectionStatus_Builder*) builder {
  return [InspectionStatus builder];
}
- (InspectionStatus_Builder*) toBuilder {
  return [InspectionStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIsDefault) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDefault", [NSNumber numberWithBool:self.isDefault]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionStatus class]]) {
    return NO;
  }
  InspectionStatus *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      self.hasIsDefault == otherMessage.hasIsDefault &&
      (!self.hasIsDefault || self.isDefault == otherMessage.isDefault) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  if (self.hasIsDefault) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isDefault] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionStatus_Builder()
@property (retain) InspectionStatus* result;
@end

@implementation InspectionStatus_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionStatus alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionStatus_Builder*) clear {
  self.result = [[[InspectionStatus alloc] init] autorelease];
  return self;
}
- (InspectionStatus_Builder*) clone {
  return [InspectionStatus builderWithPrototype:result];
}
- (InspectionStatus*) defaultInstance {
  return [InspectionStatus defaultInstance];
}
- (InspectionStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionStatus*) buildPartial {
  InspectionStatus* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionStatus_Builder*) mergeFrom:(InspectionStatus*) other {
  if (other == [InspectionStatus defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.hasIsDefault) {
    [self setIsDefault:other.isDefault];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setIsDefault:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionStatus_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionStatus_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (InspectionStatus_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (InspectionStatus_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (InspectionStatus_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (InspectionStatus_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionStatus_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionStatus_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionStatus_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionStatus_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (BOOL) hasIsDefault {
  return result.hasIsDefault;
}
- (BOOL) isDefault {
  return result.isDefault;
}
- (InspectionStatus_Builder*) setIsDefault:(BOOL) value {
  result.hasIsDefault = YES;
  result.isDefault = value;
  return self;
}
- (InspectionStatus_Builder*) clearIsDefault {
  result.hasIsDefault = NO;
  result.isDefault = NO;
  return self;
}
@end

@interface InspectionTarget ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* serialNumber;
@property (retain) NSString* comment;
@property (retain) Location* location;
@property (retain) PBAppendableArray * maintainersArray;
@property (retain) InspectionType* inspectionType;
@property (retain) InspectionModel* inspectionModel;
@property int32_t parentId;
@property (retain) PBAppendableArray * inspectionUsersArray;
@property (retain) PBAppendableArray * inspectionStatusArray;
@property (retain) NSString* createDate;
@property (retain) Company* company;
@end

@implementation InspectionTarget

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasSerialNumber {
  return !!hasSerialNumber_;
}
- (void) setHasSerialNumber:(BOOL) value_ {
  hasSerialNumber_ = !!value_;
}
@synthesize serialNumber;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
@synthesize maintainersArray;
@dynamic maintainers;
- (BOOL) hasInspectionType {
  return !!hasInspectionType_;
}
- (void) setHasInspectionType:(BOOL) value_ {
  hasInspectionType_ = !!value_;
}
@synthesize inspectionType;
- (BOOL) hasInspectionModel {
  return !!hasInspectionModel_;
}
- (void) setHasInspectionModel:(BOOL) value_ {
  hasInspectionModel_ = !!value_;
}
@synthesize inspectionModel;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) value_ {
  hasParentId_ = !!value_;
}
@synthesize parentId;
@synthesize inspectionUsersArray;
@dynamic inspectionUsers;
@synthesize inspectionStatusArray;
@dynamic inspectionStatus;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (void) dealloc {
  self.name = nil;
  self.serialNumber = nil;
  self.comment = nil;
  self.location = nil;
  self.maintainersArray = nil;
  self.inspectionType = nil;
  self.inspectionModel = nil;
  self.inspectionUsersArray = nil;
  self.inspectionStatusArray = nil;
  self.createDate = nil;
  self.company = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.serialNumber = @"";
    self.comment = @"";
    self.location = [Location defaultInstance];
    self.inspectionType = [InspectionType defaultInstance];
    self.inspectionModel = [InspectionModel defaultInstance];
    self.parentId = 0;
    self.createDate = @"";
    self.company = [Company defaultInstance];
  }
  return self;
}
static InspectionTarget* defaultInspectionTargetInstance = nil;
+ (void) initialize {
  if (self == [InspectionTarget class]) {
    defaultInspectionTargetInstance = [[InspectionTarget alloc] init];
  }
}
+ (InspectionTarget*) defaultInstance {
  return defaultInspectionTargetInstance;
}
- (InspectionTarget*) defaultInstance {
  return defaultInspectionTargetInstance;
}
- (PBArray *)maintainers {
  return maintainersArray;
}
- (User*)maintainersAtIndex:(NSUInteger)index {
  return [maintainersArray objectAtIndex:index];
}
- (PBArray *)inspectionUsers {
  return inspectionUsersArray;
}
- (User*)inspectionUsersAtIndex:(NSUInteger)index {
  return [inspectionUsersArray objectAtIndex:index];
}
- (PBArray *)inspectionStatus {
  return inspectionStatusArray;
}
- (InspectionStatus*)inspectionStatusAtIndex:(NSUInteger)index {
  return [inspectionStatusArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.maintainers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasInspectionType) {
    if (!self.inspectionType.isInitialized) {
      return NO;
    }
  }
  if (self.hasInspectionModel) {
    if (!self.inspectionModel.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.inspectionUsers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (InspectionStatus* element in self.inspectionStatus) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasSerialNumber) {
    [output writeString:3 value:self.serialNumber];
  }
  if (self.hasComment) {
    [output writeString:4 value:self.comment];
  }
  if (self.hasLocation) {
    [output writeMessage:5 value:self.location];
  }
  for (User *element in self.maintainersArray) {
    [output writeMessage:6 value:element];
  }
  if (self.hasInspectionType) {
    [output writeMessage:7 value:self.inspectionType];
  }
  if (self.hasInspectionModel) {
    [output writeMessage:8 value:self.inspectionModel];
  }
  if (self.hasParentId) {
    [output writeInt32:9 value:self.parentId];
  }
  for (User *element in self.inspectionUsersArray) {
    [output writeMessage:10 value:element];
  }
  for (InspectionStatus *element in self.inspectionStatusArray) {
    [output writeMessage:11 value:element];
  }
  if (self.hasCreateDate) {
    [output writeString:12 value:self.createDate];
  }
  if (self.hasCompany) {
    [output writeMessage:13 value:self.company];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasSerialNumber) {
    size_ += computeStringSize(3, self.serialNumber);
  }
  if (self.hasComment) {
    size_ += computeStringSize(4, self.comment);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(5, self.location);
  }
  for (User *element in self.maintainersArray) {
    size_ += computeMessageSize(6, element);
  }
  if (self.hasInspectionType) {
    size_ += computeMessageSize(7, self.inspectionType);
  }
  if (self.hasInspectionModel) {
    size_ += computeMessageSize(8, self.inspectionModel);
  }
  if (self.hasParentId) {
    size_ += computeInt32Size(9, self.parentId);
  }
  for (User *element in self.inspectionUsersArray) {
    size_ += computeMessageSize(10, element);
  }
  for (InspectionStatus *element in self.inspectionStatusArray) {
    size_ += computeMessageSize(11, element);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(12, self.createDate);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(13, self.company);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionTarget*) parseFromData:(NSData*) data {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromData:data] build];
}
+ (InspectionTarget*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionTarget*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromInputStream:input] build];
}
+ (InspectionTarget*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionTarget*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionTarget*)[[[InspectionTarget builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionTarget_Builder*) builder {
  return [[[InspectionTarget_Builder alloc] init] autorelease];
}
+ (InspectionTarget_Builder*) builderWithPrototype:(InspectionTarget*) prototype {
  return [[InspectionTarget builder] mergeFrom:prototype];
}
- (InspectionTarget_Builder*) builder {
  return [InspectionTarget builder];
}
- (InspectionTarget_Builder*) toBuilder {
  return [InspectionTarget builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSerialNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serialNumber", self.serialNumber];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.maintainersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"maintainers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInspectionType) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionType"];
    [self.inspectionType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInspectionModel) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionModel"];
    [self.inspectionModel writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithInt:self.parentId]];
  }
  for (User* element in self.inspectionUsersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (InspectionStatus* element in self.inspectionStatusArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionStatus"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionTarget class]]) {
    return NO;
  }
  InspectionTarget *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSerialNumber == otherMessage.hasSerialNumber &&
      (!self.hasSerialNumber || [self.serialNumber isEqual:otherMessage.serialNumber]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      [self.maintainersArray isEqualToArray:otherMessage.maintainersArray] &&
      self.hasInspectionType == otherMessage.hasInspectionType &&
      (!self.hasInspectionType || [self.inspectionType isEqual:otherMessage.inspectionType]) &&
      self.hasInspectionModel == otherMessage.hasInspectionModel &&
      (!self.hasInspectionModel || [self.inspectionModel isEqual:otherMessage.inspectionModel]) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      [self.inspectionUsersArray isEqualToArray:otherMessage.inspectionUsersArray] &&
      [self.inspectionStatusArray isEqualToArray:otherMessage.inspectionStatusArray] &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSerialNumber) {
    hashCode = hashCode * 31 + [self.serialNumber hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  for (User* element in self.maintainersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasInspectionType) {
    hashCode = hashCode * 31 + [self.inspectionType hash];
  }
  if (self.hasInspectionModel) {
    hashCode = hashCode * 31 + [self.inspectionModel hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentId] hash];
  }
  for (User* element in self.inspectionUsersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (InspectionStatus* element in self.inspectionStatusArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionTarget_Builder()
@property (retain) InspectionTarget* result;
@end

@implementation InspectionTarget_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionTarget alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionTarget_Builder*) clear {
  self.result = [[[InspectionTarget alloc] init] autorelease];
  return self;
}
- (InspectionTarget_Builder*) clone {
  return [InspectionTarget builderWithPrototype:result];
}
- (InspectionTarget*) defaultInstance {
  return [InspectionTarget defaultInstance];
}
- (InspectionTarget*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionTarget*) buildPartial {
  InspectionTarget* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionTarget_Builder*) mergeFrom:(InspectionTarget*) other {
  if (other == [InspectionTarget defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSerialNumber) {
    [self setSerialNumber:other.serialNumber];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.maintainersArray.count > 0) {
    if (result.maintainersArray == nil) {
      result.maintainersArray = [[other.maintainersArray copyWithZone:[other.maintainersArray zone]] autorelease];
    } else {
      [result.maintainersArray appendArray:other.maintainersArray];
    }
  }
  if (other.hasInspectionType) {
    [self mergeInspectionType:other.inspectionType];
  }
  if (other.hasInspectionModel) {
    [self mergeInspectionModel:other.inspectionModel];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.inspectionUsersArray.count > 0) {
    if (result.inspectionUsersArray == nil) {
      result.inspectionUsersArray = [[other.inspectionUsersArray copyWithZone:[other.inspectionUsersArray zone]] autorelease];
    } else {
      [result.inspectionUsersArray appendArray:other.inspectionUsersArray];
    }
  }
  if (other.inspectionStatusArray.count > 0) {
    if (result.inspectionStatusArray == nil) {
      result.inspectionStatusArray = [[other.inspectionStatusArray copyWithZone:[other.inspectionStatusArray zone]] autorelease];
    } else {
      [result.inspectionStatusArray appendArray:other.inspectionStatusArray];
    }
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionTarget_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setSerialNumber:[input readString]];
        break;
      }
      case 34: {
        [self setComment:[input readString]];
        break;
      }
      case 42: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMaintainers:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        InspectionType_Builder* subBuilder = [InspectionType builder];
        if (self.hasInspectionType) {
          [subBuilder mergeFrom:self.inspectionType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionType:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        InspectionModel_Builder* subBuilder = [InspectionModel builder];
        if (self.hasInspectionModel) {
          [subBuilder mergeFrom:self.inspectionModel];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionModel:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setParentId:[input readInt32]];
        break;
      }
      case 82: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionUsers:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        InspectionStatus_Builder* subBuilder = [InspectionStatus builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionStatus:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 106: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionTarget_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionTarget_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (InspectionTarget_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (InspectionTarget_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasSerialNumber {
  return result.hasSerialNumber;
}
- (NSString*) serialNumber {
  return result.serialNumber;
}
- (InspectionTarget_Builder*) setSerialNumber:(NSString*) value {
  result.hasSerialNumber = YES;
  result.serialNumber = value;
  return self;
}
- (InspectionTarget_Builder*) clearSerialNumber {
  result.hasSerialNumber = NO;
  result.serialNumber = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (InspectionTarget_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (InspectionTarget_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (InspectionTarget_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (InspectionTarget_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (InspectionTarget_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (InspectionTarget_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)maintainers {
  return result.maintainersArray;
}
- (User*)maintainersAtIndex:(NSUInteger)index {
  return [result maintainersAtIndex:index];
}
- (InspectionTarget_Builder *)addMaintainers:(User*)value {
  if (result.maintainersArray == nil) {
    result.maintainersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.maintainersArray addObject:value];
  return self;
}
- (InspectionTarget_Builder *)setMaintainersArray:(NSArray *)array {
  result.maintainersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)setMaintainersValues:(const User* *)values count:(NSUInteger)count {
  result.maintainersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)clearMaintainers {
  result.maintainersArray = nil;
  return self;
}
- (BOOL) hasInspectionType {
  return result.hasInspectionType;
}
- (InspectionType*) inspectionType {
  return result.inspectionType;
}
- (InspectionTarget_Builder*) setInspectionType:(InspectionType*) value {
  result.hasInspectionType = YES;
  result.inspectionType = value;
  return self;
}
- (InspectionTarget_Builder*) setInspectionTypeBuilder:(InspectionType_Builder*) builderForValue {
  return [self setInspectionType:[builderForValue build]];
}
- (InspectionTarget_Builder*) mergeInspectionType:(InspectionType*) value {
  if (result.hasInspectionType &&
      result.inspectionType != [InspectionType defaultInstance]) {
    result.inspectionType =
      [[[InspectionType builderWithPrototype:result.inspectionType] mergeFrom:value] buildPartial];
  } else {
    result.inspectionType = value;
  }
  result.hasInspectionType = YES;
  return self;
}
- (InspectionTarget_Builder*) clearInspectionType {
  result.hasInspectionType = NO;
  result.inspectionType = [InspectionType defaultInstance];
  return self;
}
- (BOOL) hasInspectionModel {
  return result.hasInspectionModel;
}
- (InspectionModel*) inspectionModel {
  return result.inspectionModel;
}
- (InspectionTarget_Builder*) setInspectionModel:(InspectionModel*) value {
  result.hasInspectionModel = YES;
  result.inspectionModel = value;
  return self;
}
- (InspectionTarget_Builder*) setInspectionModelBuilder:(InspectionModel_Builder*) builderForValue {
  return [self setInspectionModel:[builderForValue build]];
}
- (InspectionTarget_Builder*) mergeInspectionModel:(InspectionModel*) value {
  if (result.hasInspectionModel &&
      result.inspectionModel != [InspectionModel defaultInstance]) {
    result.inspectionModel =
      [[[InspectionModel builderWithPrototype:result.inspectionModel] mergeFrom:value] buildPartial];
  } else {
    result.inspectionModel = value;
  }
  result.hasInspectionModel = YES;
  return self;
}
- (InspectionTarget_Builder*) clearInspectionModel {
  result.hasInspectionModel = NO;
  result.inspectionModel = [InspectionModel defaultInstance];
  return self;
}
- (BOOL) hasParentId {
  return result.hasParentId;
}
- (int32_t) parentId {
  return result.parentId;
}
- (InspectionTarget_Builder*) setParentId:(int32_t) value {
  result.hasParentId = YES;
  result.parentId = value;
  return self;
}
- (InspectionTarget_Builder*) clearParentId {
  result.hasParentId = NO;
  result.parentId = 0;
  return self;
}
- (PBAppendableArray *)inspectionUsers {
  return result.inspectionUsersArray;
}
- (User*)inspectionUsersAtIndex:(NSUInteger)index {
  return [result inspectionUsersAtIndex:index];
}
- (InspectionTarget_Builder *)addInspectionUsers:(User*)value {
  if (result.inspectionUsersArray == nil) {
    result.inspectionUsersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionUsersArray addObject:value];
  return self;
}
- (InspectionTarget_Builder *)setInspectionUsersArray:(NSArray *)array {
  result.inspectionUsersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)setInspectionUsersValues:(const User* *)values count:(NSUInteger)count {
  result.inspectionUsersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)clearInspectionUsers {
  result.inspectionUsersArray = nil;
  return self;
}
- (PBAppendableArray *)inspectionStatus {
  return result.inspectionStatusArray;
}
- (InspectionStatus*)inspectionStatusAtIndex:(NSUInteger)index {
  return [result inspectionStatusAtIndex:index];
}
- (InspectionTarget_Builder *)addInspectionStatus:(InspectionStatus*)value {
  if (result.inspectionStatusArray == nil) {
    result.inspectionStatusArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionStatusArray addObject:value];
  return self;
}
- (InspectionTarget_Builder *)setInspectionStatusArray:(NSArray *)array {
  result.inspectionStatusArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)setInspectionStatusValues:(const InspectionStatus* *)values count:(NSUInteger)count {
  result.inspectionStatusArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionTarget_Builder *)clearInspectionStatus {
  result.inspectionStatusArray = nil;
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (InspectionTarget_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (InspectionTarget_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionTarget_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionTarget_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionTarget_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionTarget_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
@end

@interface InspectionReportCategory ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) NSString* comment;
@property (retain) Company* company;
@property int32_t version;
@end

@implementation InspectionReportCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
- (void) dealloc {
  self.name = nil;
  self.comment = nil;
  self.company = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.comment = @"";
    self.company = [Company defaultInstance];
    self.version = 1;
  }
  return self;
}
static InspectionReportCategory* defaultInspectionReportCategoryInstance = nil;
+ (void) initialize {
  if (self == [InspectionReportCategory class]) {
    defaultInspectionReportCategoryInstance = [[InspectionReportCategory alloc] init];
  }
}
+ (InspectionReportCategory*) defaultInstance {
  return defaultInspectionReportCategoryInstance;
}
- (InspectionReportCategory*) defaultInstance {
  return defaultInspectionReportCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasCompany) {
    [output writeMessage:4 value:self.company];
  }
  if (self.hasVersion) {
    [output writeInt32:5 value:self.version];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(4, self.company);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(5, self.version);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionReportCategory*) parseFromData:(NSData*) data {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromData:data] build];
}
+ (InspectionReportCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportCategory*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromInputStream:input] build];
}
+ (InspectionReportCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionReportCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportCategory*)[[[InspectionReportCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportCategory_Builder*) builder {
  return [[[InspectionReportCategory_Builder alloc] init] autorelease];
}
+ (InspectionReportCategory_Builder*) builderWithPrototype:(InspectionReportCategory*) prototype {
  return [[InspectionReportCategory builder] mergeFrom:prototype];
}
- (InspectionReportCategory_Builder*) builder {
  return [InspectionReportCategory builder];
}
- (InspectionReportCategory_Builder*) toBuilder {
  return [InspectionReportCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionReportCategory class]]) {
    return NO;
  }
  InspectionReportCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionReportCategory_Builder()
@property (retain) InspectionReportCategory* result;
@end

@implementation InspectionReportCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionReportCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionReportCategory_Builder*) clear {
  self.result = [[[InspectionReportCategory alloc] init] autorelease];
  return self;
}
- (InspectionReportCategory_Builder*) clone {
  return [InspectionReportCategory builderWithPrototype:result];
}
- (InspectionReportCategory*) defaultInstance {
  return [InspectionReportCategory defaultInstance];
}
- (InspectionReportCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionReportCategory*) buildPartial {
  InspectionReportCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionReportCategory_Builder*) mergeFrom:(InspectionReportCategory*) other {
  if (other == [InspectionReportCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionReportCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionReportCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionReportCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionReportCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (InspectionReportCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (InspectionReportCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (InspectionReportCategory_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (InspectionReportCategory_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (InspectionReportCategory_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (InspectionReportCategory_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (InspectionReportCategory_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (InspectionReportCategory_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (InspectionReportCategory_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (InspectionReportCategory_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 1;
  return self;
}
@end

@interface InspectionReportReply ()
@property int32_t id;
@property int32_t inspectionReportId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation InspectionReportReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasInspectionReportId {
  return !!hasInspectionReportId_;
}
- (void) setHasInspectionReportId:(BOOL) value_ {
  hasInspectionReportId_ = !!value_;
}
@synthesize inspectionReportId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.inspectionReportId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static InspectionReportReply* defaultInspectionReportReplyInstance = nil;
+ (void) initialize {
  if (self == [InspectionReportReply class]) {
    defaultInspectionReportReplyInstance = [[InspectionReportReply alloc] init];
  }
}
+ (InspectionReportReply*) defaultInstance {
  return defaultInspectionReportReplyInstance;
}
- (InspectionReportReply*) defaultInstance {
  return defaultInspectionReportReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasInspectionReportId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasInspectionReportId) {
    [output writeInt32:2 value:self.inspectionReportId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasInspectionReportId) {
    size_ += computeInt32Size(2, self.inspectionReportId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionReportReply*) parseFromData:(NSData*) data {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromData:data] build];
}
+ (InspectionReportReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportReply*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromInputStream:input] build];
}
+ (InspectionReportReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionReportReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportReply*)[[[InspectionReportReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportReply_Builder*) builder {
  return [[[InspectionReportReply_Builder alloc] init] autorelease];
}
+ (InspectionReportReply_Builder*) builderWithPrototype:(InspectionReportReply*) prototype {
  return [[InspectionReportReply builder] mergeFrom:prototype];
}
- (InspectionReportReply_Builder*) builder {
  return [InspectionReportReply builder];
}
- (InspectionReportReply_Builder*) toBuilder {
  return [InspectionReportReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasInspectionReportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inspectionReportId", [NSNumber numberWithInt:self.inspectionReportId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionReportReply class]]) {
    return NO;
  }
  InspectionReportReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasInspectionReportId == otherMessage.hasInspectionReportId &&
      (!self.hasInspectionReportId || self.inspectionReportId == otherMessage.inspectionReportId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasInspectionReportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.inspectionReportId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionReportReply_Builder()
@property (retain) InspectionReportReply* result;
@end

@implementation InspectionReportReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionReportReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionReportReply_Builder*) clear {
  self.result = [[[InspectionReportReply alloc] init] autorelease];
  return self;
}
- (InspectionReportReply_Builder*) clone {
  return [InspectionReportReply builderWithPrototype:result];
}
- (InspectionReportReply*) defaultInstance {
  return [InspectionReportReply defaultInstance];
}
- (InspectionReportReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionReportReply*) buildPartial {
  InspectionReportReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionReportReply_Builder*) mergeFrom:(InspectionReportReply*) other {
  if (other == [InspectionReportReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasInspectionReportId) {
    [self setInspectionReportId:other.inspectionReportId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionReportReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionReportReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setInspectionReportId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionReportReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionReportReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasInspectionReportId {
  return result.hasInspectionReportId;
}
- (int32_t) inspectionReportId {
  return result.inspectionReportId;
}
- (InspectionReportReply_Builder*) setInspectionReportId:(int32_t) value {
  result.hasInspectionReportId = YES;
  result.inspectionReportId = value;
  return self;
}
- (InspectionReportReply_Builder*) clearInspectionReportId {
  result.hasInspectionReportId = NO;
  result.inspectionReportId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (InspectionReportReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (InspectionReportReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (InspectionReportReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (InspectionReportReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (InspectionReportReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (InspectionReportReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (InspectionReportReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (InspectionReportReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (InspectionReportReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (InspectionReportReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (InspectionReportReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (InspectionReportReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (InspectionReportReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (InspectionReportReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

@interface PageInspectionReport ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * inspectionReportsArray;
@end

@implementation PageInspectionReport

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize inspectionReportsArray;
@dynamic inspectionReports;
- (void) dealloc {
  self.page = nil;
  self.inspectionReportsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageInspectionReport* defaultPageInspectionReportInstance = nil;
+ (void) initialize {
  if (self == [PageInspectionReport class]) {
    defaultPageInspectionReportInstance = [[PageInspectionReport alloc] init];
  }
}
+ (PageInspectionReport*) defaultInstance {
  return defaultPageInspectionReportInstance;
}
- (PageInspectionReport*) defaultInstance {
  return defaultPageInspectionReportInstance;
}
- (PBArray *)inspectionReports {
  return inspectionReportsArray;
}
- (InspectionReport*)inspectionReportsAtIndex:(NSUInteger)index {
  return [inspectionReportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (InspectionReport* element in self.inspectionReports) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (InspectionReport *element in self.inspectionReportsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (InspectionReport *element in self.inspectionReportsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageInspectionReport*) parseFromData:(NSData*) data {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromData:data] build];
}
+ (PageInspectionReport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageInspectionReport*) parseFromInputStream:(NSInputStream*) input {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromInputStream:input] build];
}
+ (PageInspectionReport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageInspectionReport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromCodedInputStream:input] build];
}
+ (PageInspectionReport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageInspectionReport*)[[[PageInspectionReport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageInspectionReport_Builder*) builder {
  return [[[PageInspectionReport_Builder alloc] init] autorelease];
}
+ (PageInspectionReport_Builder*) builderWithPrototype:(PageInspectionReport*) prototype {
  return [[PageInspectionReport builder] mergeFrom:prototype];
}
- (PageInspectionReport_Builder*) builder {
  return [PageInspectionReport builder];
}
- (PageInspectionReport_Builder*) toBuilder {
  return [PageInspectionReport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (InspectionReport* element in self.inspectionReportsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionReports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageInspectionReport class]]) {
    return NO;
  }
  PageInspectionReport *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.inspectionReportsArray isEqualToArray:otherMessage.inspectionReportsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (InspectionReport* element in self.inspectionReportsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageInspectionReport_Builder()
@property (retain) PageInspectionReport* result;
@end

@implementation PageInspectionReport_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageInspectionReport alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageInspectionReport_Builder*) clear {
  self.result = [[[PageInspectionReport alloc] init] autorelease];
  return self;
}
- (PageInspectionReport_Builder*) clone {
  return [PageInspectionReport builderWithPrototype:result];
}
- (PageInspectionReport*) defaultInstance {
  return [PageInspectionReport defaultInstance];
}
- (PageInspectionReport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageInspectionReport*) buildPartial {
  PageInspectionReport* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageInspectionReport_Builder*) mergeFrom:(PageInspectionReport*) other {
  if (other == [PageInspectionReport defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.inspectionReportsArray.count > 0) {
    if (result.inspectionReportsArray == nil) {
      result.inspectionReportsArray = [[other.inspectionReportsArray copyWithZone:[other.inspectionReportsArray zone]] autorelease];
    } else {
      [result.inspectionReportsArray appendArray:other.inspectionReportsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageInspectionReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageInspectionReport_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        InspectionReport_Builder* subBuilder = [InspectionReport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInspectionReports:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageInspectionReport_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageInspectionReport_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageInspectionReport_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageInspectionReport_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)inspectionReports {
  return result.inspectionReportsArray;
}
- (InspectionReport*)inspectionReportsAtIndex:(NSUInteger)index {
  return [result inspectionReportsAtIndex:index];
}
- (PageInspectionReport_Builder *)addInspectionReports:(InspectionReport*)value {
  if (result.inspectionReportsArray == nil) {
    result.inspectionReportsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.inspectionReportsArray addObject:value];
  return self;
}
- (PageInspectionReport_Builder *)setInspectionReportsArray:(NSArray *)array {
  result.inspectionReportsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageInspectionReport_Builder *)setInspectionReportsValues:(const InspectionReport* *)values count:(NSUInteger)count {
  result.inspectionReportsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageInspectionReport_Builder *)clearInspectionReports {
  result.inspectionReportsArray = nil;
  return self;
}
@end

@interface InspectionReportParams ()
@property (retain) InspectionReportCategory* inspectionReportCategory;
@property (retain) InspectionType* inspectionType;
@property (retain) InspectionTarget* inspectionTarget;
@property int32_t page;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) PBAppendableArray * companiesArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t id;
@end

@implementation InspectionReportParams

- (BOOL) hasInspectionReportCategory {
  return !!hasInspectionReportCategory_;
}
- (void) setHasInspectionReportCategory:(BOOL) value_ {
  hasInspectionReportCategory_ = !!value_;
}
@synthesize inspectionReportCategory;
- (BOOL) hasInspectionType {
  return !!hasInspectionType_;
}
- (void) setHasInspectionType:(BOOL) value_ {
  hasInspectionType_ = !!value_;
}
@synthesize inspectionType;
- (BOOL) hasInspectionTarget {
  return !!hasInspectionTarget_;
}
- (void) setHasInspectionTarget:(BOOL) value_ {
  hasInspectionTarget_ = !!value_;
}
@synthesize inspectionTarget;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
@synthesize departmentsArray;
@dynamic departments;
@synthesize companiesArray;
@dynamic companies;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.inspectionReportCategory = nil;
  self.inspectionType = nil;
  self.inspectionTarget = nil;
  self.usersArray = nil;
  self.departmentsArray = nil;
  self.companiesArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.inspectionReportCategory = [InspectionReportCategory defaultInstance];
    self.inspectionType = [InspectionType defaultInstance];
    self.inspectionTarget = [InspectionTarget defaultInstance];
    self.page = 0;
    self.startDate = @"";
    self.endDate = @"";
    self.id = 0;
  }
  return self;
}
static InspectionReportParams* defaultInspectionReportParamsInstance = nil;
+ (void) initialize {
  if (self == [InspectionReportParams class]) {
    defaultInspectionReportParamsInstance = [[InspectionReportParams alloc] init];
  }
}
+ (InspectionReportParams*) defaultInstance {
  return defaultInspectionReportParamsInstance;
}
- (InspectionReportParams*) defaultInstance {
  return defaultInspectionReportParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (PBArray *)companies {
  return companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [companiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasInspectionReportCategory) {
    if (!self.inspectionReportCategory.isInitialized) {
      return NO;
    }
  }
  if (self.hasInspectionType) {
    if (!self.inspectionType.isInitialized) {
      return NO;
    }
  }
  if (self.hasInspectionTarget) {
    if (!self.inspectionTarget.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Company* element in self.companies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInspectionReportCategory) {
    [output writeMessage:1 value:self.inspectionReportCategory];
  }
  if (self.hasInspectionType) {
    [output writeMessage:2 value:self.inspectionType];
  }
  if (self.hasInspectionTarget) {
    [output writeMessage:3 value:self.inspectionTarget];
  }
  if (self.hasPage) {
    [output writeInt32:4 value:self.page];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:5 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:6 value:element];
  }
  for (Company *element in self.companiesArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:8 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:9 value:self.endDate];
  }
  if (self.hasId) {
    [output writeInt32:10 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInspectionReportCategory) {
    size_ += computeMessageSize(1, self.inspectionReportCategory);
  }
  if (self.hasInspectionType) {
    size_ += computeMessageSize(2, self.inspectionType);
  }
  if (self.hasInspectionTarget) {
    size_ += computeMessageSize(3, self.inspectionTarget);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(4, self.page);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(5, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(6, element);
  }
  for (Company *element in self.companiesArray) {
    size_ += computeMessageSize(7, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(8, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(9, self.endDate);
  }
  if (self.hasId) {
    size_ += computeInt32Size(10, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (InspectionReportParams*) parseFromData:(NSData*) data {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromData:data] build];
}
+ (InspectionReportParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportParams*) parseFromInputStream:(NSInputStream*) input {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromInputStream:input] build];
}
+ (InspectionReportParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromCodedInputStream:input] build];
}
+ (InspectionReportParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (InspectionReportParams*)[[[InspectionReportParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (InspectionReportParams_Builder*) builder {
  return [[[InspectionReportParams_Builder alloc] init] autorelease];
}
+ (InspectionReportParams_Builder*) builderWithPrototype:(InspectionReportParams*) prototype {
  return [[InspectionReportParams builder] mergeFrom:prototype];
}
- (InspectionReportParams_Builder*) builder {
  return [InspectionReportParams builder];
}
- (InspectionReportParams_Builder*) toBuilder {
  return [InspectionReportParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInspectionReportCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionReportCategory"];
    [self.inspectionReportCategory writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInspectionType) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionType"];
    [self.inspectionType writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasInspectionTarget) {
    [output appendFormat:@"%@%@ {\n", indent, @"inspectionTarget"];
    [self.inspectionTarget writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Company* element in self.companiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"companies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[InspectionReportParams class]]) {
    return NO;
  }
  InspectionReportParams *otherMessage = other;
  return
      self.hasInspectionReportCategory == otherMessage.hasInspectionReportCategory &&
      (!self.hasInspectionReportCategory || [self.inspectionReportCategory isEqual:otherMessage.inspectionReportCategory]) &&
      self.hasInspectionType == otherMessage.hasInspectionType &&
      (!self.hasInspectionType || [self.inspectionType isEqual:otherMessage.inspectionType]) &&
      self.hasInspectionTarget == otherMessage.hasInspectionTarget &&
      (!self.hasInspectionTarget || [self.inspectionTarget isEqual:otherMessage.inspectionTarget]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      [self.companiesArray isEqualToArray:otherMessage.companiesArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasInspectionReportCategory) {
    hashCode = hashCode * 31 + [self.inspectionReportCategory hash];
  }
  if (self.hasInspectionType) {
    hashCode = hashCode * 31 + [self.inspectionType hash];
  }
  if (self.hasInspectionTarget) {
    hashCode = hashCode * 31 + [self.inspectionTarget hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Company* element in self.companiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface InspectionReportParams_Builder()
@property (retain) InspectionReportParams* result;
@end

@implementation InspectionReportParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[InspectionReportParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (InspectionReportParams_Builder*) clear {
  self.result = [[[InspectionReportParams alloc] init] autorelease];
  return self;
}
- (InspectionReportParams_Builder*) clone {
  return [InspectionReportParams builderWithPrototype:result];
}
- (InspectionReportParams*) defaultInstance {
  return [InspectionReportParams defaultInstance];
}
- (InspectionReportParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (InspectionReportParams*) buildPartial {
  InspectionReportParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (InspectionReportParams_Builder*) mergeFrom:(InspectionReportParams*) other {
  if (other == [InspectionReportParams defaultInstance]) {
    return self;
  }
  if (other.hasInspectionReportCategory) {
    [self mergeInspectionReportCategory:other.inspectionReportCategory];
  }
  if (other.hasInspectionType) {
    [self mergeInspectionType:other.inspectionType];
  }
  if (other.hasInspectionTarget) {
    [self mergeInspectionTarget:other.inspectionTarget];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.companiesArray.count > 0) {
    if (result.companiesArray == nil) {
      result.companiesArray = [[other.companiesArray copyWithZone:[other.companiesArray zone]] autorelease];
    } else {
      [result.companiesArray appendArray:other.companiesArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (InspectionReportParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (InspectionReportParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        InspectionReportCategory_Builder* subBuilder = [InspectionReportCategory builder];
        if (self.hasInspectionReportCategory) {
          [subBuilder mergeFrom:self.inspectionReportCategory];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionReportCategory:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        InspectionType_Builder* subBuilder = [InspectionType builder];
        if (self.hasInspectionType) {
          [subBuilder mergeFrom:self.inspectionType];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionType:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        InspectionTarget_Builder* subBuilder = [InspectionTarget builder];
        if (self.hasInspectionTarget) {
          [subBuilder mergeFrom:self.inspectionTarget];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInspectionTarget:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setPage:[input readInt32]];
        break;
      }
      case 42: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Company_Builder* subBuilder = [Company builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompanies:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        [self setStartDate:[input readString]];
        break;
      }
      case 74: {
        [self setEndDate:[input readString]];
        break;
      }
      case 80: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasInspectionReportCategory {
  return result.hasInspectionReportCategory;
}
- (InspectionReportCategory*) inspectionReportCategory {
  return result.inspectionReportCategory;
}
- (InspectionReportParams_Builder*) setInspectionReportCategory:(InspectionReportCategory*) value {
  result.hasInspectionReportCategory = YES;
  result.inspectionReportCategory = value;
  return self;
}
- (InspectionReportParams_Builder*) setInspectionReportCategoryBuilder:(InspectionReportCategory_Builder*) builderForValue {
  return [self setInspectionReportCategory:[builderForValue build]];
}
- (InspectionReportParams_Builder*) mergeInspectionReportCategory:(InspectionReportCategory*) value {
  if (result.hasInspectionReportCategory &&
      result.inspectionReportCategory != [InspectionReportCategory defaultInstance]) {
    result.inspectionReportCategory =
      [[[InspectionReportCategory builderWithPrototype:result.inspectionReportCategory] mergeFrom:value] buildPartial];
  } else {
    result.inspectionReportCategory = value;
  }
  result.hasInspectionReportCategory = YES;
  return self;
}
- (InspectionReportParams_Builder*) clearInspectionReportCategory {
  result.hasInspectionReportCategory = NO;
  result.inspectionReportCategory = [InspectionReportCategory defaultInstance];
  return self;
}
- (BOOL) hasInspectionType {
  return result.hasInspectionType;
}
- (InspectionType*) inspectionType {
  return result.inspectionType;
}
- (InspectionReportParams_Builder*) setInspectionType:(InspectionType*) value {
  result.hasInspectionType = YES;
  result.inspectionType = value;
  return self;
}
- (InspectionReportParams_Builder*) setInspectionTypeBuilder:(InspectionType_Builder*) builderForValue {
  return [self setInspectionType:[builderForValue build]];
}
- (InspectionReportParams_Builder*) mergeInspectionType:(InspectionType*) value {
  if (result.hasInspectionType &&
      result.inspectionType != [InspectionType defaultInstance]) {
    result.inspectionType =
      [[[InspectionType builderWithPrototype:result.inspectionType] mergeFrom:value] buildPartial];
  } else {
    result.inspectionType = value;
  }
  result.hasInspectionType = YES;
  return self;
}
- (InspectionReportParams_Builder*) clearInspectionType {
  result.hasInspectionType = NO;
  result.inspectionType = [InspectionType defaultInstance];
  return self;
}
- (BOOL) hasInspectionTarget {
  return result.hasInspectionTarget;
}
- (InspectionTarget*) inspectionTarget {
  return result.inspectionTarget;
}
- (InspectionReportParams_Builder*) setInspectionTarget:(InspectionTarget*) value {
  result.hasInspectionTarget = YES;
  result.inspectionTarget = value;
  return self;
}
- (InspectionReportParams_Builder*) setInspectionTargetBuilder:(InspectionTarget_Builder*) builderForValue {
  return [self setInspectionTarget:[builderForValue build]];
}
- (InspectionReportParams_Builder*) mergeInspectionTarget:(InspectionTarget*) value {
  if (result.hasInspectionTarget &&
      result.inspectionTarget != [InspectionTarget defaultInstance]) {
    result.inspectionTarget =
      [[[InspectionTarget builderWithPrototype:result.inspectionTarget] mergeFrom:value] buildPartial];
  } else {
    result.inspectionTarget = value;
  }
  result.hasInspectionTarget = YES;
  return self;
}
- (InspectionReportParams_Builder*) clearInspectionTarget {
  result.hasInspectionTarget = NO;
  result.inspectionTarget = [InspectionTarget defaultInstance];
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (InspectionReportParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (InspectionReportParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (InspectionReportParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (InspectionReportParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (InspectionReportParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (InspectionReportParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (PBAppendableArray *)companies {
  return result.companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [result companiesAtIndex:index];
}
- (InspectionReportParams_Builder *)addCompanies:(Company*)value {
  if (result.companiesArray == nil) {
    result.companiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.companiesArray addObject:value];
  return self;
}
- (InspectionReportParams_Builder *)setCompaniesArray:(NSArray *)array {
  result.companiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)setCompaniesValues:(const Company* *)values count:(NSUInteger)count {
  result.companiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (InspectionReportParams_Builder *)clearCompanies {
  result.companiesArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (InspectionReportParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (InspectionReportParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (InspectionReportParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (InspectionReportParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (InspectionReportParams_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (InspectionReportParams_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

