// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CompetitionGoods.pb.h"

@implementation CompetitionGoodsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CompetitionGoodsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [CustomerRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CompetitionGoods ()
@property (retain) User* user;
@property int32_t id;
@property (retain) Customer* customer;
@property int32_t states;
@property (retain) NSString* comment;
@property (retain) Location* location;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * productsArray;
@end

@implementation CompetitionGoods

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasCustomer {
  return !!hasCustomer_;
}
- (void) setHasCustomer:(BOOL) value_ {
  hasCustomer_ = !!value_;
}
@synthesize customer;
- (BOOL) hasStates {
  return !!hasStates_;
}
- (void) setHasStates:(BOOL) value_ {
  hasStates_ = !!value_;
}
@synthesize states;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize productsArray;
@dynamic products;
- (void) dealloc {
  self.user = nil;
  self.customer = nil;
  self.comment = nil;
  self.location = nil;
  self.createDate = nil;
  self.productsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.user = [User defaultInstance];
    self.id = 0;
    self.customer = [Customer defaultInstance];
    self.states = 0;
    self.comment = @"";
    self.location = [Location defaultInstance];
    self.createDate = @"";
  }
  return self;
}
static CompetitionGoods* defaultCompetitionGoodsInstance = nil;
+ (void) initialize {
  if (self == [CompetitionGoods class]) {
    defaultCompetitionGoodsInstance = [[CompetitionGoods alloc] init];
  }
}
+ (CompetitionGoods*) defaultInstance {
  return defaultCompetitionGoodsInstance;
}
- (CompetitionGoods*) defaultInstance {
  return defaultCompetitionGoodsInstance;
}
- (PBArray *)products {
  return productsArray;
}
- (CompetitionProduct*)productsAtIndex:(NSUInteger)index {
  return [productsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasCustomer) {
    if (!self.customer.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (CompetitionProduct* element in self.products) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasCustomer) {
    [output writeMessage:3 value:self.customer];
  }
  if (self.hasStates) {
    [output writeInt32:4 value:self.states];
  }
  if (self.hasComment) {
    [output writeString:5 value:self.comment];
  }
  if (self.hasLocation) {
    [output writeMessage:6 value:self.location];
  }
  if (self.hasCreateDate) {
    [output writeString:7 value:self.createDate];
  }
  for (CompetitionProduct *element in self.productsArray) {
    [output writeMessage:8 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasId) {
    size_ += computeInt32Size(2, self.id);
  }
  if (self.hasCustomer) {
    size_ += computeMessageSize(3, self.customer);
  }
  if (self.hasStates) {
    size_ += computeInt32Size(4, self.states);
  }
  if (self.hasComment) {
    size_ += computeStringSize(5, self.comment);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(6, self.location);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(7, self.createDate);
  }
  for (CompetitionProduct *element in self.productsArray) {
    size_ += computeMessageSize(8, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompetitionGoods*) parseFromData:(NSData*) data {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromData:data] build];
}
+ (CompetitionGoods*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoods*) parseFromInputStream:(NSInputStream*) input {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromInputStream:input] build];
}
+ (CompetitionGoods*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoods*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromCodedInputStream:input] build];
}
+ (CompetitionGoods*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoods*)[[[CompetitionGoods builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoods_Builder*) builder {
  return [[[CompetitionGoods_Builder alloc] init] autorelease];
}
+ (CompetitionGoods_Builder*) builderWithPrototype:(CompetitionGoods*) prototype {
  return [[CompetitionGoods builder] mergeFrom:prototype];
}
- (CompetitionGoods_Builder*) builder {
  return [CompetitionGoods builder];
}
- (CompetitionGoods_Builder*) toBuilder {
  return [CompetitionGoods builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCustomer) {
    [output appendFormat:@"%@%@ {\n", indent, @"customer"];
    [self.customer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStates) {
    [output appendFormat:@"%@%@: %@\n", indent, @"states", [NSNumber numberWithInt:self.states]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (CompetitionProduct* element in self.productsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"products"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompetitionGoods class]]) {
    return NO;
  }
  CompetitionGoods *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCustomer == otherMessage.hasCustomer &&
      (!self.hasCustomer || [self.customer isEqual:otherMessage.customer]) &&
      self.hasStates == otherMessage.hasStates &&
      (!self.hasStates || self.states == otherMessage.states) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.productsArray isEqualToArray:otherMessage.productsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCustomer) {
    hashCode = hashCode * 31 + [self.customer hash];
  }
  if (self.hasStates) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.states] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (CompetitionProduct* element in self.productsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompetitionGoods_Builder()
@property (retain) CompetitionGoods* result;
@end

@implementation CompetitionGoods_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompetitionGoods alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompetitionGoods_Builder*) clear {
  self.result = [[[CompetitionGoods alloc] init] autorelease];
  return self;
}
- (CompetitionGoods_Builder*) clone {
  return [CompetitionGoods builderWithPrototype:result];
}
- (CompetitionGoods*) defaultInstance {
  return [CompetitionGoods defaultInstance];
}
- (CompetitionGoods*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompetitionGoods*) buildPartial {
  CompetitionGoods* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompetitionGoods_Builder*) mergeFrom:(CompetitionGoods*) other {
  if (other == [CompetitionGoods defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCustomer) {
    [self mergeCustomer:other.customer];
  }
  if (other.hasStates) {
    [self setStates:other.states];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.productsArray.count > 0) {
    if (result.productsArray == nil) {
      result.productsArray = [[other.productsArray copyWithZone:[other.productsArray zone]] autorelease];
    } else {
      [result.productsArray appendArray:other.productsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompetitionGoods_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompetitionGoods_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        Customer_Builder* subBuilder = [Customer builder];
        if (self.hasCustomer) {
          [subBuilder mergeFrom:self.customer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustomer:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setStates:[input readInt32]];
        break;
      }
      case 42: {
        [self setComment:[input readString]];
        break;
      }
      case 50: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 66: {
        CompetitionProduct_Builder* subBuilder = [CompetitionProduct builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProducts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (CompetitionGoods_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (CompetitionGoods_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CompetitionGoods_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (CompetitionGoods_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CompetitionGoods_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CompetitionGoods_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCustomer {
  return result.hasCustomer;
}
- (Customer*) customer {
  return result.customer;
}
- (CompetitionGoods_Builder*) setCustomer:(Customer*) value {
  result.hasCustomer = YES;
  result.customer = value;
  return self;
}
- (CompetitionGoods_Builder*) setCustomerBuilder:(Customer_Builder*) builderForValue {
  return [self setCustomer:[builderForValue build]];
}
- (CompetitionGoods_Builder*) mergeCustomer:(Customer*) value {
  if (result.hasCustomer &&
      result.customer != [Customer defaultInstance]) {
    result.customer =
      [[[Customer builderWithPrototype:result.customer] mergeFrom:value] buildPartial];
  } else {
    result.customer = value;
  }
  result.hasCustomer = YES;
  return self;
}
- (CompetitionGoods_Builder*) clearCustomer {
  result.hasCustomer = NO;
  result.customer = [Customer defaultInstance];
  return self;
}
- (BOOL) hasStates {
  return result.hasStates;
}
- (int32_t) states {
  return result.states;
}
- (CompetitionGoods_Builder*) setStates:(int32_t) value {
  result.hasStates = YES;
  result.states = value;
  return self;
}
- (CompetitionGoods_Builder*) clearStates {
  result.hasStates = NO;
  result.states = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (CompetitionGoods_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (CompetitionGoods_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (CompetitionGoods_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (CompetitionGoods_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (CompetitionGoods_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (CompetitionGoods_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (CompetitionGoods_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (CompetitionGoods_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)products {
  return result.productsArray;
}
- (CompetitionProduct*)productsAtIndex:(NSUInteger)index {
  return [result productsAtIndex:index];
}
- (CompetitionGoods_Builder *)addProducts:(CompetitionProduct*)value {
  if (result.productsArray == nil) {
    result.productsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.productsArray addObject:value];
  return self;
}
- (CompetitionGoods_Builder *)setProductsArray:(NSArray *)array {
  result.productsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoods_Builder *)setProductsValues:(const CompetitionProduct* *)values count:(NSUInteger)count {
  result.productsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoods_Builder *)clearProducts {
  result.productsArray = nil;
  return self;
}
@end

@interface CompetitionProductCategory ()
@property int32_t id;
@property (retain) NSString* name;
@end

@implementation CompetitionProductCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static CompetitionProductCategory* defaultCompetitionProductCategoryInstance = nil;
+ (void) initialize {
  if (self == [CompetitionProductCategory class]) {
    defaultCompetitionProductCategoryInstance = [[CompetitionProductCategory alloc] init];
  }
}
+ (CompetitionProductCategory*) defaultInstance {
  return defaultCompetitionProductCategoryInstance;
}
- (CompetitionProductCategory*) defaultInstance {
  return defaultCompetitionProductCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompetitionProductCategory*) parseFromData:(NSData*) data {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromData:data] build];
}
+ (CompetitionProductCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProductCategory*) parseFromInputStream:(NSInputStream*) input {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromInputStream:input] build];
}
+ (CompetitionProductCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProductCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromCodedInputStream:input] build];
}
+ (CompetitionProductCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProductCategory*)[[[CompetitionProductCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProductCategory_Builder*) builder {
  return [[[CompetitionProductCategory_Builder alloc] init] autorelease];
}
+ (CompetitionProductCategory_Builder*) builderWithPrototype:(CompetitionProductCategory*) prototype {
  return [[CompetitionProductCategory builder] mergeFrom:prototype];
}
- (CompetitionProductCategory_Builder*) builder {
  return [CompetitionProductCategory builder];
}
- (CompetitionProductCategory_Builder*) toBuilder {
  return [CompetitionProductCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompetitionProductCategory class]]) {
    return NO;
  }
  CompetitionProductCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompetitionProductCategory_Builder()
@property (retain) CompetitionProductCategory* result;
@end

@implementation CompetitionProductCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompetitionProductCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompetitionProductCategory_Builder*) clear {
  self.result = [[[CompetitionProductCategory alloc] init] autorelease];
  return self;
}
- (CompetitionProductCategory_Builder*) clone {
  return [CompetitionProductCategory builderWithPrototype:result];
}
- (CompetitionProductCategory*) defaultInstance {
  return [CompetitionProductCategory defaultInstance];
}
- (CompetitionProductCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompetitionProductCategory*) buildPartial {
  CompetitionProductCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompetitionProductCategory_Builder*) mergeFrom:(CompetitionProductCategory*) other {
  if (other == [CompetitionProductCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompetitionProductCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompetitionProductCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CompetitionProductCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CompetitionProductCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CompetitionProductCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CompetitionProductCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface CompetitionProduct ()
@property int32_t id;
@property (retain) NSString* name;
@property Float64 num;
@property (retain) NSString* unit;
@property Float64 price;
@property (retain) CompetitionProductCategory* category;
@end

@implementation CompetitionProduct

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasNum {
  return !!hasNum_;
}
- (void) setHasNum:(BOOL) value_ {
  hasNum_ = !!value_;
}
@synthesize num;
- (BOOL) hasUnit {
  return !!hasUnit_;
}
- (void) setHasUnit:(BOOL) value_ {
  hasUnit_ = !!value_;
}
@synthesize unit;
- (BOOL) hasPrice {
  return !!hasPrice_;
}
- (void) setHasPrice:(BOOL) value_ {
  hasPrice_ = !!value_;
}
@synthesize price;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (void) dealloc {
  self.name = nil;
  self.unit = nil;
  self.category = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.num = 0;
    self.unit = @"";
    self.price = 0;
    self.category = [CompetitionProductCategory defaultInstance];
  }
  return self;
}
static CompetitionProduct* defaultCompetitionProductInstance = nil;
+ (void) initialize {
  if (self == [CompetitionProduct class]) {
    defaultCompetitionProductInstance = [[CompetitionProduct alloc] init];
  }
}
+ (CompetitionProduct*) defaultInstance {
  return defaultCompetitionProductInstance;
}
- (CompetitionProduct*) defaultInstance {
  return defaultCompetitionProductInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasNum) {
    [output writeDouble:3 value:self.num];
  }
  if (self.hasUnit) {
    [output writeString:4 value:self.unit];
  }
  if (self.hasPrice) {
    [output writeDouble:5 value:self.price];
  }
  if (self.hasCategory) {
    [output writeMessage:6 value:self.category];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasNum) {
    size_ += computeDoubleSize(3, self.num);
  }
  if (self.hasUnit) {
    size_ += computeStringSize(4, self.unit);
  }
  if (self.hasPrice) {
    size_ += computeDoubleSize(5, self.price);
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(6, self.category);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompetitionProduct*) parseFromData:(NSData*) data {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromData:data] build];
}
+ (CompetitionProduct*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProduct*) parseFromInputStream:(NSInputStream*) input {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromInputStream:input] build];
}
+ (CompetitionProduct*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromCodedInputStream:input] build];
}
+ (CompetitionProduct*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionProduct*)[[[CompetitionProduct builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionProduct_Builder*) builder {
  return [[[CompetitionProduct_Builder alloc] init] autorelease];
}
+ (CompetitionProduct_Builder*) builderWithPrototype:(CompetitionProduct*) prototype {
  return [[CompetitionProduct builder] mergeFrom:prototype];
}
- (CompetitionProduct_Builder*) builder {
  return [CompetitionProduct builder];
}
- (CompetitionProduct_Builder*) toBuilder {
  return [CompetitionProduct builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"num", [NSNumber numberWithDouble:self.num]];
  }
  if (self.hasUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unit", self.unit];
  }
  if (self.hasPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"price", [NSNumber numberWithDouble:self.price]];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompetitionProduct class]]) {
    return NO;
  }
  CompetitionProduct *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNum == otherMessage.hasNum &&
      (!self.hasNum || self.num == otherMessage.num) &&
      self.hasUnit == otherMessage.hasUnit &&
      (!self.hasUnit || [self.unit isEqual:otherMessage.unit]) &&
      self.hasPrice == otherMessage.hasPrice &&
      (!self.hasPrice || self.price == otherMessage.price) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.num] hash];
  }
  if (self.hasUnit) {
    hashCode = hashCode * 31 + [self.unit hash];
  }
  if (self.hasPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.price] hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompetitionProduct_Builder()
@property (retain) CompetitionProduct* result;
@end

@implementation CompetitionProduct_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompetitionProduct alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompetitionProduct_Builder*) clear {
  self.result = [[[CompetitionProduct alloc] init] autorelease];
  return self;
}
- (CompetitionProduct_Builder*) clone {
  return [CompetitionProduct builderWithPrototype:result];
}
- (CompetitionProduct*) defaultInstance {
  return [CompetitionProduct defaultInstance];
}
- (CompetitionProduct*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompetitionProduct*) buildPartial {
  CompetitionProduct* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompetitionProduct_Builder*) mergeFrom:(CompetitionProduct*) other {
  if (other == [CompetitionProduct defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNum) {
    [self setNum:other.num];
  }
  if (other.hasUnit) {
    [self setUnit:other.unit];
  }
  if (other.hasPrice) {
    [self setPrice:other.price];
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompetitionProduct_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompetitionProduct_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 25: {
        [self setNum:[input readDouble]];
        break;
      }
      case 34: {
        [self setUnit:[input readString]];
        break;
      }
      case 41: {
        [self setPrice:[input readDouble]];
        break;
      }
      case 50: {
        CompetitionProductCategory_Builder* subBuilder = [CompetitionProductCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CompetitionProduct_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CompetitionProduct_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CompetitionProduct_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CompetitionProduct_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasNum {
  return result.hasNum;
}
- (Float64) num {
  return result.num;
}
- (CompetitionProduct_Builder*) setNum:(Float64) value {
  result.hasNum = YES;
  result.num = value;
  return self;
}
- (CompetitionProduct_Builder*) clearNum {
  result.hasNum = NO;
  result.num = 0;
  return self;
}
- (BOOL) hasUnit {
  return result.hasUnit;
}
- (NSString*) unit {
  return result.unit;
}
- (CompetitionProduct_Builder*) setUnit:(NSString*) value {
  result.hasUnit = YES;
  result.unit = value;
  return self;
}
- (CompetitionProduct_Builder*) clearUnit {
  result.hasUnit = NO;
  result.unit = @"";
  return self;
}
- (BOOL) hasPrice {
  return result.hasPrice;
}
- (Float64) price {
  return result.price;
}
- (CompetitionProduct_Builder*) setPrice:(Float64) value {
  result.hasPrice = YES;
  result.price = value;
  return self;
}
- (CompetitionProduct_Builder*) clearPrice {
  result.hasPrice = NO;
  result.price = 0;
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (CompetitionProductCategory*) category {
  return result.category;
}
- (CompetitionProduct_Builder*) setCategory:(CompetitionProductCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (CompetitionProduct_Builder*) setCategoryBuilder:(CompetitionProductCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (CompetitionProduct_Builder*) mergeCategory:(CompetitionProductCategory*) value {
  if (result.hasCategory &&
      result.category != [CompetitionProductCategory defaultInstance]) {
    result.category =
      [[[CompetitionProductCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (CompetitionProduct_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [CompetitionProductCategory defaultInstance];
  return self;
}
@end

@interface PageCompetitionGoods ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * competitionGoodsArray;
@end

@implementation PageCompetitionGoods

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize competitionGoodsArray;
@dynamic competitionGoods;
- (void) dealloc {
  self.page = nil;
  self.competitionGoodsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageCompetitionGoods* defaultPageCompetitionGoodsInstance = nil;
+ (void) initialize {
  if (self == [PageCompetitionGoods class]) {
    defaultPageCompetitionGoodsInstance = [[PageCompetitionGoods alloc] init];
  }
}
+ (PageCompetitionGoods*) defaultInstance {
  return defaultPageCompetitionGoodsInstance;
}
- (PageCompetitionGoods*) defaultInstance {
  return defaultPageCompetitionGoodsInstance;
}
- (PBArray *)competitionGoods {
  return competitionGoodsArray;
}
- (CompetitionGoods*)competitionGoodsAtIndex:(NSUInteger)index {
  return [competitionGoodsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (CompetitionGoods* element in self.competitionGoods) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (CompetitionGoods *element in self.competitionGoodsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (CompetitionGoods *element in self.competitionGoodsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageCompetitionGoods*) parseFromData:(NSData*) data {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromData:data] build];
}
+ (PageCompetitionGoods*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageCompetitionGoods*) parseFromInputStream:(NSInputStream*) input {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromInputStream:input] build];
}
+ (PageCompetitionGoods*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCompetitionGoods*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromCodedInputStream:input] build];
}
+ (PageCompetitionGoods*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCompetitionGoods*)[[[PageCompetitionGoods builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCompetitionGoods_Builder*) builder {
  return [[[PageCompetitionGoods_Builder alloc] init] autorelease];
}
+ (PageCompetitionGoods_Builder*) builderWithPrototype:(PageCompetitionGoods*) prototype {
  return [[PageCompetitionGoods builder] mergeFrom:prototype];
}
- (PageCompetitionGoods_Builder*) builder {
  return [PageCompetitionGoods builder];
}
- (PageCompetitionGoods_Builder*) toBuilder {
  return [PageCompetitionGoods builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CompetitionGoods* element in self.competitionGoodsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"competitionGoods"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageCompetitionGoods class]]) {
    return NO;
  }
  PageCompetitionGoods *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.competitionGoodsArray isEqualToArray:otherMessage.competitionGoodsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (CompetitionGoods* element in self.competitionGoodsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageCompetitionGoods_Builder()
@property (retain) PageCompetitionGoods* result;
@end

@implementation PageCompetitionGoods_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageCompetitionGoods alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageCompetitionGoods_Builder*) clear {
  self.result = [[[PageCompetitionGoods alloc] init] autorelease];
  return self;
}
- (PageCompetitionGoods_Builder*) clone {
  return [PageCompetitionGoods builderWithPrototype:result];
}
- (PageCompetitionGoods*) defaultInstance {
  return [PageCompetitionGoods defaultInstance];
}
- (PageCompetitionGoods*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageCompetitionGoods*) buildPartial {
  PageCompetitionGoods* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageCompetitionGoods_Builder*) mergeFrom:(PageCompetitionGoods*) other {
  if (other == [PageCompetitionGoods defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.competitionGoodsArray.count > 0) {
    if (result.competitionGoodsArray == nil) {
      result.competitionGoodsArray = [[other.competitionGoodsArray copyWithZone:[other.competitionGoodsArray zone]] autorelease];
    } else {
      [result.competitionGoodsArray appendArray:other.competitionGoodsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageCompetitionGoods_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageCompetitionGoods_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CompetitionGoods_Builder* subBuilder = [CompetitionGoods builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompetitionGoods:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageCompetitionGoods_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageCompetitionGoods_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageCompetitionGoods_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageCompetitionGoods_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)competitionGoods {
  return result.competitionGoodsArray;
}
- (CompetitionGoods*)competitionGoodsAtIndex:(NSUInteger)index {
  return [result competitionGoodsAtIndex:index];
}
- (PageCompetitionGoods_Builder *)addCompetitionGoods:(CompetitionGoods*)value {
  if (result.competitionGoodsArray == nil) {
    result.competitionGoodsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.competitionGoodsArray addObject:value];
  return self;
}
- (PageCompetitionGoods_Builder *)setCompetitionGoodsArray:(NSArray *)array {
  result.competitionGoodsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageCompetitionGoods_Builder *)setCompetitionGoodsValues:(const CompetitionGoods* *)values count:(NSUInteger)count {
  result.competitionGoodsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageCompetitionGoods_Builder *)clearCompetitionGoods {
  result.competitionGoodsArray = nil;
  return self;
}
@end

@interface CompetitionGoodsParams ()
@property int32_t page;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * customerCategoryArray;
@property (retain) PBAppendableArray * customersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) PBAppendableArray * companiesArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@end

@implementation CompetitionGoodsParams

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
@synthesize customerCategoryArray;
@dynamic customerCategory;
@synthesize customersArray;
@dynamic customers;
@synthesize departmentsArray;
@dynamic departments;
@synthesize companiesArray;
@dynamic companies;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (void) dealloc {
  self.usersArray = nil;
  self.customerCategoryArray = nil;
  self.customersArray = nil;
  self.departmentsArray = nil;
  self.companiesArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.startDate = @"";
    self.endDate = @"";
  }
  return self;
}
static CompetitionGoodsParams* defaultCompetitionGoodsParamsInstance = nil;
+ (void) initialize {
  if (self == [CompetitionGoodsParams class]) {
    defaultCompetitionGoodsParamsInstance = [[CompetitionGoodsParams alloc] init];
  }
}
+ (CompetitionGoodsParams*) defaultInstance {
  return defaultCompetitionGoodsParamsInstance;
}
- (CompetitionGoodsParams*) defaultInstance {
  return defaultCompetitionGoodsParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)customerCategory {
  return customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [customerCategoryArray objectAtIndex:index];
}
- (PBArray *)customers {
  return customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [customersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (PBArray *)companies {
  return companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [companiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (CustomerCategory* element in self.customerCategory) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Customer* element in self.customers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Company* element in self.companies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeInt32:1 value:self.page];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:2 value:element];
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    [output writeMessage:3 value:element];
  }
  for (Customer *element in self.customersArray) {
    [output writeMessage:4 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:5 value:element];
  }
  for (Company *element in self.companiesArray) {
    [output writeMessage:6 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:7 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:8 value:self.endDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeInt32Size(1, self.page);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(2, element);
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    size_ += computeMessageSize(3, element);
  }
  for (Customer *element in self.customersArray) {
    size_ += computeMessageSize(4, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(5, element);
  }
  for (Company *element in self.companiesArray) {
    size_ += computeMessageSize(6, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(7, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(8, self.endDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CompetitionGoodsParams*) parseFromData:(NSData*) data {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromData:data] build];
}
+ (CompetitionGoodsParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoodsParams*) parseFromInputStream:(NSInputStream*) input {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromInputStream:input] build];
}
+ (CompetitionGoodsParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoodsParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromCodedInputStream:input] build];
}
+ (CompetitionGoodsParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CompetitionGoodsParams*)[[[CompetitionGoodsParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CompetitionGoodsParams_Builder*) builder {
  return [[[CompetitionGoodsParams_Builder alloc] init] autorelease];
}
+ (CompetitionGoodsParams_Builder*) builderWithPrototype:(CompetitionGoodsParams*) prototype {
  return [[CompetitionGoodsParams builder] mergeFrom:prototype];
}
- (CompetitionGoodsParams_Builder*) builder {
  return [CompetitionGoodsParams builder];
}
- (CompetitionGoodsParams_Builder*) toBuilder {
  return [CompetitionGoodsParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customerCategory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Customer* element in self.customersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Company* element in self.companiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"companies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CompetitionGoodsParams class]]) {
    return NO;
  }
  CompetitionGoodsParams *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.customerCategoryArray isEqualToArray:otherMessage.customerCategoryArray] &&
      [self.customersArray isEqualToArray:otherMessage.customersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      [self.companiesArray isEqualToArray:otherMessage.companiesArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Customer* element in self.customersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Company* element in self.companiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CompetitionGoodsParams_Builder()
@property (retain) CompetitionGoodsParams* result;
@end

@implementation CompetitionGoodsParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CompetitionGoodsParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CompetitionGoodsParams_Builder*) clear {
  self.result = [[[CompetitionGoodsParams alloc] init] autorelease];
  return self;
}
- (CompetitionGoodsParams_Builder*) clone {
  return [CompetitionGoodsParams builderWithPrototype:result];
}
- (CompetitionGoodsParams*) defaultInstance {
  return [CompetitionGoodsParams defaultInstance];
}
- (CompetitionGoodsParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CompetitionGoodsParams*) buildPartial {
  CompetitionGoodsParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CompetitionGoodsParams_Builder*) mergeFrom:(CompetitionGoodsParams*) other {
  if (other == [CompetitionGoodsParams defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.customerCategoryArray.count > 0) {
    if (result.customerCategoryArray == nil) {
      result.customerCategoryArray = [[other.customerCategoryArray copyWithZone:[other.customerCategoryArray zone]] autorelease];
    } else {
      [result.customerCategoryArray appendArray:other.customerCategoryArray];
    }
  }
  if (other.customersArray.count > 0) {
    if (result.customersArray == nil) {
      result.customersArray = [[other.customersArray copyWithZone:[other.customersArray zone]] autorelease];
    } else {
      [result.customersArray appendArray:other.customersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.companiesArray.count > 0) {
    if (result.companiesArray == nil) {
      result.companiesArray = [[other.companiesArray copyWithZone:[other.companiesArray zone]] autorelease];
    } else {
      [result.companiesArray appendArray:other.companiesArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CompetitionGoodsParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CompetitionGoodsParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomerCategory:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Customer_Builder* subBuilder = [Customer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Company_Builder* subBuilder = [Company builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompanies:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setStartDate:[input readString]];
        break;
      }
      case 66: {
        [self setEndDate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (CompetitionGoodsParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (CompetitionGoodsParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (CompetitionGoodsParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (CompetitionGoodsParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)customerCategory {
  return result.customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [result customerCategoryAtIndex:index];
}
- (CompetitionGoodsParams_Builder *)addCustomerCategory:(CustomerCategory*)value {
  if (result.customerCategoryArray == nil) {
    result.customerCategoryArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customerCategoryArray addObject:value];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCustomerCategoryArray:(NSArray *)array {
  result.customerCategoryArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCustomerCategoryValues:(const CustomerCategory* *)values count:(NSUInteger)count {
  result.customerCategoryArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)clearCustomerCategory {
  result.customerCategoryArray = nil;
  return self;
}
- (PBAppendableArray *)customers {
  return result.customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [result customersAtIndex:index];
}
- (CompetitionGoodsParams_Builder *)addCustomers:(Customer*)value {
  if (result.customersArray == nil) {
    result.customersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customersArray addObject:value];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCustomersArray:(NSArray *)array {
  result.customersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCustomersValues:(const Customer* *)values count:(NSUInteger)count {
  result.customersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)clearCustomers {
  result.customersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (CompetitionGoodsParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (CompetitionGoodsParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (PBAppendableArray *)companies {
  return result.companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [result companiesAtIndex:index];
}
- (CompetitionGoodsParams_Builder *)addCompanies:(Company*)value {
  if (result.companiesArray == nil) {
    result.companiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.companiesArray addObject:value];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCompaniesArray:(NSArray *)array {
  result.companiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)setCompaniesValues:(const Company* *)values count:(NSUInteger)count {
  result.companiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CompetitionGoodsParams_Builder *)clearCompanies {
  result.companiesArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (CompetitionGoodsParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (CompetitionGoodsParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (CompetitionGoodsParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (CompetitionGoodsParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
@end

