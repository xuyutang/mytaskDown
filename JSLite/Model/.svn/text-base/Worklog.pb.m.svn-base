// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Worklog.pb.h"

@implementation WorklogRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WorklogRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface WorkLog ()
@property (retain) User* user;
@property int32_t id;
@property (retain) NSString* today;
@property (retain) NSString* plan;
@property (retain) NSString* special;
@property (retain) NSString* createDate;
@property int32_t replyCount;
@end

@implementation WorkLog

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasToday {
  return !!hasToday_;
}
- (void) setHasToday:(BOOL) value_ {
  hasToday_ = !!value_;
}
@synthesize today;
- (BOOL) hasPlan {
  return !!hasPlan_;
}
- (void) setHasPlan:(BOOL) value_ {
  hasPlan_ = !!value_;
}
@synthesize plan;
- (BOOL) hasSpecial {
  return !!hasSpecial_;
}
- (void) setHasSpecial:(BOOL) value_ {
  hasSpecial_ = !!value_;
}
@synthesize special;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (void) dealloc {
  self.user = nil;
  self.today = nil;
  self.plan = nil;
  self.special = nil;
  self.createDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.user = [User defaultInstance];
    self.id = 0;
    self.today = @"";
    self.plan = @"";
    self.special = @"";
    self.createDate = @"";
    self.replyCount = 0;
  }
  return self;
}
static WorkLog* defaultWorkLogInstance = nil;
+ (void) initialize {
  if (self == [WorkLog class]) {
    defaultWorkLogInstance = [[WorkLog alloc] init];
  }
}
+ (WorkLog*) defaultInstance {
  return defaultWorkLogInstance;
}
- (WorkLog*) defaultInstance {
  return defaultWorkLogInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasToday) {
    [output writeString:3 value:self.today];
  }
  if (self.hasPlan) {
    [output writeString:4 value:self.plan];
  }
  if (self.hasSpecial) {
    [output writeString:5 value:self.special];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  if (self.hasReplyCount) {
    [output writeInt32:7 value:self.replyCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasId) {
    size_ += computeInt32Size(2, self.id);
  }
  if (self.hasToday) {
    size_ += computeStringSize(3, self.today);
  }
  if (self.hasPlan) {
    size_ += computeStringSize(4, self.plan);
  }
  if (self.hasSpecial) {
    size_ += computeStringSize(5, self.special);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(7, self.replyCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WorkLog*) parseFromData:(NSData*) data {
  return (WorkLog*)[[[WorkLog builder] mergeFromData:data] build];
}
+ (WorkLog*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLog*)[[[WorkLog builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WorkLog*) parseFromInputStream:(NSInputStream*) input {
  return (WorkLog*)[[[WorkLog builder] mergeFromInputStream:input] build];
}
+ (WorkLog*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLog*)[[[WorkLog builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLog*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WorkLog*)[[[WorkLog builder] mergeFromCodedInputStream:input] build];
}
+ (WorkLog*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLog*)[[[WorkLog builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLog_Builder*) builder {
  return [[[WorkLog_Builder alloc] init] autorelease];
}
+ (WorkLog_Builder*) builderWithPrototype:(WorkLog*) prototype {
  return [[WorkLog builder] mergeFrom:prototype];
}
- (WorkLog_Builder*) builder {
  return [WorkLog builder];
}
- (WorkLog_Builder*) toBuilder {
  return [WorkLog builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasToday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"today", self.today];
  }
  if (self.hasPlan) {
    [output appendFormat:@"%@%@: %@\n", indent, @"plan", self.plan];
  }
  if (self.hasSpecial) {
    [output appendFormat:@"%@%@: %@\n", indent, @"special", self.special];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WorkLog class]]) {
    return NO;
  }
  WorkLog *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasToday == otherMessage.hasToday &&
      (!self.hasToday || [self.today isEqual:otherMessage.today]) &&
      self.hasPlan == otherMessage.hasPlan &&
      (!self.hasPlan || [self.plan isEqual:otherMessage.plan]) &&
      self.hasSpecial == otherMessage.hasSpecial &&
      (!self.hasSpecial || [self.special isEqual:otherMessage.special]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasToday) {
    hashCode = hashCode * 31 + [self.today hash];
  }
  if (self.hasPlan) {
    hashCode = hashCode * 31 + [self.plan hash];
  }
  if (self.hasSpecial) {
    hashCode = hashCode * 31 + [self.special hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WorkLog_Builder()
@property (retain) WorkLog* result;
@end

@implementation WorkLog_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WorkLog alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WorkLog_Builder*) clear {
  self.result = [[[WorkLog alloc] init] autorelease];
  return self;
}
- (WorkLog_Builder*) clone {
  return [WorkLog builderWithPrototype:result];
}
- (WorkLog*) defaultInstance {
  return [WorkLog defaultInstance];
}
- (WorkLog*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WorkLog*) buildPartial {
  WorkLog* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WorkLog_Builder*) mergeFrom:(WorkLog*) other {
  if (other == [WorkLog defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasToday) {
    [self setToday:other.today];
  }
  if (other.hasPlan) {
    [self setPlan:other.plan];
  }
  if (other.hasSpecial) {
    [self setSpecial:other.special];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WorkLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WorkLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setToday:[input readString]];
        break;
      }
      case 34: {
        [self setPlan:[input readString]];
        break;
      }
      case 42: {
        [self setSpecial:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 56: {
        [self setReplyCount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (WorkLog_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (WorkLog_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (WorkLog_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (WorkLog_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (WorkLog_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (WorkLog_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasToday {
  return result.hasToday;
}
- (NSString*) today {
  return result.today;
}
- (WorkLog_Builder*) setToday:(NSString*) value {
  result.hasToday = YES;
  result.today = value;
  return self;
}
- (WorkLog_Builder*) clearToday {
  result.hasToday = NO;
  result.today = @"";
  return self;
}
- (BOOL) hasPlan {
  return result.hasPlan;
}
- (NSString*) plan {
  return result.plan;
}
- (WorkLog_Builder*) setPlan:(NSString*) value {
  result.hasPlan = YES;
  result.plan = value;
  return self;
}
- (WorkLog_Builder*) clearPlan {
  result.hasPlan = NO;
  result.plan = @"";
  return self;
}
- (BOOL) hasSpecial {
  return result.hasSpecial;
}
- (NSString*) special {
  return result.special;
}
- (WorkLog_Builder*) setSpecial:(NSString*) value {
  result.hasSpecial = YES;
  result.special = value;
  return self;
}
- (WorkLog_Builder*) clearSpecial {
  result.hasSpecial = NO;
  result.special = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (WorkLog_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (WorkLog_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (WorkLog_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (WorkLog_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
@end

@interface WorkLogReply ()
@property int32_t id;
@property int32_t workLogId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation WorkLogReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasWorkLogId {
  return !!hasWorkLogId_;
}
- (void) setHasWorkLogId:(BOOL) value_ {
  hasWorkLogId_ = !!value_;
}
@synthesize workLogId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.workLogId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static WorkLogReply* defaultWorkLogReplyInstance = nil;
+ (void) initialize {
  if (self == [WorkLogReply class]) {
    defaultWorkLogReplyInstance = [[WorkLogReply alloc] init];
  }
}
+ (WorkLogReply*) defaultInstance {
  return defaultWorkLogReplyInstance;
}
- (WorkLogReply*) defaultInstance {
  return defaultWorkLogReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasWorkLogId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasWorkLogId) {
    [output writeInt32:2 value:self.workLogId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasWorkLogId) {
    size_ += computeInt32Size(2, self.workLogId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WorkLogReply*) parseFromData:(NSData*) data {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromData:data] build];
}
+ (WorkLogReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WorkLogReply*) parseFromInputStream:(NSInputStream*) input {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromInputStream:input] build];
}
+ (WorkLogReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLogReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromCodedInputStream:input] build];
}
+ (WorkLogReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogReply*)[[[WorkLogReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLogReply_Builder*) builder {
  return [[[WorkLogReply_Builder alloc] init] autorelease];
}
+ (WorkLogReply_Builder*) builderWithPrototype:(WorkLogReply*) prototype {
  return [[WorkLogReply builder] mergeFrom:prototype];
}
- (WorkLogReply_Builder*) builder {
  return [WorkLogReply builder];
}
- (WorkLogReply_Builder*) toBuilder {
  return [WorkLogReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasWorkLogId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"workLogId", [NSNumber numberWithInt:self.workLogId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WorkLogReply class]]) {
    return NO;
  }
  WorkLogReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasWorkLogId == otherMessage.hasWorkLogId &&
      (!self.hasWorkLogId || self.workLogId == otherMessage.workLogId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasWorkLogId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.workLogId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WorkLogReply_Builder()
@property (retain) WorkLogReply* result;
@end

@implementation WorkLogReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WorkLogReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WorkLogReply_Builder*) clear {
  self.result = [[[WorkLogReply alloc] init] autorelease];
  return self;
}
- (WorkLogReply_Builder*) clone {
  return [WorkLogReply builderWithPrototype:result];
}
- (WorkLogReply*) defaultInstance {
  return [WorkLogReply defaultInstance];
}
- (WorkLogReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WorkLogReply*) buildPartial {
  WorkLogReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WorkLogReply_Builder*) mergeFrom:(WorkLogReply*) other {
  if (other == [WorkLogReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasWorkLogId) {
    [self setWorkLogId:other.workLogId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WorkLogReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WorkLogReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setWorkLogId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (WorkLogReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (WorkLogReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasWorkLogId {
  return result.hasWorkLogId;
}
- (int32_t) workLogId {
  return result.workLogId;
}
- (WorkLogReply_Builder*) setWorkLogId:(int32_t) value {
  result.hasWorkLogId = YES;
  result.workLogId = value;
  return self;
}
- (WorkLogReply_Builder*) clearWorkLogId {
  result.hasWorkLogId = NO;
  result.workLogId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (WorkLogReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (WorkLogReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (WorkLogReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (WorkLogReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (WorkLogReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (WorkLogReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (WorkLogReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (WorkLogReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (WorkLogReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (WorkLogReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (WorkLogReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (WorkLogReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (WorkLogReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (WorkLogReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

@interface WorkLogParams ()
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t page;
@property int32_t id;
@end

@implementation WorkLogParams

@synthesize usersArray;
@dynamic users;
@synthesize departmentsArray;
@dynamic departments;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.usersArray = nil;
  self.departmentsArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.startDate = @"";
    self.endDate = @"";
    self.page = 0;
    self.id = 0;
  }
  return self;
}
static WorkLogParams* defaultWorkLogParamsInstance = nil;
+ (void) initialize {
  if (self == [WorkLogParams class]) {
    defaultWorkLogParamsInstance = [[WorkLogParams alloc] init];
  }
}
+ (WorkLogParams*) defaultInstance {
  return defaultWorkLogParamsInstance;
}
- (WorkLogParams*) defaultInstance {
  return defaultWorkLogParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (User *element in self.usersArray) {
    [output writeMessage:1 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:3 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:4 value:self.endDate];
  }
  if (self.hasPage) {
    [output writeInt32:5 value:self.page];
  }
  if (self.hasId) {
    [output writeInt32:6 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(1, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(3, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(4, self.endDate);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(5, self.page);
  }
  if (self.hasId) {
    size_ += computeInt32Size(6, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WorkLogParams*) parseFromData:(NSData*) data {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromData:data] build];
}
+ (WorkLogParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WorkLogParams*) parseFromInputStream:(NSInputStream*) input {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromInputStream:input] build];
}
+ (WorkLogParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLogParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromCodedInputStream:input] build];
}
+ (WorkLogParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WorkLogParams*)[[[WorkLogParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WorkLogParams_Builder*) builder {
  return [[[WorkLogParams_Builder alloc] init] autorelease];
}
+ (WorkLogParams_Builder*) builderWithPrototype:(WorkLogParams*) prototype {
  return [[WorkLogParams builder] mergeFrom:prototype];
}
- (WorkLogParams_Builder*) builder {
  return [WorkLogParams builder];
}
- (WorkLogParams_Builder*) toBuilder {
  return [WorkLogParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WorkLogParams class]]) {
    return NO;
  }
  WorkLogParams *otherMessage = other;
  return
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WorkLogParams_Builder()
@property (retain) WorkLogParams* result;
@end

@implementation WorkLogParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WorkLogParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WorkLogParams_Builder*) clear {
  self.result = [[[WorkLogParams alloc] init] autorelease];
  return self;
}
- (WorkLogParams_Builder*) clone {
  return [WorkLogParams builderWithPrototype:result];
}
- (WorkLogParams*) defaultInstance {
  return [WorkLogParams defaultInstance];
}
- (WorkLogParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WorkLogParams*) buildPartial {
  WorkLogParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WorkLogParams_Builder*) mergeFrom:(WorkLogParams*) other {
  if (other == [WorkLogParams defaultInstance]) {
    return self;
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WorkLogParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WorkLogParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setStartDate:[input readString]];
        break;
      }
      case 34: {
        [self setEndDate:[input readString]];
        break;
      }
      case 40: {
        [self setPage:[input readInt32]];
        break;
      }
      case 48: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (WorkLogParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (WorkLogParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (WorkLogParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (WorkLogParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (WorkLogParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (WorkLogParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (WorkLogParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (WorkLogParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (WorkLogParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (WorkLogParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (WorkLogParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (WorkLogParams_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (WorkLogParams_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface PageWorkLog ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * workLogsArray;
@end

@implementation PageWorkLog

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize workLogsArray;
@dynamic workLogs;
- (void) dealloc {
  self.page = nil;
  self.workLogsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageWorkLog* defaultPageWorkLogInstance = nil;
+ (void) initialize {
  if (self == [PageWorkLog class]) {
    defaultPageWorkLogInstance = [[PageWorkLog alloc] init];
  }
}
+ (PageWorkLog*) defaultInstance {
  return defaultPageWorkLogInstance;
}
- (PageWorkLog*) defaultInstance {
  return defaultPageWorkLogInstance;
}
- (PBArray *)workLogs {
  return workLogsArray;
}
- (WorkLog*)workLogsAtIndex:(NSUInteger)index {
  return [workLogsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (WorkLog* element in self.workLogs) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (WorkLog *element in self.workLogsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (WorkLog *element in self.workLogsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageWorkLog*) parseFromData:(NSData*) data {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromData:data] build];
}
+ (PageWorkLog*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageWorkLog*) parseFromInputStream:(NSInputStream*) input {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromInputStream:input] build];
}
+ (PageWorkLog*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageWorkLog*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromCodedInputStream:input] build];
}
+ (PageWorkLog*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageWorkLog*)[[[PageWorkLog builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageWorkLog_Builder*) builder {
  return [[[PageWorkLog_Builder alloc] init] autorelease];
}
+ (PageWorkLog_Builder*) builderWithPrototype:(PageWorkLog*) prototype {
  return [[PageWorkLog builder] mergeFrom:prototype];
}
- (PageWorkLog_Builder*) builder {
  return [PageWorkLog builder];
}
- (PageWorkLog_Builder*) toBuilder {
  return [PageWorkLog builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (WorkLog* element in self.workLogsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"workLogs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageWorkLog class]]) {
    return NO;
  }
  PageWorkLog *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.workLogsArray isEqualToArray:otherMessage.workLogsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (WorkLog* element in self.workLogsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageWorkLog_Builder()
@property (retain) PageWorkLog* result;
@end

@implementation PageWorkLog_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageWorkLog alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageWorkLog_Builder*) clear {
  self.result = [[[PageWorkLog alloc] init] autorelease];
  return self;
}
- (PageWorkLog_Builder*) clone {
  return [PageWorkLog builderWithPrototype:result];
}
- (PageWorkLog*) defaultInstance {
  return [PageWorkLog defaultInstance];
}
- (PageWorkLog*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageWorkLog*) buildPartial {
  PageWorkLog* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageWorkLog_Builder*) mergeFrom:(PageWorkLog*) other {
  if (other == [PageWorkLog defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.workLogsArray.count > 0) {
    if (result.workLogsArray == nil) {
      result.workLogsArray = [[other.workLogsArray copyWithZone:[other.workLogsArray zone]] autorelease];
    } else {
      [result.workLogsArray appendArray:other.workLogsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageWorkLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageWorkLog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        WorkLog_Builder* subBuilder = [WorkLog builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWorkLogs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageWorkLog_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageWorkLog_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageWorkLog_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageWorkLog_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)workLogs {
  return result.workLogsArray;
}
- (WorkLog*)workLogsAtIndex:(NSUInteger)index {
  return [result workLogsAtIndex:index];
}
- (PageWorkLog_Builder *)addWorkLogs:(WorkLog*)value {
  if (result.workLogsArray == nil) {
    result.workLogsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.workLogsArray addObject:value];
  return self;
}
- (PageWorkLog_Builder *)setWorkLogsArray:(NSArray *)array {
  result.workLogsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageWorkLog_Builder *)setWorkLogsValues:(const WorkLog* *)values count:(NSUInteger)count {
  result.workLogsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageWorkLog_Builder *)clearWorkLogs {
  result.workLogsArray = nil;
  return self;
}
@end

