// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TaskPatrol.pb.h"

@implementation TaskPatrolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TaskPatrolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [CustomerRoot registerAllExtensions:registry];
    [PatrolRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TaskPatrol ()
@property (retain) NSString* id;
@property (retain) User* user;
@property (retain) PBAppendableArray * detailArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property (retain) NSString* finishDate;
@property int32_t taskType;
@property (retain) Company* company;
@property int32_t finishCount;
@property int32_t unfinishedCount;
@property int32_t taskStatus;
@property (retain) NSString* name;
@property int32_t replyCount;
@property (retain) NSString* cycleDate;
@property (retain) NSString* content;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathsArray;
@property (retain) PBAppendableArray * fileNamesArray;
@end

@implementation TaskPatrol

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
@synthesize detailArray;
@dynamic detail;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasFinishDate {
  return !!hasFinishDate_;
}
- (void) setHasFinishDate:(BOOL) value_ {
  hasFinishDate_ = !!value_;
}
@synthesize finishDate;
- (BOOL) hasTaskType {
  return !!hasTaskType_;
}
- (void) setHasTaskType:(BOOL) value_ {
  hasTaskType_ = !!value_;
}
@synthesize taskType;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (BOOL) hasFinishCount {
  return !!hasFinishCount_;
}
- (void) setHasFinishCount:(BOOL) value_ {
  hasFinishCount_ = !!value_;
}
@synthesize finishCount;
- (BOOL) hasUnfinishedCount {
  return !!hasUnfinishedCount_;
}
- (void) setHasUnfinishedCount:(BOOL) value_ {
  hasUnfinishedCount_ = !!value_;
}
@synthesize unfinishedCount;
- (BOOL) hasTaskStatus {
  return !!hasTaskStatus_;
}
- (void) setHasTaskStatus:(BOOL) value_ {
  hasTaskStatus_ = !!value_;
}
@synthesize taskStatus;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasCycleDate {
  return !!hasCycleDate_;
}
- (void) setHasCycleDate:(BOOL) value_ {
  hasCycleDate_ = !!value_;
}
@synthesize cycleDate;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
@synthesize filesArray;
@dynamic files;
@synthesize filePathsArray;
@dynamic filePaths;
@synthesize fileNamesArray;
@dynamic fileNames;
- (void) dealloc {
  self.id = nil;
  self.user = nil;
  self.detailArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  self.finishDate = nil;
  self.company = nil;
  self.name = nil;
  self.cycleDate = nil;
  self.content = nil;
  self.filesArray = nil;
  self.filePathsArray = nil;
  self.fileNamesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.user = [User defaultInstance];
    self.startDate = @"";
    self.endDate = @"";
    self.finishDate = @"";
    self.taskType = 0;
    self.company = [Company defaultInstance];
    self.finishCount = 0;
    self.unfinishedCount = 0;
    self.taskStatus = 0;
    self.name = @"";
    self.replyCount = 0;
    self.cycleDate = @"";
    self.content = @"";
  }
  return self;
}
static TaskPatrol* defaultTaskPatrolInstance = nil;
+ (void) initialize {
  if (self == [TaskPatrol class]) {
    defaultTaskPatrolInstance = [[TaskPatrol alloc] init];
  }
}
+ (TaskPatrol*) defaultInstance {
  return defaultTaskPatrolInstance;
}
- (TaskPatrol*) defaultInstance {
  return defaultTaskPatrolInstance;
}
- (PBArray *)detail {
  return detailArray;
}
- (TaskPatrolDetail*)detailAtIndex:(NSUInteger)index {
  return [detailArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePaths {
  return filePathsArray;
}
- (NSString*)filePathsAtIndex:(NSUInteger)index {
  return [filePathsArray objectAtIndex:index];
}
- (PBArray *)fileNames {
  return fileNamesArray;
}
- (NSString*)fileNamesAtIndex:(NSUInteger)index {
  return [fileNamesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  for (TaskPatrolDetail* element in self.detail) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  for (TaskPatrolDetail *element in self.detailArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:4 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:5 value:self.endDate];
  }
  if (self.hasFinishDate) {
    [output writeString:6 value:self.finishDate];
  }
  if (self.hasTaskType) {
    [output writeInt32:7 value:self.taskType];
  }
  if (self.hasCompany) {
    [output writeMessage:8 value:self.company];
  }
  if (self.hasFinishCount) {
    [output writeInt32:9 value:self.finishCount];
  }
  if (self.hasUnfinishedCount) {
    [output writeInt32:10 value:self.unfinishedCount];
  }
  if (self.hasTaskStatus) {
    [output writeInt32:11 value:self.taskStatus];
  }
  if (self.hasName) {
    [output writeString:12 value:self.name];
  }
  if (self.hasReplyCount) {
    [output writeInt32:13 value:self.replyCount];
  }
  if (self.hasCycleDate) {
    [output writeString:14 value:self.cycleDate];
  }
  if (self.hasContent) {
    [output writeString:15 value:self.content];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:16 value:values[i]];
    }
  }
  const NSUInteger filePathsArrayCount = self.filePathsArray.count;
  if (filePathsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathsArray.data;
    for (NSUInteger i = 0; i < filePathsArrayCount; ++i) {
      [output writeString:17 value:values[i]];
    }
  }
  const NSUInteger fileNamesArrayCount = self.fileNamesArray.count;
  if (fileNamesArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.fileNamesArray.data;
    for (NSUInteger i = 0; i < fileNamesArrayCount; ++i) {
      [output writeString:18 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  for (TaskPatrolDetail *element in self.detailArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(4, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(5, self.endDate);
  }
  if (self.hasFinishDate) {
    size_ += computeStringSize(6, self.finishDate);
  }
  if (self.hasTaskType) {
    size_ += computeInt32Size(7, self.taskType);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(8, self.company);
  }
  if (self.hasFinishCount) {
    size_ += computeInt32Size(9, self.finishCount);
  }
  if (self.hasUnfinishedCount) {
    size_ += computeInt32Size(10, self.unfinishedCount);
  }
  if (self.hasTaskStatus) {
    size_ += computeInt32Size(11, self.taskStatus);
  }
  if (self.hasName) {
    size_ += computeStringSize(12, self.name);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(13, self.replyCount);
  }
  if (self.hasCycleDate) {
    size_ += computeStringSize(14, self.cycleDate);
  }
  if (self.hasContent) {
    size_ += computeStringSize(15, self.content);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathsArray.count;
    const NSString* *values = (const NSString* *)self.filePathsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.fileNamesArray.count;
    const NSString* *values = (const NSString* *)self.fileNamesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskPatrol*) parseFromData:(NSData*) data {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromData:data] build];
}
+ (TaskPatrol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrol*) parseFromInputStream:(NSInputStream*) input {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromInputStream:input] build];
}
+ (TaskPatrol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromCodedInputStream:input] build];
}
+ (TaskPatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrol*)[[[TaskPatrol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrol_Builder*) builder {
  return [[[TaskPatrol_Builder alloc] init] autorelease];
}
+ (TaskPatrol_Builder*) builderWithPrototype:(TaskPatrol*) prototype {
  return [[TaskPatrol builder] mergeFrom:prototype];
}
- (TaskPatrol_Builder*) builder {
  return [TaskPatrol builder];
}
- (TaskPatrol_Builder*) toBuilder {
  return [TaskPatrol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TaskPatrolDetail* element in self.detailArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"detail"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasFinishDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finishDate", self.finishDate];
  }
  if (self.hasTaskType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskType", [NSNumber numberWithInt:self.taskType]];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFinishCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finishCount", [NSNumber numberWithInt:self.finishCount]];
  }
  if (self.hasUnfinishedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unfinishedCount", [NSNumber numberWithInt:self.unfinishedCount]];
  }
  if (self.hasTaskStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskStatus", [NSNumber numberWithInt:self.taskStatus]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  if (self.hasCycleDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cycleDate", self.cycleDate];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePaths", element];
  }
  for (NSString* element in self.fileNamesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileNames", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskPatrol class]]) {
    return NO;
  }
  TaskPatrol *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      [self.detailArray isEqualToArray:otherMessage.detailArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasFinishDate == otherMessage.hasFinishDate &&
      (!self.hasFinishDate || [self.finishDate isEqual:otherMessage.finishDate]) &&
      self.hasTaskType == otherMessage.hasTaskType &&
      (!self.hasTaskType || self.taskType == otherMessage.taskType) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      self.hasFinishCount == otherMessage.hasFinishCount &&
      (!self.hasFinishCount || self.finishCount == otherMessage.finishCount) &&
      self.hasUnfinishedCount == otherMessage.hasUnfinishedCount &&
      (!self.hasUnfinishedCount || self.unfinishedCount == otherMessage.unfinishedCount) &&
      self.hasTaskStatus == otherMessage.hasTaskStatus &&
      (!self.hasTaskStatus || self.taskStatus == otherMessage.taskStatus) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasCycleDate == otherMessage.hasCycleDate &&
      (!self.hasCycleDate || [self.cycleDate isEqual:otherMessage.cycleDate]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathsArray isEqualToArray:otherMessage.filePathsArray] &&
      [self.fileNamesArray isEqualToArray:otherMessage.fileNamesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  for (TaskPatrolDetail* element in self.detailArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasFinishDate) {
    hashCode = hashCode * 31 + [self.finishDate hash];
  }
  if (self.hasTaskType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskType] hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  if (self.hasFinishCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.finishCount] hash];
  }
  if (self.hasUnfinishedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.unfinishedCount] hash];
  }
  if (self.hasTaskStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskStatus] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  if (self.hasCycleDate) {
    hashCode = hashCode * 31 + [self.cycleDate hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.fileNamesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskPatrol_Builder()
@property (retain) TaskPatrol* result;
@end

@implementation TaskPatrol_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TaskPatrol alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskPatrol_Builder*) clear {
  self.result = [[[TaskPatrol alloc] init] autorelease];
  return self;
}
- (TaskPatrol_Builder*) clone {
  return [TaskPatrol builderWithPrototype:result];
}
- (TaskPatrol*) defaultInstance {
  return [TaskPatrol defaultInstance];
}
- (TaskPatrol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskPatrol*) buildPartial {
  TaskPatrol* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TaskPatrol_Builder*) mergeFrom:(TaskPatrol*) other {
  if (other == [TaskPatrol defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.detailArray.count > 0) {
    if (result.detailArray == nil) {
      result.detailArray = [[other.detailArray copyWithZone:[other.detailArray zone]] autorelease];
    } else {
      [result.detailArray appendArray:other.detailArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasFinishDate) {
    [self setFinishDate:other.finishDate];
  }
  if (other.hasTaskType) {
    [self setTaskType:other.taskType];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.hasFinishCount) {
    [self setFinishCount:other.finishCount];
  }
  if (other.hasUnfinishedCount) {
    [self setUnfinishedCount:other.unfinishedCount];
  }
  if (other.hasTaskStatus) {
    [self setTaskStatus:other.taskStatus];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasCycleDate) {
    [self setCycleDate:other.cycleDate];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathsArray.count > 0) {
    if (result.filePathsArray == nil) {
      result.filePathsArray = [[other.filePathsArray copyWithZone:[other.filePathsArray zone]] autorelease];
    } else {
      [result.filePathsArray appendArray:other.filePathsArray];
    }
  }
  if (other.fileNamesArray.count > 0) {
    if (result.fileNamesArray == nil) {
      result.fileNamesArray = [[other.fileNamesArray copyWithZone:[other.fileNamesArray zone]] autorelease];
    } else {
      [result.fileNamesArray appendArray:other.fileNamesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskPatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskPatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TaskPatrolDetail_Builder* subBuilder = [TaskPatrolDetail builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDetail:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStartDate:[input readString]];
        break;
      }
      case 42: {
        [self setEndDate:[input readString]];
        break;
      }
      case 50: {
        [self setFinishDate:[input readString]];
        break;
      }
      case 56: {
        [self setTaskType:[input readInt32]];
        break;
      }
      case 66: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setFinishCount:[input readInt32]];
        break;
      }
      case 80: {
        [self setUnfinishedCount:[input readInt32]];
        break;
      }
      case 88: {
        [self setTaskStatus:[input readInt32]];
        break;
      }
      case 98: {
        [self setName:[input readString]];
        break;
      }
      case 104: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 114: {
        [self setCycleDate:[input readString]];
        break;
      }
      case 122: {
        [self setContent:[input readString]];
        break;
      }
      case 130: {
        [self addFiles:[input readData]];
        break;
      }
      case 138: {
        [self addFilePaths:[input readString]];
        break;
      }
      case 146: {
        [self addFileNames:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (TaskPatrol_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TaskPatrol_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (TaskPatrol_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (TaskPatrol_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (TaskPatrol_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (TaskPatrol_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)detail {
  return result.detailArray;
}
- (TaskPatrolDetail*)detailAtIndex:(NSUInteger)index {
  return [result detailAtIndex:index];
}
- (TaskPatrol_Builder *)addDetail:(TaskPatrolDetail*)value {
  if (result.detailArray == nil) {
    result.detailArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.detailArray addObject:value];
  return self;
}
- (TaskPatrol_Builder *)setDetailArray:(NSArray *)array {
  result.detailArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)setDetailValues:(const TaskPatrolDetail* *)values count:(NSUInteger)count {
  result.detailArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)clearDetail {
  result.detailArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (TaskPatrol_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (TaskPatrol_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (TaskPatrol_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (TaskPatrol_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasFinishDate {
  return result.hasFinishDate;
}
- (NSString*) finishDate {
  return result.finishDate;
}
- (TaskPatrol_Builder*) setFinishDate:(NSString*) value {
  result.hasFinishDate = YES;
  result.finishDate = value;
  return self;
}
- (TaskPatrol_Builder*) clearFinishDate {
  result.hasFinishDate = NO;
  result.finishDate = @"";
  return self;
}
- (BOOL) hasTaskType {
  return result.hasTaskType;
}
- (int32_t) taskType {
  return result.taskType;
}
- (TaskPatrol_Builder*) setTaskType:(int32_t) value {
  result.hasTaskType = YES;
  result.taskType = value;
  return self;
}
- (TaskPatrol_Builder*) clearTaskType {
  result.hasTaskType = NO;
  result.taskType = 0;
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (TaskPatrol_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (TaskPatrol_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (TaskPatrol_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (TaskPatrol_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (BOOL) hasFinishCount {
  return result.hasFinishCount;
}
- (int32_t) finishCount {
  return result.finishCount;
}
- (TaskPatrol_Builder*) setFinishCount:(int32_t) value {
  result.hasFinishCount = YES;
  result.finishCount = value;
  return self;
}
- (TaskPatrol_Builder*) clearFinishCount {
  result.hasFinishCount = NO;
  result.finishCount = 0;
  return self;
}
- (BOOL) hasUnfinishedCount {
  return result.hasUnfinishedCount;
}
- (int32_t) unfinishedCount {
  return result.unfinishedCount;
}
- (TaskPatrol_Builder*) setUnfinishedCount:(int32_t) value {
  result.hasUnfinishedCount = YES;
  result.unfinishedCount = value;
  return self;
}
- (TaskPatrol_Builder*) clearUnfinishedCount {
  result.hasUnfinishedCount = NO;
  result.unfinishedCount = 0;
  return self;
}
- (BOOL) hasTaskStatus {
  return result.hasTaskStatus;
}
- (int32_t) taskStatus {
  return result.taskStatus;
}
- (TaskPatrol_Builder*) setTaskStatus:(int32_t) value {
  result.hasTaskStatus = YES;
  result.taskStatus = value;
  return self;
}
- (TaskPatrol_Builder*) clearTaskStatus {
  result.hasTaskStatus = NO;
  result.taskStatus = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TaskPatrol_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TaskPatrol_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (TaskPatrol_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (TaskPatrol_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
- (BOOL) hasCycleDate {
  return result.hasCycleDate;
}
- (NSString*) cycleDate {
  return result.cycleDate;
}
- (TaskPatrol_Builder*) setCycleDate:(NSString*) value {
  result.hasCycleDate = YES;
  result.cycleDate = value;
  return self;
}
- (TaskPatrol_Builder*) clearCycleDate {
  result.hasCycleDate = NO;
  result.cycleDate = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (TaskPatrol_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (TaskPatrol_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (TaskPatrol_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (TaskPatrol_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePaths {
  return result.filePathsArray;
}
- (NSString*)filePathsAtIndex:(NSUInteger)index {
  return [result filePathsAtIndex:index];
}
- (TaskPatrol_Builder *)addFilePaths:(NSString*)value {
  if (result.filePathsArray == nil) {
    result.filePathsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathsArray addObject:value];
  return self;
}
- (TaskPatrol_Builder *)setFilePathsArray:(NSArray *)array {
  result.filePathsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)setFilePathsValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)clearFilePaths {
  result.filePathsArray = nil;
  return self;
}
- (PBAppendableArray *)fileNames {
  return result.fileNamesArray;
}
- (NSString*)fileNamesAtIndex:(NSUInteger)index {
  return [result fileNamesAtIndex:index];
}
- (TaskPatrol_Builder *)addFileNames:(NSString*)value {
  if (result.fileNamesArray == nil) {
    result.fileNamesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.fileNamesArray addObject:value];
  return self;
}
- (TaskPatrol_Builder *)setFileNamesArray:(NSArray *)array {
  result.fileNamesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)setFileNamesValues:(const NSString* *)values count:(NSUInteger)count {
  result.fileNamesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrol_Builder *)clearFileNames {
  result.fileNamesArray = nil;
  return self;
}
@end

@interface TaskPatrolDetail ()
@property int32_t id;
@property (retain) NSString* taskId;
@property int32_t patrolId;
@property (retain) Patrol* patrol;
@property (retain) User* user;
@property (retain) Customer* customer;
@property int32_t taskStatus;
@property (retain) NSString* finishDate;
@end

@implementation TaskPatrolDetail

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasPatrolId {
  return !!hasPatrolId_;
}
- (void) setHasPatrolId:(BOOL) value_ {
  hasPatrolId_ = !!value_;
}
@synthesize patrolId;
- (BOOL) hasPatrol {
  return !!hasPatrol_;
}
- (void) setHasPatrol:(BOOL) value_ {
  hasPatrol_ = !!value_;
}
@synthesize patrol;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasCustomer {
  return !!hasCustomer_;
}
- (void) setHasCustomer:(BOOL) value_ {
  hasCustomer_ = !!value_;
}
@synthesize customer;
- (BOOL) hasTaskStatus {
  return !!hasTaskStatus_;
}
- (void) setHasTaskStatus:(BOOL) value_ {
  hasTaskStatus_ = !!value_;
}
@synthesize taskStatus;
- (BOOL) hasFinishDate {
  return !!hasFinishDate_;
}
- (void) setHasFinishDate:(BOOL) value_ {
  hasFinishDate_ = !!value_;
}
@synthesize finishDate;
- (void) dealloc {
  self.taskId = nil;
  self.patrol = nil;
  self.user = nil;
  self.customer = nil;
  self.finishDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.taskId = @"";
    self.patrolId = 0;
    self.patrol = [Patrol defaultInstance];
    self.user = [User defaultInstance];
    self.customer = [Customer defaultInstance];
    self.taskStatus = 0;
    self.finishDate = @"";
  }
  return self;
}
static TaskPatrolDetail* defaultTaskPatrolDetailInstance = nil;
+ (void) initialize {
  if (self == [TaskPatrolDetail class]) {
    defaultTaskPatrolDetailInstance = [[TaskPatrolDetail alloc] init];
  }
}
+ (TaskPatrolDetail*) defaultInstance {
  return defaultTaskPatrolDetailInstance;
}
- (TaskPatrolDetail*) defaultInstance {
  return defaultTaskPatrolDetailInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (self.hasPatrol) {
    if (!self.patrol.isInitialized) {
      return NO;
    }
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasCustomer) {
    if (!self.customer.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  if (self.hasPatrolId) {
    [output writeInt32:3 value:self.patrolId];
  }
  if (self.hasPatrol) {
    [output writeMessage:4 value:self.patrol];
  }
  if (self.hasUser) {
    [output writeMessage:5 value:self.user];
  }
  if (self.hasCustomer) {
    [output writeMessage:6 value:self.customer];
  }
  if (self.hasTaskStatus) {
    [output writeInt32:7 value:self.taskStatus];
  }
  if (self.hasFinishDate) {
    [output writeString:8 value:self.finishDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  if (self.hasPatrolId) {
    size_ += computeInt32Size(3, self.patrolId);
  }
  if (self.hasPatrol) {
    size_ += computeMessageSize(4, self.patrol);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(5, self.user);
  }
  if (self.hasCustomer) {
    size_ += computeMessageSize(6, self.customer);
  }
  if (self.hasTaskStatus) {
    size_ += computeInt32Size(7, self.taskStatus);
  }
  if (self.hasFinishDate) {
    size_ += computeStringSize(8, self.finishDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskPatrolDetail*) parseFromData:(NSData*) data {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromData:data] build];
}
+ (TaskPatrolDetail*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetail*) parseFromInputStream:(NSInputStream*) input {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromInputStream:input] build];
}
+ (TaskPatrolDetail*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromCodedInputStream:input] build];
}
+ (TaskPatrolDetail*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetail*)[[[TaskPatrolDetail builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetail_Builder*) builder {
  return [[[TaskPatrolDetail_Builder alloc] init] autorelease];
}
+ (TaskPatrolDetail_Builder*) builderWithPrototype:(TaskPatrolDetail*) prototype {
  return [[TaskPatrolDetail builder] mergeFrom:prototype];
}
- (TaskPatrolDetail_Builder*) builder {
  return [TaskPatrolDetail builder];
}
- (TaskPatrolDetail_Builder*) toBuilder {
  return [TaskPatrolDetail builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasPatrolId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"patrolId", [NSNumber numberWithInt:self.patrolId]];
  }
  if (self.hasPatrol) {
    [output appendFormat:@"%@%@ {\n", indent, @"patrol"];
    [self.patrol writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCustomer) {
    [output appendFormat:@"%@%@ {\n", indent, @"customer"];
    [self.customer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTaskStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskStatus", [NSNumber numberWithInt:self.taskStatus]];
  }
  if (self.hasFinishDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"finishDate", self.finishDate];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskPatrolDetail class]]) {
    return NO;
  }
  TaskPatrolDetail *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasPatrolId == otherMessage.hasPatrolId &&
      (!self.hasPatrolId || self.patrolId == otherMessage.patrolId) &&
      self.hasPatrol == otherMessage.hasPatrol &&
      (!self.hasPatrol || [self.patrol isEqual:otherMessage.patrol]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCustomer == otherMessage.hasCustomer &&
      (!self.hasCustomer || [self.customer isEqual:otherMessage.customer]) &&
      self.hasTaskStatus == otherMessage.hasTaskStatus &&
      (!self.hasTaskStatus || self.taskStatus == otherMessage.taskStatus) &&
      self.hasFinishDate == otherMessage.hasFinishDate &&
      (!self.hasFinishDate || [self.finishDate isEqual:otherMessage.finishDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasPatrolId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.patrolId] hash];
  }
  if (self.hasPatrol) {
    hashCode = hashCode * 31 + [self.patrol hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCustomer) {
    hashCode = hashCode * 31 + [self.customer hash];
  }
  if (self.hasTaskStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskStatus] hash];
  }
  if (self.hasFinishDate) {
    hashCode = hashCode * 31 + [self.finishDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskPatrolDetail_Builder()
@property (retain) TaskPatrolDetail* result;
@end

@implementation TaskPatrolDetail_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TaskPatrolDetail alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskPatrolDetail_Builder*) clear {
  self.result = [[[TaskPatrolDetail alloc] init] autorelease];
  return self;
}
- (TaskPatrolDetail_Builder*) clone {
  return [TaskPatrolDetail builderWithPrototype:result];
}
- (TaskPatrolDetail*) defaultInstance {
  return [TaskPatrolDetail defaultInstance];
}
- (TaskPatrolDetail*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskPatrolDetail*) buildPartial {
  TaskPatrolDetail* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TaskPatrolDetail_Builder*) mergeFrom:(TaskPatrolDetail*) other {
  if (other == [TaskPatrolDetail defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasPatrolId) {
    [self setPatrolId:other.patrolId];
  }
  if (other.hasPatrol) {
    [self mergePatrol:other.patrol];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCustomer) {
    [self mergeCustomer:other.customer];
  }
  if (other.hasTaskStatus) {
    [self setTaskStatus:other.taskStatus];
  }
  if (other.hasFinishDate) {
    [self setFinishDate:other.finishDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskPatrolDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskPatrolDetail_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
      case 24: {
        [self setPatrolId:[input readInt32]];
        break;
      }
      case 34: {
        Patrol_Builder* subBuilder = [Patrol builder];
        if (self.hasPatrol) {
          [subBuilder mergeFrom:self.patrol];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPatrol:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Customer_Builder* subBuilder = [Customer builder];
        if (self.hasCustomer) {
          [subBuilder mergeFrom:self.customer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustomer:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setTaskStatus:[input readInt32]];
        break;
      }
      case 66: {
        [self setFinishDate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (TaskPatrolDetail_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TaskPatrolDetail_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (NSString*) taskId {
  return result.taskId;
}
- (TaskPatrolDetail_Builder*) setTaskId:(NSString*) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (TaskPatrolDetail_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = @"";
  return self;
}
- (BOOL) hasPatrolId {
  return result.hasPatrolId;
}
- (int32_t) patrolId {
  return result.patrolId;
}
- (TaskPatrolDetail_Builder*) setPatrolId:(int32_t) value {
  result.hasPatrolId = YES;
  result.patrolId = value;
  return self;
}
- (TaskPatrolDetail_Builder*) clearPatrolId {
  result.hasPatrolId = NO;
  result.patrolId = 0;
  return self;
}
- (BOOL) hasPatrol {
  return result.hasPatrol;
}
- (Patrol*) patrol {
  return result.patrol;
}
- (TaskPatrolDetail_Builder*) setPatrol:(Patrol*) value {
  result.hasPatrol = YES;
  result.patrol = value;
  return self;
}
- (TaskPatrolDetail_Builder*) setPatrolBuilder:(Patrol_Builder*) builderForValue {
  return [self setPatrol:[builderForValue build]];
}
- (TaskPatrolDetail_Builder*) mergePatrol:(Patrol*) value {
  if (result.hasPatrol &&
      result.patrol != [Patrol defaultInstance]) {
    result.patrol =
      [[[Patrol builderWithPrototype:result.patrol] mergeFrom:value] buildPartial];
  } else {
    result.patrol = value;
  }
  result.hasPatrol = YES;
  return self;
}
- (TaskPatrolDetail_Builder*) clearPatrol {
  result.hasPatrol = NO;
  result.patrol = [Patrol defaultInstance];
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (TaskPatrolDetail_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (TaskPatrolDetail_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (TaskPatrolDetail_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (TaskPatrolDetail_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasCustomer {
  return result.hasCustomer;
}
- (Customer*) customer {
  return result.customer;
}
- (TaskPatrolDetail_Builder*) setCustomer:(Customer*) value {
  result.hasCustomer = YES;
  result.customer = value;
  return self;
}
- (TaskPatrolDetail_Builder*) setCustomerBuilder:(Customer_Builder*) builderForValue {
  return [self setCustomer:[builderForValue build]];
}
- (TaskPatrolDetail_Builder*) mergeCustomer:(Customer*) value {
  if (result.hasCustomer &&
      result.customer != [Customer defaultInstance]) {
    result.customer =
      [[[Customer builderWithPrototype:result.customer] mergeFrom:value] buildPartial];
  } else {
    result.customer = value;
  }
  result.hasCustomer = YES;
  return self;
}
- (TaskPatrolDetail_Builder*) clearCustomer {
  result.hasCustomer = NO;
  result.customer = [Customer defaultInstance];
  return self;
}
- (BOOL) hasTaskStatus {
  return result.hasTaskStatus;
}
- (int32_t) taskStatus {
  return result.taskStatus;
}
- (TaskPatrolDetail_Builder*) setTaskStatus:(int32_t) value {
  result.hasTaskStatus = YES;
  result.taskStatus = value;
  return self;
}
- (TaskPatrolDetail_Builder*) clearTaskStatus {
  result.hasTaskStatus = NO;
  result.taskStatus = 0;
  return self;
}
- (BOOL) hasFinishDate {
  return result.hasFinishDate;
}
- (NSString*) finishDate {
  return result.finishDate;
}
- (TaskPatrolDetail_Builder*) setFinishDate:(NSString*) value {
  result.hasFinishDate = YES;
  result.finishDate = value;
  return self;
}
- (TaskPatrolDetail_Builder*) clearFinishDate {
  result.hasFinishDate = NO;
  result.finishDate = @"";
  return self;
}
@end

@interface TaskPatrolParams ()
@property int32_t taskType;
@property int32_t taskStatus;
@property (retain) PBAppendableArray * paramUsersArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property (retain) NSString* source;
@property (retain) PBAppendableArray * departmentsArray;
@property int32_t page;
@property (retain) NSString* id;
@end

@implementation TaskPatrolParams

- (BOOL) hasTaskType {
  return !!hasTaskType_;
}
- (void) setHasTaskType:(BOOL) value_ {
  hasTaskType_ = !!value_;
}
@synthesize taskType;
- (BOOL) hasTaskStatus {
  return !!hasTaskStatus_;
}
- (void) setHasTaskStatus:(BOOL) value_ {
  hasTaskStatus_ = !!value_;
}
@synthesize taskStatus;
@synthesize paramUsersArray;
@dynamic paramUsers;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) value_ {
  hasSource_ = !!value_;
}
@synthesize source;
@synthesize departmentsArray;
@dynamic departments;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.paramUsersArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  self.source = nil;
  self.departmentsArray = nil;
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.taskType = 0;
    self.taskStatus = 0;
    self.startDate = @"";
    self.endDate = @"";
    self.source = @"";
    self.page = 0;
    self.id = @"";
  }
  return self;
}
static TaskPatrolParams* defaultTaskPatrolParamsInstance = nil;
+ (void) initialize {
  if (self == [TaskPatrolParams class]) {
    defaultTaskPatrolParamsInstance = [[TaskPatrolParams alloc] init];
  }
}
+ (TaskPatrolParams*) defaultInstance {
  return defaultTaskPatrolParamsInstance;
}
- (TaskPatrolParams*) defaultInstance {
  return defaultTaskPatrolParamsInstance;
}
- (PBArray *)paramUsers {
  return paramUsersArray;
}
- (User*)paramUsersAtIndex:(NSUInteger)index {
  return [paramUsersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (User* element in self.paramUsers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskType) {
    [output writeInt32:1 value:self.taskType];
  }
  if (self.hasTaskStatus) {
    [output writeInt32:2 value:self.taskStatus];
  }
  for (User *element in self.paramUsersArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:4 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:5 value:self.endDate];
  }
  if (self.hasSource) {
    [output writeString:6 value:self.source];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasPage) {
    [output writeInt32:8 value:self.page];
  }
  if (self.hasId) {
    [output writeString:9 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskType) {
    size_ += computeInt32Size(1, self.taskType);
  }
  if (self.hasTaskStatus) {
    size_ += computeInt32Size(2, self.taskStatus);
  }
  for (User *element in self.paramUsersArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(4, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(5, self.endDate);
  }
  if (self.hasSource) {
    size_ += computeStringSize(6, self.source);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(7, element);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(8, self.page);
  }
  if (self.hasId) {
    size_ += computeStringSize(9, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskPatrolParams*) parseFromData:(NSData*) data {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromData:data] build];
}
+ (TaskPatrolParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolParams*) parseFromInputStream:(NSInputStream*) input {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromInputStream:input] build];
}
+ (TaskPatrolParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromCodedInputStream:input] build];
}
+ (TaskPatrolParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolParams*)[[[TaskPatrolParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolParams_Builder*) builder {
  return [[[TaskPatrolParams_Builder alloc] init] autorelease];
}
+ (TaskPatrolParams_Builder*) builderWithPrototype:(TaskPatrolParams*) prototype {
  return [[TaskPatrolParams builder] mergeFrom:prototype];
}
- (TaskPatrolParams_Builder*) builder {
  return [TaskPatrolParams builder];
}
- (TaskPatrolParams_Builder*) toBuilder {
  return [TaskPatrolParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskType", [NSNumber numberWithInt:self.taskType]];
  }
  if (self.hasTaskStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskStatus", [NSNumber numberWithInt:self.taskStatus]];
  }
  for (User* element in self.paramUsersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"paramUsers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskPatrolParams class]]) {
    return NO;
  }
  TaskPatrolParams *otherMessage = other;
  return
      self.hasTaskType == otherMessage.hasTaskType &&
      (!self.hasTaskType || self.taskType == otherMessage.taskType) &&
      self.hasTaskStatus == otherMessage.hasTaskStatus &&
      (!self.hasTaskStatus || self.taskStatus == otherMessage.taskStatus) &&
      [self.paramUsersArray isEqualToArray:otherMessage.paramUsersArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTaskType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskType] hash];
  }
  if (self.hasTaskStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskStatus] hash];
  }
  for (User* element in self.paramUsersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskPatrolParams_Builder()
@property (retain) TaskPatrolParams* result;
@end

@implementation TaskPatrolParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TaskPatrolParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskPatrolParams_Builder*) clear {
  self.result = [[[TaskPatrolParams alloc] init] autorelease];
  return self;
}
- (TaskPatrolParams_Builder*) clone {
  return [TaskPatrolParams builderWithPrototype:result];
}
- (TaskPatrolParams*) defaultInstance {
  return [TaskPatrolParams defaultInstance];
}
- (TaskPatrolParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskPatrolParams*) buildPartial {
  TaskPatrolParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TaskPatrolParams_Builder*) mergeFrom:(TaskPatrolParams*) other {
  if (other == [TaskPatrolParams defaultInstance]) {
    return self;
  }
  if (other.hasTaskType) {
    [self setTaskType:other.taskType];
  }
  if (other.hasTaskStatus) {
    [self setTaskStatus:other.taskStatus];
  }
  if (other.paramUsersArray.count > 0) {
    if (result.paramUsersArray == nil) {
      result.paramUsersArray = [[other.paramUsersArray copyWithZone:[other.paramUsersArray zone]] autorelease];
    } else {
      [result.paramUsersArray appendArray:other.paramUsersArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskPatrolParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskPatrolParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTaskType:[input readInt32]];
        break;
      }
      case 16: {
        [self setTaskStatus:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addParamUsers:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStartDate:[input readString]];
        break;
      }
      case 42: {
        [self setEndDate:[input readString]];
        break;
      }
      case 50: {
        [self setSource:[input readString]];
        break;
      }
      case 58: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setPage:[input readInt32]];
        break;
      }
      case 74: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskType {
  return result.hasTaskType;
}
- (int32_t) taskType {
  return result.taskType;
}
- (TaskPatrolParams_Builder*) setTaskType:(int32_t) value {
  result.hasTaskType = YES;
  result.taskType = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearTaskType {
  result.hasTaskType = NO;
  result.taskType = 0;
  return self;
}
- (BOOL) hasTaskStatus {
  return result.hasTaskStatus;
}
- (int32_t) taskStatus {
  return result.taskStatus;
}
- (TaskPatrolParams_Builder*) setTaskStatus:(int32_t) value {
  result.hasTaskStatus = YES;
  result.taskStatus = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearTaskStatus {
  result.hasTaskStatus = NO;
  result.taskStatus = 0;
  return self;
}
- (PBAppendableArray *)paramUsers {
  return result.paramUsersArray;
}
- (User*)paramUsersAtIndex:(NSUInteger)index {
  return [result paramUsersAtIndex:index];
}
- (TaskPatrolParams_Builder *)addParamUsers:(User*)value {
  if (result.paramUsersArray == nil) {
    result.paramUsersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.paramUsersArray addObject:value];
  return self;
}
- (TaskPatrolParams_Builder *)setParamUsersArray:(NSArray *)array {
  result.paramUsersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolParams_Builder *)setParamUsersValues:(const User* *)values count:(NSUInteger)count {
  result.paramUsersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolParams_Builder *)clearParamUsers {
  result.paramUsersArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (TaskPatrolParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (TaskPatrolParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasSource {
  return result.hasSource;
}
- (NSString*) source {
  return result.source;
}
- (TaskPatrolParams_Builder*) setSource:(NSString*) value {
  result.hasSource = YES;
  result.source = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearSource {
  result.hasSource = NO;
  result.source = @"";
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (TaskPatrolParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (TaskPatrolParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (TaskPatrolParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (TaskPatrolParams_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TaskPatrolParams_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
@end

@interface PageTaskPatrol ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * taskPatrolsArray;
@end

@implementation PageTaskPatrol

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize taskPatrolsArray;
@dynamic taskPatrols;
- (void) dealloc {
  self.page = nil;
  self.taskPatrolsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageTaskPatrol* defaultPageTaskPatrolInstance = nil;
+ (void) initialize {
  if (self == [PageTaskPatrol class]) {
    defaultPageTaskPatrolInstance = [[PageTaskPatrol alloc] init];
  }
}
+ (PageTaskPatrol*) defaultInstance {
  return defaultPageTaskPatrolInstance;
}
- (PageTaskPatrol*) defaultInstance {
  return defaultPageTaskPatrolInstance;
}
- (PBArray *)taskPatrols {
  return taskPatrolsArray;
}
- (TaskPatrol*)taskPatrolsAtIndex:(NSUInteger)index {
  return [taskPatrolsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (TaskPatrol* element in self.taskPatrols) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (TaskPatrol *element in self.taskPatrolsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (TaskPatrol *element in self.taskPatrolsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageTaskPatrol*) parseFromData:(NSData*) data {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromData:data] build];
}
+ (PageTaskPatrol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageTaskPatrol*) parseFromInputStream:(NSInputStream*) input {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromInputStream:input] build];
}
+ (PageTaskPatrol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageTaskPatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromCodedInputStream:input] build];
}
+ (PageTaskPatrol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageTaskPatrol*)[[[PageTaskPatrol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageTaskPatrol_Builder*) builder {
  return [[[PageTaskPatrol_Builder alloc] init] autorelease];
}
+ (PageTaskPatrol_Builder*) builderWithPrototype:(PageTaskPatrol*) prototype {
  return [[PageTaskPatrol builder] mergeFrom:prototype];
}
- (PageTaskPatrol_Builder*) builder {
  return [PageTaskPatrol builder];
}
- (PageTaskPatrol_Builder*) toBuilder {
  return [PageTaskPatrol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TaskPatrol* element in self.taskPatrolsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"taskPatrols"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageTaskPatrol class]]) {
    return NO;
  }
  PageTaskPatrol *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.taskPatrolsArray isEqualToArray:otherMessage.taskPatrolsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (TaskPatrol* element in self.taskPatrolsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageTaskPatrol_Builder()
@property (retain) PageTaskPatrol* result;
@end

@implementation PageTaskPatrol_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageTaskPatrol alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageTaskPatrol_Builder*) clear {
  self.result = [[[PageTaskPatrol alloc] init] autorelease];
  return self;
}
- (PageTaskPatrol_Builder*) clone {
  return [PageTaskPatrol builderWithPrototype:result];
}
- (PageTaskPatrol*) defaultInstance {
  return [PageTaskPatrol defaultInstance];
}
- (PageTaskPatrol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageTaskPatrol*) buildPartial {
  PageTaskPatrol* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageTaskPatrol_Builder*) mergeFrom:(PageTaskPatrol*) other {
  if (other == [PageTaskPatrol defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.taskPatrolsArray.count > 0) {
    if (result.taskPatrolsArray == nil) {
      result.taskPatrolsArray = [[other.taskPatrolsArray copyWithZone:[other.taskPatrolsArray zone]] autorelease];
    } else {
      [result.taskPatrolsArray appendArray:other.taskPatrolsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageTaskPatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageTaskPatrol_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TaskPatrol_Builder* subBuilder = [TaskPatrol builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTaskPatrols:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageTaskPatrol_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageTaskPatrol_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageTaskPatrol_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageTaskPatrol_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)taskPatrols {
  return result.taskPatrolsArray;
}
- (TaskPatrol*)taskPatrolsAtIndex:(NSUInteger)index {
  return [result taskPatrolsAtIndex:index];
}
- (PageTaskPatrol_Builder *)addTaskPatrols:(TaskPatrol*)value {
  if (result.taskPatrolsArray == nil) {
    result.taskPatrolsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.taskPatrolsArray addObject:value];
  return self;
}
- (PageTaskPatrol_Builder *)setTaskPatrolsArray:(NSArray *)array {
  result.taskPatrolsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageTaskPatrol_Builder *)setTaskPatrolsValues:(const TaskPatrol* *)values count:(NSUInteger)count {
  result.taskPatrolsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageTaskPatrol_Builder *)clearTaskPatrols {
  result.taskPatrolsArray = nil;
  return self;
}
@end

@interface TaskPatrolDetailParams ()
@property (retain) NSString* taskId;
@property (retain) NSString* startDate;
@end

@implementation TaskPatrolDetailParams

- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (void) dealloc {
  self.taskId = nil;
  self.startDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.taskId = @"";
    self.startDate = @"";
  }
  return self;
}
static TaskPatrolDetailParams* defaultTaskPatrolDetailParamsInstance = nil;
+ (void) initialize {
  if (self == [TaskPatrolDetailParams class]) {
    defaultTaskPatrolDetailParamsInstance = [[TaskPatrolDetailParams alloc] init];
  }
}
+ (TaskPatrolDetailParams*) defaultInstance {
  return defaultTaskPatrolDetailParamsInstance;
}
- (TaskPatrolDetailParams*) defaultInstance {
  return defaultTaskPatrolDetailParamsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskId) {
    [output writeString:1 value:self.taskId];
  }
  if (self.hasStartDate) {
    [output writeString:2 value:self.startDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskId) {
    size_ += computeStringSize(1, self.taskId);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(2, self.startDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskPatrolDetailParams*) parseFromData:(NSData*) data {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromData:data] build];
}
+ (TaskPatrolDetailParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetailParams*) parseFromInputStream:(NSInputStream*) input {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromInputStream:input] build];
}
+ (TaskPatrolDetailParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetailParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromCodedInputStream:input] build];
}
+ (TaskPatrolDetailParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolDetailParams*)[[[TaskPatrolDetailParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolDetailParams_Builder*) builder {
  return [[[TaskPatrolDetailParams_Builder alloc] init] autorelease];
}
+ (TaskPatrolDetailParams_Builder*) builderWithPrototype:(TaskPatrolDetailParams*) prototype {
  return [[TaskPatrolDetailParams builder] mergeFrom:prototype];
}
- (TaskPatrolDetailParams_Builder*) builder {
  return [TaskPatrolDetailParams builder];
}
- (TaskPatrolDetailParams_Builder*) toBuilder {
  return [TaskPatrolDetailParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskPatrolDetailParams class]]) {
    return NO;
  }
  TaskPatrolDetailParams *otherMessage = other;
  return
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskPatrolDetailParams_Builder()
@property (retain) TaskPatrolDetailParams* result;
@end

@implementation TaskPatrolDetailParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TaskPatrolDetailParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskPatrolDetailParams_Builder*) clear {
  self.result = [[[TaskPatrolDetailParams alloc] init] autorelease];
  return self;
}
- (TaskPatrolDetailParams_Builder*) clone {
  return [TaskPatrolDetailParams builderWithPrototype:result];
}
- (TaskPatrolDetailParams*) defaultInstance {
  return [TaskPatrolDetailParams defaultInstance];
}
- (TaskPatrolDetailParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskPatrolDetailParams*) buildPartial {
  TaskPatrolDetailParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TaskPatrolDetailParams_Builder*) mergeFrom:(TaskPatrolDetailParams*) other {
  if (other == [TaskPatrolDetailParams defaultInstance]) {
    return self;
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskPatrolDetailParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskPatrolDetailParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTaskId:[input readString]];
        break;
      }
      case 18: {
        [self setStartDate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (NSString*) taskId {
  return result.taskId;
}
- (TaskPatrolDetailParams_Builder*) setTaskId:(NSString*) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (TaskPatrolDetailParams_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = @"";
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (TaskPatrolDetailParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (TaskPatrolDetailParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
@end

@interface TaskPatrolReply ()
@property int32_t id;
@property (retain) NSString* taskId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation TaskPatrolReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.taskId = nil;
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.taskId = @"";
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static TaskPatrolReply* defaultTaskPatrolReplyInstance = nil;
+ (void) initialize {
  if (self == [TaskPatrolReply class]) {
    defaultTaskPatrolReplyInstance = [[TaskPatrolReply alloc] init];
  }
}
+ (TaskPatrolReply*) defaultInstance {
  return defaultTaskPatrolReplyInstance;
}
- (TaskPatrolReply*) defaultInstance {
  return defaultTaskPatrolReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasTaskId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasTaskId) {
    [output writeString:2 value:self.taskId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasTaskId) {
    size_ += computeStringSize(2, self.taskId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskPatrolReply*) parseFromData:(NSData*) data {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromData:data] build];
}
+ (TaskPatrolReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolReply*) parseFromInputStream:(NSInputStream*) input {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromInputStream:input] build];
}
+ (TaskPatrolReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromCodedInputStream:input] build];
}
+ (TaskPatrolReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskPatrolReply*)[[[TaskPatrolReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskPatrolReply_Builder*) builder {
  return [[[TaskPatrolReply_Builder alloc] init] autorelease];
}
+ (TaskPatrolReply_Builder*) builderWithPrototype:(TaskPatrolReply*) prototype {
  return [[TaskPatrolReply builder] mergeFrom:prototype];
}
- (TaskPatrolReply_Builder*) builder {
  return [TaskPatrolReply builder];
}
- (TaskPatrolReply_Builder*) toBuilder {
  return [TaskPatrolReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", self.taskId];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskPatrolReply class]]) {
    return NO;
  }
  TaskPatrolReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || [self.taskId isEqual:otherMessage.taskId]) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [self.taskId hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskPatrolReply_Builder()
@property (retain) TaskPatrolReply* result;
@end

@implementation TaskPatrolReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TaskPatrolReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskPatrolReply_Builder*) clear {
  self.result = [[[TaskPatrolReply alloc] init] autorelease];
  return self;
}
- (TaskPatrolReply_Builder*) clone {
  return [TaskPatrolReply builderWithPrototype:result];
}
- (TaskPatrolReply*) defaultInstance {
  return [TaskPatrolReply defaultInstance];
}
- (TaskPatrolReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskPatrolReply*) buildPartial {
  TaskPatrolReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TaskPatrolReply_Builder*) mergeFrom:(TaskPatrolReply*) other {
  if (other == [TaskPatrolReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskPatrolReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskPatrolReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setTaskId:[input readString]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (TaskPatrolReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TaskPatrolReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (NSString*) taskId {
  return result.taskId;
}
- (TaskPatrolReply_Builder*) setTaskId:(NSString*) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (TaskPatrolReply_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = @"";
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (TaskPatrolReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (TaskPatrolReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (TaskPatrolReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (TaskPatrolReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (TaskPatrolReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (TaskPatrolReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (TaskPatrolReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (TaskPatrolReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (TaskPatrolReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (TaskPatrolReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (TaskPatrolReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (TaskPatrolReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (TaskPatrolReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (TaskPatrolReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (TaskPatrolReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

