// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MarketResearch.pb.h"

@implementation MarketResearchRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MarketResearchRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [CustomerRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MarketResearch ()
@property int32_t id;
@property (retain) Customer* customer;
@property (retain) NSString* businessArea;
@property (retain) Location* location;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) NSString* businessSize;
@property (retain) NSString* createDate;
@property (retain) NSString* primaryProduct;
@property (retain) NSString* turnover;
@property (retain) NSString* remarks;
@property (retain) NSString* businessCategory;
@property (retain) PBAppendableArray * marketResearchRepliesArray;
@property (retain) User* user;
@property int32_t replyCount;
@property (retain) NSString* cameraCategory;
@end

@implementation MarketResearch

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasCustomer {
  return !!hasCustomer_;
}
- (void) setHasCustomer:(BOOL) value_ {
  hasCustomer_ = !!value_;
}
@synthesize customer;
- (BOOL) hasBusinessArea {
  return !!hasBusinessArea_;
}
- (void) setHasBusinessArea:(BOOL) value_ {
  hasBusinessArea_ = !!value_;
}
@synthesize businessArea;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (BOOL) hasBusinessSize {
  return !!hasBusinessSize_;
}
- (void) setHasBusinessSize:(BOOL) value_ {
  hasBusinessSize_ = !!value_;
}
@synthesize businessSize;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
- (BOOL) hasPrimaryProduct {
  return !!hasPrimaryProduct_;
}
- (void) setHasPrimaryProduct:(BOOL) value_ {
  hasPrimaryProduct_ = !!value_;
}
@synthesize primaryProduct;
- (BOOL) hasTurnover {
  return !!hasTurnover_;
}
- (void) setHasTurnover:(BOOL) value_ {
  hasTurnover_ = !!value_;
}
@synthesize turnover;
- (BOOL) hasRemarks {
  return !!hasRemarks_;
}
- (void) setHasRemarks:(BOOL) value_ {
  hasRemarks_ = !!value_;
}
@synthesize remarks;
- (BOOL) hasBusinessCategory {
  return !!hasBusinessCategory_;
}
- (void) setHasBusinessCategory:(BOOL) value_ {
  hasBusinessCategory_ = !!value_;
}
@synthesize businessCategory;
@synthesize marketResearchRepliesArray;
@dynamic marketResearchReplies;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasCameraCategory {
  return !!hasCameraCategory_;
}
- (void) setHasCameraCategory:(BOOL) value_ {
  hasCameraCategory_ = !!value_;
}
@synthesize cameraCategory;
- (void) dealloc {
  self.customer = nil;
  self.businessArea = nil;
  self.location = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  self.businessSize = nil;
  self.createDate = nil;
  self.primaryProduct = nil;
  self.turnover = nil;
  self.remarks = nil;
  self.businessCategory = nil;
  self.marketResearchRepliesArray = nil;
  self.user = nil;
  self.cameraCategory = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.customer = [Customer defaultInstance];
    self.businessArea = @"";
    self.location = [Location defaultInstance];
    self.businessSize = @"";
    self.createDate = @"";
    self.primaryProduct = @"";
    self.turnover = @"";
    self.remarks = @"";
    self.businessCategory = @"";
    self.user = [User defaultInstance];
    self.replyCount = 0;
    self.cameraCategory = @"";
  }
  return self;
}
static MarketResearch* defaultMarketResearchInstance = nil;
+ (void) initialize {
  if (self == [MarketResearch class]) {
    defaultMarketResearchInstance = [[MarketResearch alloc] init];
  }
}
+ (MarketResearch*) defaultInstance {
  return defaultMarketResearchInstance;
}
- (MarketResearch*) defaultInstance {
  return defaultMarketResearchInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (PBArray *)marketResearchReplies {
  return marketResearchRepliesArray;
}
- (MarketResearchReply*)marketResearchRepliesAtIndex:(NSUInteger)index {
  return [marketResearchRepliesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasCustomer) {
    if (!self.customer.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (MarketResearchReply* element in self.marketResearchReplies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCustomer) {
    [output writeMessage:2 value:self.customer];
  }
  if (self.hasBusinessArea) {
    [output writeString:3 value:self.businessArea];
  }
  if (self.hasLocation) {
    [output writeMessage:4 value:self.location];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:5 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:6 value:values[i]];
    }
  }
  if (self.hasBusinessSize) {
    [output writeString:7 value:self.businessSize];
  }
  if (self.hasCreateDate) {
    [output writeString:8 value:self.createDate];
  }
  if (self.hasPrimaryProduct) {
    [output writeString:9 value:self.primaryProduct];
  }
  if (self.hasTurnover) {
    [output writeString:10 value:self.turnover];
  }
  if (self.hasRemarks) {
    [output writeString:11 value:self.remarks];
  }
  if (self.hasBusinessCategory) {
    [output writeString:12 value:self.businessCategory];
  }
  for (MarketResearchReply *element in self.marketResearchRepliesArray) {
    [output writeMessage:13 value:element];
  }
  if (self.hasUser) {
    [output writeMessage:14 value:self.user];
  }
  if (self.hasReplyCount) {
    [output writeInt32:15 value:self.replyCount];
  }
  if (self.hasCameraCategory) {
    [output writeString:16 value:self.cameraCategory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasCustomer) {
    size_ += computeMessageSize(2, self.customer);
  }
  if (self.hasBusinessArea) {
    size_ += computeStringSize(3, self.businessArea);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(4, self.location);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasBusinessSize) {
    size_ += computeStringSize(7, self.businessSize);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(8, self.createDate);
  }
  if (self.hasPrimaryProduct) {
    size_ += computeStringSize(9, self.primaryProduct);
  }
  if (self.hasTurnover) {
    size_ += computeStringSize(10, self.turnover);
  }
  if (self.hasRemarks) {
    size_ += computeStringSize(11, self.remarks);
  }
  if (self.hasBusinessCategory) {
    size_ += computeStringSize(12, self.businessCategory);
  }
  for (MarketResearchReply *element in self.marketResearchRepliesArray) {
    size_ += computeMessageSize(13, element);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(14, self.user);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(15, self.replyCount);
  }
  if (self.hasCameraCategory) {
    size_ += computeStringSize(16, self.cameraCategory);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MarketResearch*) parseFromData:(NSData*) data {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromData:data] build];
}
+ (MarketResearch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarketResearch*) parseFromInputStream:(NSInputStream*) input {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromInputStream:input] build];
}
+ (MarketResearch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromCodedInputStream:input] build];
}
+ (MarketResearch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearch*)[[[MarketResearch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearch_Builder*) builder {
  return [[[MarketResearch_Builder alloc] init] autorelease];
}
+ (MarketResearch_Builder*) builderWithPrototype:(MarketResearch*) prototype {
  return [[MarketResearch builder] mergeFrom:prototype];
}
- (MarketResearch_Builder*) builder {
  return [MarketResearch builder];
}
- (MarketResearch_Builder*) toBuilder {
  return [MarketResearch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasCustomer) {
    [output appendFormat:@"%@%@ {\n", indent, @"customer"];
    [self.customer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBusinessArea) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessArea", self.businessArea];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  if (self.hasBusinessSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessSize", self.businessSize];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  if (self.hasPrimaryProduct) {
    [output appendFormat:@"%@%@: %@\n", indent, @"primaryProduct", self.primaryProduct];
  }
  if (self.hasTurnover) {
    [output appendFormat:@"%@%@: %@\n", indent, @"turnover", self.turnover];
  }
  if (self.hasRemarks) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remarks", self.remarks];
  }
  if (self.hasBusinessCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"businessCategory", self.businessCategory];
  }
  for (MarketResearchReply* element in self.marketResearchRepliesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"marketResearchReplies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  if (self.hasCameraCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cameraCategory", self.cameraCategory];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarketResearch class]]) {
    return NO;
  }
  MarketResearch *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCustomer == otherMessage.hasCustomer &&
      (!self.hasCustomer || [self.customer isEqual:otherMessage.customer]) &&
      self.hasBusinessArea == otherMessage.hasBusinessArea &&
      (!self.hasBusinessArea || [self.businessArea isEqual:otherMessage.businessArea]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      self.hasBusinessSize == otherMessage.hasBusinessSize &&
      (!self.hasBusinessSize || [self.businessSize isEqual:otherMessage.businessSize]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      self.hasPrimaryProduct == otherMessage.hasPrimaryProduct &&
      (!self.hasPrimaryProduct || [self.primaryProduct isEqual:otherMessage.primaryProduct]) &&
      self.hasTurnover == otherMessage.hasTurnover &&
      (!self.hasTurnover || [self.turnover isEqual:otherMessage.turnover]) &&
      self.hasRemarks == otherMessage.hasRemarks &&
      (!self.hasRemarks || [self.remarks isEqual:otherMessage.remarks]) &&
      self.hasBusinessCategory == otherMessage.hasBusinessCategory &&
      (!self.hasBusinessCategory || [self.businessCategory isEqual:otherMessage.businessCategory]) &&
      [self.marketResearchRepliesArray isEqualToArray:otherMessage.marketResearchRepliesArray] &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasCameraCategory == otherMessage.hasCameraCategory &&
      (!self.hasCameraCategory || [self.cameraCategory isEqual:otherMessage.cameraCategory]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasCustomer) {
    hashCode = hashCode * 31 + [self.customer hash];
  }
  if (self.hasBusinessArea) {
    hashCode = hashCode * 31 + [self.businessArea hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasBusinessSize) {
    hashCode = hashCode * 31 + [self.businessSize hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  if (self.hasPrimaryProduct) {
    hashCode = hashCode * 31 + [self.primaryProduct hash];
  }
  if (self.hasTurnover) {
    hashCode = hashCode * 31 + [self.turnover hash];
  }
  if (self.hasRemarks) {
    hashCode = hashCode * 31 + [self.remarks hash];
  }
  if (self.hasBusinessCategory) {
    hashCode = hashCode * 31 + [self.businessCategory hash];
  }
  for (MarketResearchReply* element in self.marketResearchRepliesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  if (self.hasCameraCategory) {
    hashCode = hashCode * 31 + [self.cameraCategory hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarketResearch_Builder()
@property (retain) MarketResearch* result;
@end

@implementation MarketResearch_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MarketResearch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarketResearch_Builder*) clear {
  self.result = [[[MarketResearch alloc] init] autorelease];
  return self;
}
- (MarketResearch_Builder*) clone {
  return [MarketResearch builderWithPrototype:result];
}
- (MarketResearch*) defaultInstance {
  return [MarketResearch defaultInstance];
}
- (MarketResearch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarketResearch*) buildPartial {
  MarketResearch* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MarketResearch_Builder*) mergeFrom:(MarketResearch*) other {
  if (other == [MarketResearch defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCustomer) {
    [self mergeCustomer:other.customer];
  }
  if (other.hasBusinessArea) {
    [self setBusinessArea:other.businessArea];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  if (other.hasBusinessSize) {
    [self setBusinessSize:other.businessSize];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.hasPrimaryProduct) {
    [self setPrimaryProduct:other.primaryProduct];
  }
  if (other.hasTurnover) {
    [self setTurnover:other.turnover];
  }
  if (other.hasRemarks) {
    [self setRemarks:other.remarks];
  }
  if (other.hasBusinessCategory) {
    [self setBusinessCategory:other.businessCategory];
  }
  if (other.marketResearchRepliesArray.count > 0) {
    if (result.marketResearchRepliesArray == nil) {
      result.marketResearchRepliesArray = [[other.marketResearchRepliesArray copyWithZone:[other.marketResearchRepliesArray zone]] autorelease];
    } else {
      [result.marketResearchRepliesArray appendArray:other.marketResearchRepliesArray];
    }
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasCameraCategory) {
    [self setCameraCategory:other.cameraCategory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarketResearch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarketResearch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        Customer_Builder* subBuilder = [Customer builder];
        if (self.hasCustomer) {
          [subBuilder mergeFrom:self.customer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustomer:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setBusinessArea:[input readString]];
        break;
      }
      case 34: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self addFiles:[input readData]];
        break;
      }
      case 50: {
        [self addFilePath:[input readString]];
        break;
      }
      case 58: {
        [self setBusinessSize:[input readString]];
        break;
      }
      case 66: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 74: {
        [self setPrimaryProduct:[input readString]];
        break;
      }
      case 82: {
        [self setTurnover:[input readString]];
        break;
      }
      case 90: {
        [self setRemarks:[input readString]];
        break;
      }
      case 98: {
        [self setBusinessCategory:[input readString]];
        break;
      }
      case 106: {
        MarketResearchReply_Builder* subBuilder = [MarketResearchReply builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMarketResearchReplies:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 120: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 130: {
        [self setCameraCategory:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (MarketResearch_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MarketResearch_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasCustomer {
  return result.hasCustomer;
}
- (Customer*) customer {
  return result.customer;
}
- (MarketResearch_Builder*) setCustomer:(Customer*) value {
  result.hasCustomer = YES;
  result.customer = value;
  return self;
}
- (MarketResearch_Builder*) setCustomerBuilder:(Customer_Builder*) builderForValue {
  return [self setCustomer:[builderForValue build]];
}
- (MarketResearch_Builder*) mergeCustomer:(Customer*) value {
  if (result.hasCustomer &&
      result.customer != [Customer defaultInstance]) {
    result.customer =
      [[[Customer builderWithPrototype:result.customer] mergeFrom:value] buildPartial];
  } else {
    result.customer = value;
  }
  result.hasCustomer = YES;
  return self;
}
- (MarketResearch_Builder*) clearCustomer {
  result.hasCustomer = NO;
  result.customer = [Customer defaultInstance];
  return self;
}
- (BOOL) hasBusinessArea {
  return result.hasBusinessArea;
}
- (NSString*) businessArea {
  return result.businessArea;
}
- (MarketResearch_Builder*) setBusinessArea:(NSString*) value {
  result.hasBusinessArea = YES;
  result.businessArea = value;
  return self;
}
- (MarketResearch_Builder*) clearBusinessArea {
  result.hasBusinessArea = NO;
  result.businessArea = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (MarketResearch_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (MarketResearch_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (MarketResearch_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (MarketResearch_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (MarketResearch_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (MarketResearch_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (MarketResearch_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (MarketResearch_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
- (BOOL) hasBusinessSize {
  return result.hasBusinessSize;
}
- (NSString*) businessSize {
  return result.businessSize;
}
- (MarketResearch_Builder*) setBusinessSize:(NSString*) value {
  result.hasBusinessSize = YES;
  result.businessSize = value;
  return self;
}
- (MarketResearch_Builder*) clearBusinessSize {
  result.hasBusinessSize = NO;
  result.businessSize = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (MarketResearch_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (MarketResearch_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (BOOL) hasPrimaryProduct {
  return result.hasPrimaryProduct;
}
- (NSString*) primaryProduct {
  return result.primaryProduct;
}
- (MarketResearch_Builder*) setPrimaryProduct:(NSString*) value {
  result.hasPrimaryProduct = YES;
  result.primaryProduct = value;
  return self;
}
- (MarketResearch_Builder*) clearPrimaryProduct {
  result.hasPrimaryProduct = NO;
  result.primaryProduct = @"";
  return self;
}
- (BOOL) hasTurnover {
  return result.hasTurnover;
}
- (NSString*) turnover {
  return result.turnover;
}
- (MarketResearch_Builder*) setTurnover:(NSString*) value {
  result.hasTurnover = YES;
  result.turnover = value;
  return self;
}
- (MarketResearch_Builder*) clearTurnover {
  result.hasTurnover = NO;
  result.turnover = @"";
  return self;
}
- (BOOL) hasRemarks {
  return result.hasRemarks;
}
- (NSString*) remarks {
  return result.remarks;
}
- (MarketResearch_Builder*) setRemarks:(NSString*) value {
  result.hasRemarks = YES;
  result.remarks = value;
  return self;
}
- (MarketResearch_Builder*) clearRemarks {
  result.hasRemarks = NO;
  result.remarks = @"";
  return self;
}
- (BOOL) hasBusinessCategory {
  return result.hasBusinessCategory;
}
- (NSString*) businessCategory {
  return result.businessCategory;
}
- (MarketResearch_Builder*) setBusinessCategory:(NSString*) value {
  result.hasBusinessCategory = YES;
  result.businessCategory = value;
  return self;
}
- (MarketResearch_Builder*) clearBusinessCategory {
  result.hasBusinessCategory = NO;
  result.businessCategory = @"";
  return self;
}
- (PBAppendableArray *)marketResearchReplies {
  return result.marketResearchRepliesArray;
}
- (MarketResearchReply*)marketResearchRepliesAtIndex:(NSUInteger)index {
  return [result marketResearchRepliesAtIndex:index];
}
- (MarketResearch_Builder *)addMarketResearchReplies:(MarketResearchReply*)value {
  if (result.marketResearchRepliesArray == nil) {
    result.marketResearchRepliesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.marketResearchRepliesArray addObject:value];
  return self;
}
- (MarketResearch_Builder *)setMarketResearchRepliesArray:(NSArray *)array {
  result.marketResearchRepliesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)setMarketResearchRepliesValues:(const MarketResearchReply* *)values count:(NSUInteger)count {
  result.marketResearchRepliesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearch_Builder *)clearMarketResearchReplies {
  result.marketResearchRepliesArray = nil;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (MarketResearch_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (MarketResearch_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (MarketResearch_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (MarketResearch_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (MarketResearch_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (MarketResearch_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
- (BOOL) hasCameraCategory {
  return result.hasCameraCategory;
}
- (NSString*) cameraCategory {
  return result.cameraCategory;
}
- (MarketResearch_Builder*) setCameraCategory:(NSString*) value {
  result.hasCameraCategory = YES;
  result.cameraCategory = value;
  return self;
}
- (MarketResearch_Builder*) clearCameraCategory {
  result.hasCameraCategory = NO;
  result.cameraCategory = @"";
  return self;
}
@end

@interface PageMarketResearch ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * marketResearchsArray;
@end

@implementation PageMarketResearch

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize marketResearchsArray;
@dynamic marketResearchs;
- (void) dealloc {
  self.page = nil;
  self.marketResearchsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageMarketResearch* defaultPageMarketResearchInstance = nil;
+ (void) initialize {
  if (self == [PageMarketResearch class]) {
    defaultPageMarketResearchInstance = [[PageMarketResearch alloc] init];
  }
}
+ (PageMarketResearch*) defaultInstance {
  return defaultPageMarketResearchInstance;
}
- (PageMarketResearch*) defaultInstance {
  return defaultPageMarketResearchInstance;
}
- (PBArray *)marketResearchs {
  return marketResearchsArray;
}
- (MarketResearch*)marketResearchsAtIndex:(NSUInteger)index {
  return [marketResearchsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (MarketResearch* element in self.marketResearchs) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (MarketResearch *element in self.marketResearchsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (MarketResearch *element in self.marketResearchsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageMarketResearch*) parseFromData:(NSData*) data {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromData:data] build];
}
+ (PageMarketResearch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageMarketResearch*) parseFromInputStream:(NSInputStream*) input {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromInputStream:input] build];
}
+ (PageMarketResearch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageMarketResearch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromCodedInputStream:input] build];
}
+ (PageMarketResearch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageMarketResearch*)[[[PageMarketResearch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageMarketResearch_Builder*) builder {
  return [[[PageMarketResearch_Builder alloc] init] autorelease];
}
+ (PageMarketResearch_Builder*) builderWithPrototype:(PageMarketResearch*) prototype {
  return [[PageMarketResearch builder] mergeFrom:prototype];
}
- (PageMarketResearch_Builder*) builder {
  return [PageMarketResearch builder];
}
- (PageMarketResearch_Builder*) toBuilder {
  return [PageMarketResearch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (MarketResearch* element in self.marketResearchsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"marketResearchs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageMarketResearch class]]) {
    return NO;
  }
  PageMarketResearch *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.marketResearchsArray isEqualToArray:otherMessage.marketResearchsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (MarketResearch* element in self.marketResearchsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageMarketResearch_Builder()
@property (retain) PageMarketResearch* result;
@end

@implementation PageMarketResearch_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageMarketResearch alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageMarketResearch_Builder*) clear {
  self.result = [[[PageMarketResearch alloc] init] autorelease];
  return self;
}
- (PageMarketResearch_Builder*) clone {
  return [PageMarketResearch builderWithPrototype:result];
}
- (PageMarketResearch*) defaultInstance {
  return [PageMarketResearch defaultInstance];
}
- (PageMarketResearch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageMarketResearch*) buildPartial {
  PageMarketResearch* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageMarketResearch_Builder*) mergeFrom:(PageMarketResearch*) other {
  if (other == [PageMarketResearch defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.marketResearchsArray.count > 0) {
    if (result.marketResearchsArray == nil) {
      result.marketResearchsArray = [[other.marketResearchsArray copyWithZone:[other.marketResearchsArray zone]] autorelease];
    } else {
      [result.marketResearchsArray appendArray:other.marketResearchsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageMarketResearch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageMarketResearch_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        MarketResearch_Builder* subBuilder = [MarketResearch builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMarketResearchs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageMarketResearch_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageMarketResearch_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageMarketResearch_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageMarketResearch_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)marketResearchs {
  return result.marketResearchsArray;
}
- (MarketResearch*)marketResearchsAtIndex:(NSUInteger)index {
  return [result marketResearchsAtIndex:index];
}
- (PageMarketResearch_Builder *)addMarketResearchs:(MarketResearch*)value {
  if (result.marketResearchsArray == nil) {
    result.marketResearchsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.marketResearchsArray addObject:value];
  return self;
}
- (PageMarketResearch_Builder *)setMarketResearchsArray:(NSArray *)array {
  result.marketResearchsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageMarketResearch_Builder *)setMarketResearchsValues:(const MarketResearch* *)values count:(NSUInteger)count {
  result.marketResearchsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageMarketResearch_Builder *)clearMarketResearchs {
  result.marketResearchsArray = nil;
  return self;
}
@end

@interface MarketResearchParams ()
@property int32_t page;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * customerCategoryArray;
@property (retain) PBAppendableArray * customersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) PBAppendableArray * companiesArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t id;
@end

@implementation MarketResearchParams

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
@synthesize customerCategoryArray;
@dynamic customerCategory;
@synthesize customersArray;
@dynamic customers;
@synthesize departmentsArray;
@dynamic departments;
@synthesize companiesArray;
@dynamic companies;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.usersArray = nil;
  self.customerCategoryArray = nil;
  self.customersArray = nil;
  self.departmentsArray = nil;
  self.companiesArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.startDate = @"";
    self.endDate = @"";
    self.id = 0;
  }
  return self;
}
static MarketResearchParams* defaultMarketResearchParamsInstance = nil;
+ (void) initialize {
  if (self == [MarketResearchParams class]) {
    defaultMarketResearchParamsInstance = [[MarketResearchParams alloc] init];
  }
}
+ (MarketResearchParams*) defaultInstance {
  return defaultMarketResearchParamsInstance;
}
- (MarketResearchParams*) defaultInstance {
  return defaultMarketResearchParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)customerCategory {
  return customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [customerCategoryArray objectAtIndex:index];
}
- (PBArray *)customers {
  return customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [customersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (PBArray *)companies {
  return companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [companiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (CustomerCategory* element in self.customerCategory) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Customer* element in self.customers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Company* element in self.companies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeInt32:1 value:self.page];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:2 value:element];
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    [output writeMessage:3 value:element];
  }
  for (Customer *element in self.customersArray) {
    [output writeMessage:4 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:5 value:element];
  }
  for (Company *element in self.companiesArray) {
    [output writeMessage:6 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:7 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:8 value:self.endDate];
  }
  if (self.hasId) {
    [output writeInt32:9 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeInt32Size(1, self.page);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(2, element);
  }
  for (CustomerCategory *element in self.customerCategoryArray) {
    size_ += computeMessageSize(3, element);
  }
  for (Customer *element in self.customersArray) {
    size_ += computeMessageSize(4, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(5, element);
  }
  for (Company *element in self.companiesArray) {
    size_ += computeMessageSize(6, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(7, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(8, self.endDate);
  }
  if (self.hasId) {
    size_ += computeInt32Size(9, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MarketResearchParams*) parseFromData:(NSData*) data {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromData:data] build];
}
+ (MarketResearchParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchParams*) parseFromInputStream:(NSInputStream*) input {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromInputStream:input] build];
}
+ (MarketResearchParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromCodedInputStream:input] build];
}
+ (MarketResearchParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchParams*)[[[MarketResearchParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchParams_Builder*) builder {
  return [[[MarketResearchParams_Builder alloc] init] autorelease];
}
+ (MarketResearchParams_Builder*) builderWithPrototype:(MarketResearchParams*) prototype {
  return [[MarketResearchParams builder] mergeFrom:prototype];
}
- (MarketResearchParams_Builder*) builder {
  return [MarketResearchParams builder];
}
- (MarketResearchParams_Builder*) toBuilder {
  return [MarketResearchParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customerCategory"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Customer* element in self.customersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Company* element in self.companiesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"companies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarketResearchParams class]]) {
    return NO;
  }
  MarketResearchParams *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.customerCategoryArray isEqualToArray:otherMessage.customerCategoryArray] &&
      [self.customersArray isEqualToArray:otherMessage.customersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      [self.companiesArray isEqualToArray:otherMessage.companiesArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (CustomerCategory* element in self.customerCategoryArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Customer* element in self.customersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Company* element in self.companiesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarketResearchParams_Builder()
@property (retain) MarketResearchParams* result;
@end

@implementation MarketResearchParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MarketResearchParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarketResearchParams_Builder*) clear {
  self.result = [[[MarketResearchParams alloc] init] autorelease];
  return self;
}
- (MarketResearchParams_Builder*) clone {
  return [MarketResearchParams builderWithPrototype:result];
}
- (MarketResearchParams*) defaultInstance {
  return [MarketResearchParams defaultInstance];
}
- (MarketResearchParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarketResearchParams*) buildPartial {
  MarketResearchParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MarketResearchParams_Builder*) mergeFrom:(MarketResearchParams*) other {
  if (other == [MarketResearchParams defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.customerCategoryArray.count > 0) {
    if (result.customerCategoryArray == nil) {
      result.customerCategoryArray = [[other.customerCategoryArray copyWithZone:[other.customerCategoryArray zone]] autorelease];
    } else {
      [result.customerCategoryArray appendArray:other.customerCategoryArray];
    }
  }
  if (other.customersArray.count > 0) {
    if (result.customersArray == nil) {
      result.customersArray = [[other.customersArray copyWithZone:[other.customersArray zone]] autorelease];
    } else {
      [result.customersArray appendArray:other.customersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.companiesArray.count > 0) {
    if (result.companiesArray == nil) {
      result.companiesArray = [[other.companiesArray copyWithZone:[other.companiesArray zone]] autorelease];
    } else {
      [result.companiesArray appendArray:other.companiesArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarketResearchParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarketResearchParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomerCategory:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Customer_Builder* subBuilder = [Customer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Company_Builder* subBuilder = [Company builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCompanies:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setStartDate:[input readString]];
        break;
      }
      case 66: {
        [self setEndDate:[input readString]];
        break;
      }
      case 72: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (MarketResearchParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (MarketResearchParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (MarketResearchParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (MarketResearchParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)customerCategory {
  return result.customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
  return [result customerCategoryAtIndex:index];
}
- (MarketResearchParams_Builder *)addCustomerCategory:(CustomerCategory*)value {
  if (result.customerCategoryArray == nil) {
    result.customerCategoryArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customerCategoryArray addObject:value];
  return self;
}
- (MarketResearchParams_Builder *)setCustomerCategoryArray:(NSArray *)array {
  result.customerCategoryArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)setCustomerCategoryValues:(const CustomerCategory* *)values count:(NSUInteger)count {
  result.customerCategoryArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)clearCustomerCategory {
  result.customerCategoryArray = nil;
  return self;
}
- (PBAppendableArray *)customers {
  return result.customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [result customersAtIndex:index];
}
- (MarketResearchParams_Builder *)addCustomers:(Customer*)value {
  if (result.customersArray == nil) {
    result.customersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customersArray addObject:value];
  return self;
}
- (MarketResearchParams_Builder *)setCustomersArray:(NSArray *)array {
  result.customersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)setCustomersValues:(const Customer* *)values count:(NSUInteger)count {
  result.customersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)clearCustomers {
  result.customersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (MarketResearchParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (MarketResearchParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (PBAppendableArray *)companies {
  return result.companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
  return [result companiesAtIndex:index];
}
- (MarketResearchParams_Builder *)addCompanies:(Company*)value {
  if (result.companiesArray == nil) {
    result.companiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.companiesArray addObject:value];
  return self;
}
- (MarketResearchParams_Builder *)setCompaniesArray:(NSArray *)array {
  result.companiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)setCompaniesValues:(const Company* *)values count:(NSUInteger)count {
  result.companiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchParams_Builder *)clearCompanies {
  result.companiesArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (MarketResearchParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (MarketResearchParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (MarketResearchParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (MarketResearchParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (MarketResearchParams_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MarketResearchParams_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface MarketResearchReply ()
@property int32_t id;
@property int32_t marketResearchId;
@property (retain) User* sender;
@property (retain) PBAppendableArray * receiversArray;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation MarketResearchReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasMarketResearchId {
  return !!hasMarketResearchId_;
}
- (void) setHasMarketResearchId:(BOOL) value_ {
  hasMarketResearchId_ = !!value_;
}
@synthesize marketResearchId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize receiversArray;
@dynamic receivers;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.receiversArray = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.marketResearchId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static MarketResearchReply* defaultMarketResearchReplyInstance = nil;
+ (void) initialize {
  if (self == [MarketResearchReply class]) {
    defaultMarketResearchReplyInstance = [[MarketResearchReply alloc] init];
  }
}
+ (MarketResearchReply*) defaultInstance {
  return defaultMarketResearchReplyInstance;
}
- (MarketResearchReply*) defaultInstance {
  return defaultMarketResearchReplyInstance;
}
- (PBArray *)receivers {
  return receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [receiversArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasMarketResearchId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.receivers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasMarketResearchId) {
    [output writeInt32:2 value:self.marketResearchId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  for (User *element in self.receiversArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasContent) {
    [output writeString:5 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:6 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:7 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:8 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasMarketResearchId) {
    size_ += computeInt32Size(2, self.marketResearchId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  for (User *element in self.receiversArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasContent) {
    size_ += computeStringSize(5, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(6, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MarketResearchReply*) parseFromData:(NSData*) data {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromData:data] build];
}
+ (MarketResearchReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchReply*) parseFromInputStream:(NSInputStream*) input {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromInputStream:input] build];
}
+ (MarketResearchReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromCodedInputStream:input] build];
}
+ (MarketResearchReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MarketResearchReply*)[[[MarketResearchReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MarketResearchReply_Builder*) builder {
  return [[[MarketResearchReply_Builder alloc] init] autorelease];
}
+ (MarketResearchReply_Builder*) builderWithPrototype:(MarketResearchReply*) prototype {
  return [[MarketResearchReply builder] mergeFrom:prototype];
}
- (MarketResearchReply_Builder*) builder {
  return [MarketResearchReply builder];
}
- (MarketResearchReply_Builder*) toBuilder {
  return [MarketResearchReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasMarketResearchId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketResearchId", [NSNumber numberWithInt:self.marketResearchId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.receiversArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"receivers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MarketResearchReply class]]) {
    return NO;
  }
  MarketResearchReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasMarketResearchId == otherMessage.hasMarketResearchId &&
      (!self.hasMarketResearchId || self.marketResearchId == otherMessage.marketResearchId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.receiversArray isEqualToArray:otherMessage.receiversArray] &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasMarketResearchId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.marketResearchId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  for (User* element in self.receiversArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MarketResearchReply_Builder()
@property (retain) MarketResearchReply* result;
@end

@implementation MarketResearchReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MarketResearchReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MarketResearchReply_Builder*) clear {
  self.result = [[[MarketResearchReply alloc] init] autorelease];
  return self;
}
- (MarketResearchReply_Builder*) clone {
  return [MarketResearchReply builderWithPrototype:result];
}
- (MarketResearchReply*) defaultInstance {
  return [MarketResearchReply defaultInstance];
}
- (MarketResearchReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MarketResearchReply*) buildPartial {
  MarketResearchReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MarketResearchReply_Builder*) mergeFrom:(MarketResearchReply*) other {
  if (other == [MarketResearchReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasMarketResearchId) {
    [self setMarketResearchId:other.marketResearchId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.receiversArray.count > 0) {
    if (result.receiversArray == nil) {
      result.receiversArray = [[other.receiversArray copyWithZone:[other.receiversArray zone]] autorelease];
    } else {
      [result.receiversArray appendArray:other.receiversArray];
    }
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MarketResearchReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MarketResearchReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMarketResearchId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReceivers:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setContent:[input readString]];
        break;
      }
      case 50: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 58: {
        [self addFiles:[input readData]];
        break;
      }
      case 66: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (MarketResearchReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (MarketResearchReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasMarketResearchId {
  return result.hasMarketResearchId;
}
- (int32_t) marketResearchId {
  return result.marketResearchId;
}
- (MarketResearchReply_Builder*) setMarketResearchId:(int32_t) value {
  result.hasMarketResearchId = YES;
  result.marketResearchId = value;
  return self;
}
- (MarketResearchReply_Builder*) clearMarketResearchId {
  result.hasMarketResearchId = NO;
  result.marketResearchId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (MarketResearchReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (MarketResearchReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (MarketResearchReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (MarketResearchReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (PBAppendableArray *)receivers {
  return result.receiversArray;
}
- (User*)receiversAtIndex:(NSUInteger)index {
  return [result receiversAtIndex:index];
}
- (MarketResearchReply_Builder *)addReceivers:(User*)value {
  if (result.receiversArray == nil) {
    result.receiversArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.receiversArray addObject:value];
  return self;
}
- (MarketResearchReply_Builder *)setReceiversArray:(NSArray *)array {
  result.receiversArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)setReceiversValues:(const User* *)values count:(NSUInteger)count {
  result.receiversArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)clearReceivers {
  result.receiversArray = nil;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MarketResearchReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MarketResearchReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (MarketResearchReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (MarketResearchReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (MarketResearchReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (MarketResearchReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (MarketResearchReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (MarketResearchReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (MarketResearchReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

