// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Customer.pb.h"

@implementation CustomerRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CustomerRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [ProductRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Customer ()
@property int32_t id;
@property (retain) NSString* name;
@property (retain) CustomerCategory* category;
@property (retain) PBAppendableArray * contactsArray;
@property (retain) PBAppendableArray * productsArray;
@property (retain) NSString* spell;
@property (retain) PBAppendableArray * usersArray;
@property BOOL isFav;
@property (retain) Location* location;
@property (retain) NSString* countData;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) NSString* highLightName;
@property (retain) PBAppendableArray * tagsArray;
@end

@implementation Customer

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
@synthesize contactsArray;
@dynamic contacts;
@synthesize productsArray;
@dynamic products;
- (BOOL) hasSpell {
  return !!hasSpell_;
}
- (void) setHasSpell:(BOOL) value_ {
  hasSpell_ = !!value_;
}
@synthesize spell;
@synthesize usersArray;
@dynamic users;
- (BOOL) hasIsFav {
  return !!hasIsFav_;
}
- (void) setHasIsFav:(BOOL) value_ {
  hasIsFav_ = !!value_;
}
- (BOOL) isFav {
  return !!isFav_;
}
- (void) setIsFav:(BOOL) value_ {
  isFav_ = !!value_;
}
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasCountData {
  return !!hasCountData_;
}
- (void) setHasCountData:(BOOL) value_ {
  hasCountData_ = !!value_;
}
@synthesize countData;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (BOOL) hasHighLightName {
  return !!hasHighLightName_;
}
- (void) setHasHighLightName:(BOOL) value_ {
  hasHighLightName_ = !!value_;
}
@synthesize highLightName;
@synthesize tagsArray;
@dynamic tags;
- (void) dealloc {
  self.name = nil;
  self.category = nil;
  self.contactsArray = nil;
  self.productsArray = nil;
  self.spell = nil;
  self.usersArray = nil;
  self.location = nil;
  self.countData = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  self.highLightName = nil;
  self.tagsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.category = [CustomerCategory defaultInstance];
    self.spell = @"";
    self.isFav = NO;
    self.location = [Location defaultInstance];
    self.countData = @"";
    self.highLightName = @"";
  }
  return self;
}
static Customer* defaultCustomerInstance = nil;
+ (void) initialize {
  if (self == [Customer class]) {
    defaultCustomerInstance = [[Customer alloc] init];
  }
}
+ (Customer*) defaultInstance {
  return defaultCustomerInstance;
}
- (Customer*) defaultInstance {
  return defaultCustomerInstance;
}
- (PBArray *)contacts {
  return contactsArray;
}
- (Contact*)contactsAtIndex:(NSUInteger)index {
  return [contactsArray objectAtIndex:index];
}
- (PBArray *)products {
  return productsArray;
}
- (Product*)productsAtIndex:(NSUInteger)index {
  return [productsArray objectAtIndex:index];
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (PBArray *)tags {
  return tagsArray;
}
- (CustomerTag*)tagsAtIndex:(NSUInteger)index {
  return [tagsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (Product* element in self.products) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (CustomerTag* element in self.tags) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasCategory) {
    [output writeMessage:3 value:self.category];
  }
  for (Contact *element in self.contactsArray) {
    [output writeMessage:4 value:element];
  }
  for (Product *element in self.productsArray) {
    [output writeMessage:5 value:element];
  }
  if (self.hasSpell) {
    [output writeString:6 value:self.spell];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:7 value:element];
  }
  if (self.hasIsFav) {
    [output writeBool:8 value:self.isFav];
  }
  if (self.hasLocation) {
    [output writeMessage:9 value:self.location];
  }
  if (self.hasCountData) {
    [output writeString:10 value:self.countData];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:11 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:12 value:values[i]];
    }
  }
  if (self.hasHighLightName) {
    [output writeString:13 value:self.highLightName];
  }
  for (CustomerTag *element in self.tagsArray) {
    [output writeMessage:14 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(3, self.category);
  }
  for (Contact *element in self.contactsArray) {
    size_ += computeMessageSize(4, element);
  }
  for (Product *element in self.productsArray) {
    size_ += computeMessageSize(5, element);
  }
  if (self.hasSpell) {
    size_ += computeStringSize(6, self.spell);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(7, element);
  }
  if (self.hasIsFav) {
    size_ += computeBoolSize(8, self.isFav);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(9, self.location);
  }
  if (self.hasCountData) {
    size_ += computeStringSize(10, self.countData);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasHighLightName) {
    size_ += computeStringSize(13, self.highLightName);
  }
  for (CustomerTag *element in self.tagsArray) {
    size_ += computeMessageSize(14, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Customer*) parseFromData:(NSData*) data {
  return (Customer*)[[[Customer builder] mergeFromData:data] build];
}
+ (Customer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Customer*)[[[Customer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Customer*) parseFromInputStream:(NSInputStream*) input {
  return (Customer*)[[[Customer builder] mergeFromInputStream:input] build];
}
+ (Customer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Customer*)[[[Customer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Customer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Customer*)[[[Customer builder] mergeFromCodedInputStream:input] build];
}
+ (Customer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Customer*)[[[Customer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Customer_Builder*) builder {
  return [[[Customer_Builder alloc] init] autorelease];
}
+ (Customer_Builder*) builderWithPrototype:(Customer*) prototype {
  return [[Customer builder] mergeFrom:prototype];
}
- (Customer_Builder*) builder {
  return [Customer builder];
}
- (Customer_Builder*) toBuilder {
  return [Customer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Contact* element in self.contactsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"contacts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Product* element in self.productsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"products"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSpell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spell", self.spell];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIsFav) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFav", [NSNumber numberWithBool:self.isFav]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCountData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countData", self.countData];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  if (self.hasHighLightName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"highLightName", self.highLightName];
  }
  for (CustomerTag* element in self.tagsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tags"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Customer class]]) {
    return NO;
  }
  Customer *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      [self.contactsArray isEqualToArray:otherMessage.contactsArray] &&
      [self.productsArray isEqualToArray:otherMessage.productsArray] &&
      self.hasSpell == otherMessage.hasSpell &&
      (!self.hasSpell || [self.spell isEqual:otherMessage.spell]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      self.hasIsFav == otherMessage.hasIsFav &&
      (!self.hasIsFav || self.isFav == otherMessage.isFav) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasCountData == otherMessage.hasCountData &&
      (!self.hasCountData || [self.countData isEqual:otherMessage.countData]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      self.hasHighLightName == otherMessage.hasHighLightName &&
      (!self.hasHighLightName || [self.highLightName isEqual:otherMessage.highLightName]) &&
      [self.tagsArray isEqualToArray:otherMessage.tagsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  for (Contact* element in self.contactsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Product* element in self.productsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasSpell) {
    hashCode = hashCode * 31 + [self.spell hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasIsFav) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFav] hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasCountData) {
    hashCode = hashCode * 31 + [self.countData hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasHighLightName) {
    hashCode = hashCode * 31 + [self.highLightName hash];
  }
  for (CustomerTag* element in self.tagsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Customer_Builder()
@property (retain) Customer* result;
@end

@implementation Customer_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Customer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Customer_Builder*) clear {
  self.result = [[[Customer alloc] init] autorelease];
  return self;
}
- (Customer_Builder*) clone {
  return [Customer builderWithPrototype:result];
}
- (Customer*) defaultInstance {
  return [Customer defaultInstance];
}
- (Customer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Customer*) buildPartial {
  Customer* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Customer_Builder*) mergeFrom:(Customer*) other {
  if (other == [Customer defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.contactsArray.count > 0) {
    if (result.contactsArray == nil) {
      result.contactsArray = [[other.contactsArray copyWithZone:[other.contactsArray zone]] autorelease];
    } else {
      [result.contactsArray appendArray:other.contactsArray];
    }
  }
  if (other.productsArray.count > 0) {
    if (result.productsArray == nil) {
      result.productsArray = [[other.productsArray copyWithZone:[other.productsArray zone]] autorelease];
    } else {
      [result.productsArray appendArray:other.productsArray];
    }
  }
  if (other.hasSpell) {
    [self setSpell:other.spell];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.hasIsFav) {
    [self setIsFav:other.isFav];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasCountData) {
    [self setCountData:other.countData];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  if (other.hasHighLightName) {
    [self setHighLightName:other.highLightName];
  }
  if (other.tagsArray.count > 0) {
    if (result.tagsArray == nil) {
      result.tagsArray = [[other.tagsArray copyWithZone:[other.tagsArray zone]] autorelease];
    } else {
      [result.tagsArray appendArray:other.tagsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Customer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Customer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Contact_Builder* subBuilder = [Contact builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContacts:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Product_Builder* subBuilder = [Product builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProducts:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setSpell:[input readString]];
        break;
      }
      case 58: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setIsFav:[input readBool]];
        break;
      }
      case 74: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        [self setCountData:[input readString]];
        break;
      }
      case 90: {
        [self addFiles:[input readData]];
        break;
      }
      case 98: {
        [self addFilePath:[input readString]];
        break;
      }
      case 106: {
        [self setHighLightName:[input readString]];
        break;
      }
      case 114: {
        CustomerTag_Builder* subBuilder = [CustomerTag builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTags:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Customer_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Customer_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Customer_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Customer_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (CustomerCategory*) category {
  return result.category;
}
- (Customer_Builder*) setCategory:(CustomerCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (Customer_Builder*) setCategoryBuilder:(CustomerCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (Customer_Builder*) mergeCategory:(CustomerCategory*) value {
  if (result.hasCategory &&
      result.category != [CustomerCategory defaultInstance]) {
    result.category =
      [[[CustomerCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (Customer_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [CustomerCategory defaultInstance];
  return self;
}
- (PBAppendableArray *)contacts {
  return result.contactsArray;
}
- (Contact*)contactsAtIndex:(NSUInteger)index {
  return [result contactsAtIndex:index];
}
- (Customer_Builder *)addContacts:(Contact*)value {
  if (result.contactsArray == nil) {
    result.contactsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.contactsArray addObject:value];
  return self;
}
- (Customer_Builder *)setContactsArray:(NSArray *)array {
  result.contactsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setContactsValues:(const Contact* *)values count:(NSUInteger)count {
  result.contactsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearContacts {
  result.contactsArray = nil;
  return self;
}
- (PBAppendableArray *)products {
  return result.productsArray;
}
- (Product*)productsAtIndex:(NSUInteger)index {
  return [result productsAtIndex:index];
}
- (Customer_Builder *)addProducts:(Product*)value {
  if (result.productsArray == nil) {
    result.productsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.productsArray addObject:value];
  return self;
}
- (Customer_Builder *)setProductsArray:(NSArray *)array {
  result.productsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setProductsValues:(const Product* *)values count:(NSUInteger)count {
  result.productsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearProducts {
  result.productsArray = nil;
  return self;
}
- (BOOL) hasSpell {
  return result.hasSpell;
}
- (NSString*) spell {
  return result.spell;
}
- (Customer_Builder*) setSpell:(NSString*) value {
  result.hasSpell = YES;
  result.spell = value;
  return self;
}
- (Customer_Builder*) clearSpell {
  result.hasSpell = NO;
  result.spell = @"";
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (Customer_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (Customer_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (BOOL) hasIsFav {
  return result.hasIsFav;
}
- (BOOL) isFav {
  return result.isFav;
}
- (Customer_Builder*) setIsFav:(BOOL) value {
  result.hasIsFav = YES;
  result.isFav = value;
  return self;
}
- (Customer_Builder*) clearIsFav {
  result.hasIsFav = NO;
  result.isFav = NO;
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (Customer_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (Customer_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (Customer_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (Customer_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasCountData {
  return result.hasCountData;
}
- (NSString*) countData {
  return result.countData;
}
- (Customer_Builder*) setCountData:(NSString*) value {
  result.hasCountData = YES;
  result.countData = value;
  return self;
}
- (Customer_Builder*) clearCountData {
  result.hasCountData = NO;
  result.countData = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (Customer_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (Customer_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (Customer_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (Customer_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
- (BOOL) hasHighLightName {
  return result.hasHighLightName;
}
- (NSString*) highLightName {
  return result.highLightName;
}
- (Customer_Builder*) setHighLightName:(NSString*) value {
  result.hasHighLightName = YES;
  result.highLightName = value;
  return self;
}
- (Customer_Builder*) clearHighLightName {
  result.hasHighLightName = NO;
  result.highLightName = @"";
  return self;
}
- (PBAppendableArray *)tags {
  return result.tagsArray;
}
- (CustomerTag*)tagsAtIndex:(NSUInteger)index {
  return [result tagsAtIndex:index];
}
- (Customer_Builder *)addTags:(CustomerTag*)value {
  if (result.tagsArray == nil) {
    result.tagsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.tagsArray addObject:value];
  return self;
}
- (Customer_Builder *)setTagsArray:(NSArray *)array {
  result.tagsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)setTagsValues:(const CustomerTag* *)values count:(NSUInteger)count {
  result.tagsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Customer_Builder *)clearTags {
  result.tagsArray = nil;
  return self;
}
@end

@interface Contact ()
@property (retain) NSString* name;
@property (retain) PBAppendableArray * phoneArray;
@end

@implementation Contact

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
@synthesize phoneArray;
@dynamic phone;
- (void) dealloc {
  self.name = nil;
  self.phoneArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static Contact* defaultContactInstance = nil;
+ (void) initialize {
  if (self == [Contact class]) {
    defaultContactInstance = [[Contact alloc] init];
  }
}
+ (Contact*) defaultInstance {
  return defaultContactInstance;
}
- (Contact*) defaultInstance {
  return defaultContactInstance;
}
- (PBArray *)phone {
  return phoneArray;
}
- (NSString*)phoneAtIndex:(NSUInteger)index {
  return [phoneArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  const NSUInteger phoneArrayCount = self.phoneArray.count;
  if (phoneArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.phoneArray.data;
    for (NSUInteger i = 0; i < phoneArrayCount; ++i) {
      [output writeString:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.phoneArray.count;
    const NSString* *values = (const NSString* *)self.phoneArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Contact*) parseFromData:(NSData*) data {
  return (Contact*)[[[Contact builder] mergeFromData:data] build];
}
+ (Contact*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Contact*)[[[Contact builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Contact*) parseFromInputStream:(NSInputStream*) input {
  return (Contact*)[[[Contact builder] mergeFromInputStream:input] build];
}
+ (Contact*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Contact*)[[[Contact builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Contact*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Contact*)[[[Contact builder] mergeFromCodedInputStream:input] build];
}
+ (Contact*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Contact*)[[[Contact builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Contact_Builder*) builder {
  return [[[Contact_Builder alloc] init] autorelease];
}
+ (Contact_Builder*) builderWithPrototype:(Contact*) prototype {
  return [[Contact builder] mergeFrom:prototype];
}
- (Contact_Builder*) builder {
  return [Contact builder];
}
- (Contact_Builder*) toBuilder {
  return [Contact builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  for (NSString* element in self.phoneArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phone", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Contact class]]) {
    return NO;
  }
  Contact *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.phoneArray isEqualToArray:otherMessage.phoneArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  for (NSString* element in self.phoneArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Contact_Builder()
@property (retain) Contact* result;
@end

@implementation Contact_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Contact alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Contact_Builder*) clear {
  self.result = [[[Contact alloc] init] autorelease];
  return self;
}
- (Contact_Builder*) clone {
  return [Contact builderWithPrototype:result];
}
- (Contact*) defaultInstance {
  return [Contact defaultInstance];
}
- (Contact*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Contact*) buildPartial {
  Contact* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Contact_Builder*) mergeFrom:(Contact*) other {
  if (other == [Contact defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.phoneArray.count > 0) {
    if (result.phoneArray == nil) {
      result.phoneArray = [[other.phoneArray copyWithZone:[other.phoneArray zone]] autorelease];
    } else {
      [result.phoneArray appendArray:other.phoneArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Contact_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Contact_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self addPhone:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Contact_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Contact_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (PBAppendableArray *)phone {
  return result.phoneArray;
}
- (NSString*)phoneAtIndex:(NSUInteger)index {
  return [result phoneAtIndex:index];
}
- (Contact_Builder *)addPhone:(NSString*)value {
  if (result.phoneArray == nil) {
    result.phoneArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.phoneArray addObject:value];
  return self;
}
- (Contact_Builder *)setPhoneArray:(NSArray *)array {
  result.phoneArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Contact_Builder *)setPhoneValues:(const NSString* *)values count:(NSUInteger)count {
  result.phoneArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Contact_Builder *)clearPhone {
  result.phoneArray = nil;
  return self;
}
@end

@interface PageCustomer ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * customersArray;
@end

@implementation PageCustomer

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize customersArray;
@dynamic customers;
- (void) dealloc {
  self.page = nil;
  self.customersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageCustomer* defaultPageCustomerInstance = nil;
+ (void) initialize {
  if (self == [PageCustomer class]) {
    defaultPageCustomerInstance = [[PageCustomer alloc] init];
  }
}
+ (PageCustomer*) defaultInstance {
  return defaultPageCustomerInstance;
}
- (PageCustomer*) defaultInstance {
  return defaultPageCustomerInstance;
}
- (PBArray *)customers {
  return customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [customersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (Customer* element in self.customers) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (Customer *element in self.customersArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (Customer *element in self.customersArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageCustomer*) parseFromData:(NSData*) data {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromData:data] build];
}
+ (PageCustomer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageCustomer*) parseFromInputStream:(NSInputStream*) input {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromInputStream:input] build];
}
+ (PageCustomer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCustomer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromCodedInputStream:input] build];
}
+ (PageCustomer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageCustomer*)[[[PageCustomer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageCustomer_Builder*) builder {
  return [[[PageCustomer_Builder alloc] init] autorelease];
}
+ (PageCustomer_Builder*) builderWithPrototype:(PageCustomer*) prototype {
  return [[PageCustomer builder] mergeFrom:prototype];
}
- (PageCustomer_Builder*) builder {
  return [PageCustomer builder];
}
- (PageCustomer_Builder*) toBuilder {
  return [PageCustomer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Customer* element in self.customersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"customers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageCustomer class]]) {
    return NO;
  }
  PageCustomer *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.customersArray isEqualToArray:otherMessage.customersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (Customer* element in self.customersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageCustomer_Builder()
@property (retain) PageCustomer* result;
@end

@implementation PageCustomer_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageCustomer alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageCustomer_Builder*) clear {
  self.result = [[[PageCustomer alloc] init] autorelease];
  return self;
}
- (PageCustomer_Builder*) clone {
  return [PageCustomer builderWithPrototype:result];
}
- (PageCustomer*) defaultInstance {
  return [PageCustomer defaultInstance];
}
- (PageCustomer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageCustomer*) buildPartial {
  PageCustomer* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageCustomer_Builder*) mergeFrom:(PageCustomer*) other {
  if (other == [PageCustomer defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.customersArray.count > 0) {
    if (result.customersArray == nil) {
      result.customersArray = [[other.customersArray copyWithZone:[other.customersArray zone]] autorelease];
    } else {
      [result.customersArray appendArray:other.customersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageCustomer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageCustomer_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Customer_Builder* subBuilder = [Customer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCustomers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageCustomer_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageCustomer_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageCustomer_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageCustomer_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)customers {
  return result.customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
  return [result customersAtIndex:index];
}
- (PageCustomer_Builder *)addCustomers:(Customer*)value {
  if (result.customersArray == nil) {
    result.customersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.customersArray addObject:value];
  return self;
}
- (PageCustomer_Builder *)setCustomersArray:(NSArray *)array {
  result.customersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageCustomer_Builder *)setCustomersValues:(const Customer* *)values count:(NSUInteger)count {
  result.customersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageCustomer_Builder *)clearCustomers {
  result.customersArray = nil;
  return self;
}
@end

@interface CustomerParams ()
@property int32_t page;
@property (retain) User* user;
@property (retain) Customer* customer;
@property (retain) Location* location;
@property (retain) CustomerCategory* category;
@property BOOL tag;
@property (retain) PBAppendableArray * tagValuesArray;
@end

@implementation CustomerParams

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasCustomer {
  return !!hasCustomer_;
}
- (void) setHasCustomer:(BOOL) value_ {
  hasCustomer_ = !!value_;
}
@synthesize customer;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
- (BOOL) tag {
  return !!tag_;
}
- (void) setTag:(BOOL) value_ {
  tag_ = !!value_;
}
@synthesize tagValuesArray;
@dynamic tagValues;
- (void) dealloc {
  self.user = nil;
  self.customer = nil;
  self.location = nil;
  self.category = nil;
  self.tagValuesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.user = [User defaultInstance];
    self.customer = [Customer defaultInstance];
    self.location = [Location defaultInstance];
    self.category = [CustomerCategory defaultInstance];
    self.tag = NO;
  }
  return self;
}
static CustomerParams* defaultCustomerParamsInstance = nil;
+ (void) initialize {
  if (self == [CustomerParams class]) {
    defaultCustomerParamsInstance = [[CustomerParams alloc] init];
  }
}
+ (CustomerParams*) defaultInstance {
  return defaultCustomerParamsInstance;
}
- (CustomerParams*) defaultInstance {
  return defaultCustomerParamsInstance;
}
- (PBArray *)tagValues {
  return tagValuesArray;
}
- (CustomerTagValue*)tagValuesAtIndex:(NSUInteger)index {
  return [tagValuesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasCustomer) {
    if (!self.customer.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (CustomerTagValue* element in self.tagValues) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeInt32:1 value:self.page];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasCustomer) {
    [output writeMessage:3 value:self.customer];
  }
  if (self.hasLocation) {
    [output writeMessage:4 value:self.location];
  }
  if (self.hasCategory) {
    [output writeMessage:5 value:self.category];
  }
  if (self.hasTag) {
    [output writeBool:6 value:self.tag];
  }
  for (CustomerTagValue *element in self.tagValuesArray) {
    [output writeMessage:7 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeInt32Size(1, self.page);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasCustomer) {
    size_ += computeMessageSize(3, self.customer);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(4, self.location);
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(5, self.category);
  }
  if (self.hasTag) {
    size_ += computeBoolSize(6, self.tag);
  }
  for (CustomerTagValue *element in self.tagValuesArray) {
    size_ += computeMessageSize(7, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CustomerParams*) parseFromData:(NSData*) data {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromData:data] build];
}
+ (CustomerParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerParams*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromInputStream:input] build];
}
+ (CustomerParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerParams*)[[[CustomerParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerParams_Builder*) builder {
  return [[[CustomerParams_Builder alloc] init] autorelease];
}
+ (CustomerParams_Builder*) builderWithPrototype:(CustomerParams*) prototype {
  return [[CustomerParams builder] mergeFrom:prototype];
}
- (CustomerParams_Builder*) builder {
  return [CustomerParams builder];
}
- (CustomerParams_Builder*) toBuilder {
  return [CustomerParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCustomer) {
    [output appendFormat:@"%@%@ {\n", indent, @"customer"];
    [self.customer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", [NSNumber numberWithBool:self.tag]];
  }
  for (CustomerTagValue* element in self.tagValuesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tagValues"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerParams class]]) {
    return NO;
  }
  CustomerParams *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCustomer == otherMessage.hasCustomer &&
      (!self.hasCustomer || [self.customer isEqual:otherMessage.customer]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || self.tag == otherMessage.tag) &&
      [self.tagValuesArray isEqualToArray:otherMessage.tagValuesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCustomer) {
    hashCode = hashCode * 31 + [self.customer hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tag] hash];
  }
  for (CustomerTagValue* element in self.tagValuesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerParams_Builder()
@property (retain) CustomerParams* result;
@end

@implementation CustomerParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CustomerParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerParams_Builder*) clear {
  self.result = [[[CustomerParams alloc] init] autorelease];
  return self;
}
- (CustomerParams_Builder*) clone {
  return [CustomerParams builderWithPrototype:result];
}
- (CustomerParams*) defaultInstance {
  return [CustomerParams defaultInstance];
}
- (CustomerParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerParams*) buildPartial {
  CustomerParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CustomerParams_Builder*) mergeFrom:(CustomerParams*) other {
  if (other == [CustomerParams defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCustomer) {
    [self mergeCustomer:other.customer];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.tagValuesArray.count > 0) {
    if (result.tagValuesArray == nil) {
      result.tagValuesArray = [[other.tagValuesArray copyWithZone:[other.tagValuesArray zone]] autorelease];
    } else {
      [result.tagValuesArray appendArray:other.tagValuesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Customer_Builder* subBuilder = [Customer builder];
        if (self.hasCustomer) {
          [subBuilder mergeFrom:self.customer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCustomer:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setTag:[input readBool]];
        break;
      }
      case 58: {
        CustomerTagValue_Builder* subBuilder = [CustomerTagValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTagValues:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (CustomerParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (CustomerParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (CustomerParams_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (CustomerParams_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CustomerParams_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (CustomerParams_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasCustomer {
  return result.hasCustomer;
}
- (Customer*) customer {
  return result.customer;
}
- (CustomerParams_Builder*) setCustomer:(Customer*) value {
  result.hasCustomer = YES;
  result.customer = value;
  return self;
}
- (CustomerParams_Builder*) setCustomerBuilder:(Customer_Builder*) builderForValue {
  return [self setCustomer:[builderForValue build]];
}
- (CustomerParams_Builder*) mergeCustomer:(Customer*) value {
  if (result.hasCustomer &&
      result.customer != [Customer defaultInstance]) {
    result.customer =
      [[[Customer builderWithPrototype:result.customer] mergeFrom:value] buildPartial];
  } else {
    result.customer = value;
  }
  result.hasCustomer = YES;
  return self;
}
- (CustomerParams_Builder*) clearCustomer {
  result.hasCustomer = NO;
  result.customer = [Customer defaultInstance];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (CustomerParams_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (CustomerParams_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (CustomerParams_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (CustomerParams_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (CustomerCategory*) category {
  return result.category;
}
- (CustomerParams_Builder*) setCategory:(CustomerCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (CustomerParams_Builder*) setCategoryBuilder:(CustomerCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (CustomerParams_Builder*) mergeCategory:(CustomerCategory*) value {
  if (result.hasCategory &&
      result.category != [CustomerCategory defaultInstance]) {
    result.category =
      [[[CustomerCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (CustomerParams_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [CustomerCategory defaultInstance];
  return self;
}
- (BOOL) hasTag {
  return result.hasTag;
}
- (BOOL) tag {
  return result.tag;
}
- (CustomerParams_Builder*) setTag:(BOOL) value {
  result.hasTag = YES;
  result.tag = value;
  return self;
}
- (CustomerParams_Builder*) clearTag {
  result.hasTag = NO;
  result.tag = NO;
  return self;
}
- (PBAppendableArray *)tagValues {
  return result.tagValuesArray;
}
- (CustomerTagValue*)tagValuesAtIndex:(NSUInteger)index {
  return [result tagValuesAtIndex:index];
}
- (CustomerParams_Builder *)addTagValues:(CustomerTagValue*)value {
  if (result.tagValuesArray == nil) {
    result.tagValuesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.tagValuesArray addObject:value];
  return self;
}
- (CustomerParams_Builder *)setTagValuesArray:(NSArray *)array {
  result.tagValuesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CustomerParams_Builder *)setTagValuesValues:(const CustomerTagValue* *)values count:(NSUInteger)count {
  result.tagValuesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CustomerParams_Builder *)clearTagValues {
  result.tagValuesArray = nil;
  return self;
}
@end

@interface CustomerCategory ()
@property (retain) NSString* name;
@property int32_t id;
@end

@implementation CustomerCategory

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
  }
  return self;
}
static CustomerCategory* defaultCustomerCategoryInstance = nil;
+ (void) initialize {
  if (self == [CustomerCategory class]) {
    defaultCustomerCategoryInstance = [[CustomerCategory alloc] init];
  }
}
+ (CustomerCategory*) defaultInstance {
  return defaultCustomerCategoryInstance;
}
- (CustomerCategory*) defaultInstance {
  return defaultCustomerCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size_ += computeInt32Size(2, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CustomerCategory*) parseFromData:(NSData*) data {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromData:data] build];
}
+ (CustomerCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerCategory*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromInputStream:input] build];
}
+ (CustomerCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerCategory*)[[[CustomerCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerCategory_Builder*) builder {
  return [[[CustomerCategory_Builder alloc] init] autorelease];
}
+ (CustomerCategory_Builder*) builderWithPrototype:(CustomerCategory*) prototype {
  return [[CustomerCategory builder] mergeFrom:prototype];
}
- (CustomerCategory_Builder*) builder {
  return [CustomerCategory builder];
}
- (CustomerCategory_Builder*) toBuilder {
  return [CustomerCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerCategory class]]) {
    return NO;
  }
  CustomerCategory *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerCategory_Builder()
@property (retain) CustomerCategory* result;
@end

@implementation CustomerCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CustomerCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerCategory_Builder*) clear {
  self.result = [[[CustomerCategory alloc] init] autorelease];
  return self;
}
- (CustomerCategory_Builder*) clone {
  return [CustomerCategory builderWithPrototype:result];
}
- (CustomerCategory*) defaultInstance {
  return [CustomerCategory defaultInstance];
}
- (CustomerCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerCategory*) buildPartial {
  CustomerCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CustomerCategory_Builder*) mergeFrom:(CustomerCategory*) other {
  if (other == [CustomerCategory defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CustomerCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CustomerCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CustomerCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CustomerCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface CustomerTag ()
@property (retain) NSString* name;
@property int32_t id;
@property (retain) PBAppendableArray * tagValuesArray;
@end

@implementation CustomerTag

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
@synthesize tagValuesArray;
@dynamic tagValues;
- (void) dealloc {
  self.name = nil;
  self.tagValuesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
  }
  return self;
}
static CustomerTag* defaultCustomerTagInstance = nil;
+ (void) initialize {
  if (self == [CustomerTag class]) {
    defaultCustomerTagInstance = [[CustomerTag alloc] init];
  }
}
+ (CustomerTag*) defaultInstance {
  return defaultCustomerTagInstance;
}
- (CustomerTag*) defaultInstance {
  return defaultCustomerTagInstance;
}
- (PBArray *)tagValues {
  return tagValuesArray;
}
- (CustomerTagValue*)tagValuesAtIndex:(NSUInteger)index {
  return [tagValuesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  for (CustomerTagValue* element in self.tagValues) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  for (CustomerTagValue *element in self.tagValuesArray) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size_ += computeInt32Size(2, self.id);
  }
  for (CustomerTagValue *element in self.tagValuesArray) {
    size_ += computeMessageSize(3, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CustomerTag*) parseFromData:(NSData*) data {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromData:data] build];
}
+ (CustomerTag*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerTag*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromInputStream:input] build];
}
+ (CustomerTag*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerTag*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerTag*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTag*)[[[CustomerTag builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerTag_Builder*) builder {
  return [[[CustomerTag_Builder alloc] init] autorelease];
}
+ (CustomerTag_Builder*) builderWithPrototype:(CustomerTag*) prototype {
  return [[CustomerTag builder] mergeFrom:prototype];
}
- (CustomerTag_Builder*) builder {
  return [CustomerTag builder];
}
- (CustomerTag_Builder*) toBuilder {
  return [CustomerTag builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  for (CustomerTagValue* element in self.tagValuesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tagValues"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerTag class]]) {
    return NO;
  }
  CustomerTag *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      [self.tagValuesArray isEqualToArray:otherMessage.tagValuesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  for (CustomerTagValue* element in self.tagValuesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerTag_Builder()
@property (retain) CustomerTag* result;
@end

@implementation CustomerTag_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CustomerTag alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerTag_Builder*) clear {
  self.result = [[[CustomerTag alloc] init] autorelease];
  return self;
}
- (CustomerTag_Builder*) clone {
  return [CustomerTag builderWithPrototype:result];
}
- (CustomerTag*) defaultInstance {
  return [CustomerTag defaultInstance];
}
- (CustomerTag*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerTag*) buildPartial {
  CustomerTag* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CustomerTag_Builder*) mergeFrom:(CustomerTag*) other {
  if (other == [CustomerTag defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.tagValuesArray.count > 0) {
    if (result.tagValuesArray == nil) {
      result.tagValuesArray = [[other.tagValuesArray copyWithZone:[other.tagValuesArray zone]] autorelease];
    } else {
      [result.tagValuesArray appendArray:other.tagValuesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerTag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerTag_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        CustomerTagValue_Builder* subBuilder = [CustomerTagValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTagValues:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CustomerTag_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CustomerTag_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CustomerTag_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CustomerTag_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (PBAppendableArray *)tagValues {
  return result.tagValuesArray;
}
- (CustomerTagValue*)tagValuesAtIndex:(NSUInteger)index {
  return [result tagValuesAtIndex:index];
}
- (CustomerTag_Builder *)addTagValues:(CustomerTagValue*)value {
  if (result.tagValuesArray == nil) {
    result.tagValuesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.tagValuesArray addObject:value];
  return self;
}
- (CustomerTag_Builder *)setTagValuesArray:(NSArray *)array {
  result.tagValuesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (CustomerTag_Builder *)setTagValuesValues:(const CustomerTagValue* *)values count:(NSUInteger)count {
  result.tagValuesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (CustomerTag_Builder *)clearTagValues {
  result.tagValuesArray = nil;
  return self;
}
@end

@interface CustomerTagValue ()
@property (retain) NSString* name;
@property int32_t id;
@property int32_t parentId;
@property (retain) NSString* path;
@end

@implementation CustomerTagValue

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) value_ {
  hasParentId_ = !!value_;
}
@synthesize parentId;
- (BOOL) hasPath {
  return !!hasPath_;
}
- (void) setHasPath:(BOOL) value_ {
  hasPath_ = !!value_;
}
@synthesize path;
- (void) dealloc {
  self.name = nil;
  self.path = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
    self.parentId = 0;
    self.path = @"";
  }
  return self;
}
static CustomerTagValue* defaultCustomerTagValueInstance = nil;
+ (void) initialize {
  if (self == [CustomerTagValue class]) {
    defaultCustomerTagValueInstance = [[CustomerTagValue alloc] init];
  }
}
+ (CustomerTagValue*) defaultInstance {
  return defaultCustomerTagValueInstance;
}
- (CustomerTagValue*) defaultInstance {
  return defaultCustomerTagValueInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasParentId) {
    [output writeInt32:3 value:self.parentId];
  }
  if (self.hasPath) {
    [output writeString:4 value:self.path];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size_ += computeInt32Size(2, self.id);
  }
  if (self.hasParentId) {
    size_ += computeInt32Size(3, self.parentId);
  }
  if (self.hasPath) {
    size_ += computeStringSize(4, self.path);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CustomerTagValue*) parseFromData:(NSData*) data {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromData:data] build];
}
+ (CustomerTagValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CustomerTagValue*) parseFromInputStream:(NSInputStream*) input {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromInputStream:input] build];
}
+ (CustomerTagValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerTagValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromCodedInputStream:input] build];
}
+ (CustomerTagValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CustomerTagValue*)[[[CustomerTagValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CustomerTagValue_Builder*) builder {
  return [[[CustomerTagValue_Builder alloc] init] autorelease];
}
+ (CustomerTagValue_Builder*) builderWithPrototype:(CustomerTagValue*) prototype {
  return [[CustomerTagValue builder] mergeFrom:prototype];
}
- (CustomerTagValue_Builder*) builder {
  return [CustomerTagValue builder];
}
- (CustomerTagValue_Builder*) toBuilder {
  return [CustomerTagValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithInt:self.parentId]];
  }
  if (self.hasPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"path", self.path];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CustomerTagValue class]]) {
    return NO;
  }
  CustomerTagValue *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      self.hasPath == otherMessage.hasPath &&
      (!self.hasPath || [self.path isEqual:otherMessage.path]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentId] hash];
  }
  if (self.hasPath) {
    hashCode = hashCode * 31 + [self.path hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CustomerTagValue_Builder()
@property (retain) CustomerTagValue* result;
@end

@implementation CustomerTagValue_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[CustomerTagValue alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CustomerTagValue_Builder*) clear {
  self.result = [[[CustomerTagValue alloc] init] autorelease];
  return self;
}
- (CustomerTagValue_Builder*) clone {
  return [CustomerTagValue builderWithPrototype:result];
}
- (CustomerTagValue*) defaultInstance {
  return [CustomerTagValue defaultInstance];
}
- (CustomerTagValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CustomerTagValue*) buildPartial {
  CustomerTagValue* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (CustomerTagValue_Builder*) mergeFrom:(CustomerTagValue*) other {
  if (other == [CustomerTagValue defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.hasPath) {
    [self setPath:other.path];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CustomerTagValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CustomerTagValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 24: {
        [self setParentId:[input readInt32]];
        break;
      }
      case 34: {
        [self setPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (CustomerTagValue_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (CustomerTagValue_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (CustomerTagValue_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (CustomerTagValue_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasParentId {
  return result.hasParentId;
}
- (int32_t) parentId {
  return result.parentId;
}
- (CustomerTagValue_Builder*) setParentId:(int32_t) value {
  result.hasParentId = YES;
  result.parentId = value;
  return self;
}
- (CustomerTagValue_Builder*) clearParentId {
  result.hasParentId = NO;
  result.parentId = 0;
  return self;
}
- (BOOL) hasPath {
  return result.hasPath;
}
- (NSString*) path {
  return result.path;
}
- (CustomerTagValue_Builder*) setPath:(NSString*) value {
  result.hasPath = YES;
  result.path = value;
  return self;
}
- (CustomerTagValue_Builder*) clearPath {
  result.hasPath = NO;
  result.path = @"";
  return self;
}
@end

