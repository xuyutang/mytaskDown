// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Attendance.pb.h"

@implementation AttendanceRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AttendanceRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface AttendanceCategory ()
@property int32_t id;
@property (retain) NSString* name;
@end

@implementation AttendanceCategory

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static AttendanceCategory* defaultAttendanceCategoryInstance = nil;
+ (void) initialize {
  if (self == [AttendanceCategory class]) {
    defaultAttendanceCategoryInstance = [[AttendanceCategory alloc] init];
  }
}
+ (AttendanceCategory*) defaultInstance {
  return defaultAttendanceCategoryInstance;
}
- (AttendanceCategory*) defaultInstance {
  return defaultAttendanceCategoryInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AttendanceCategory*) parseFromData:(NSData*) data {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromData:data] build];
}
+ (AttendanceCategory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AttendanceCategory*) parseFromInputStream:(NSInputStream*) input {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromInputStream:input] build];
}
+ (AttendanceCategory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromCodedInputStream:input] build];
}
+ (AttendanceCategory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceCategory*)[[[AttendanceCategory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceCategory_Builder*) builder {
  return [[[AttendanceCategory_Builder alloc] init] autorelease];
}
+ (AttendanceCategory_Builder*) builderWithPrototype:(AttendanceCategory*) prototype {
  return [[AttendanceCategory builder] mergeFrom:prototype];
}
- (AttendanceCategory_Builder*) builder {
  return [AttendanceCategory builder];
}
- (AttendanceCategory_Builder*) toBuilder {
  return [AttendanceCategory builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AttendanceCategory class]]) {
    return NO;
  }
  AttendanceCategory *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AttendanceCategory_Builder()
@property (retain) AttendanceCategory* result;
@end

@implementation AttendanceCategory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AttendanceCategory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AttendanceCategory_Builder*) clear {
  self.result = [[[AttendanceCategory alloc] init] autorelease];
  return self;
}
- (AttendanceCategory_Builder*) clone {
  return [AttendanceCategory builderWithPrototype:result];
}
- (AttendanceCategory*) defaultInstance {
  return [AttendanceCategory defaultInstance];
}
- (AttendanceCategory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AttendanceCategory*) buildPartial {
  AttendanceCategory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AttendanceCategory_Builder*) mergeFrom:(AttendanceCategory*) other {
  if (other == [AttendanceCategory defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AttendanceCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttendanceCategory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (AttendanceCategory_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (AttendanceCategory_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (AttendanceCategory_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (AttendanceCategory_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface Attendance ()
@property int32_t id;
@property (retain) User* user;
@property (retain) NSString* comment;
@property (retain) Location* location;
@property (retain) NSString* date;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@property (retain) AttendanceCategory* category;
@property (retain) PBAppendableArray * attendanceRepliesArray;
@property int32_t replyCount;
@property (retain) NSString* cameraCategory;
@end

@implementation Attendance

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value_ {
  hasDate_ = !!value_;
}
@synthesize date;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
@synthesize attendanceRepliesArray;
@dynamic attendanceReplies;
- (BOOL) hasReplyCount {
  return !!hasReplyCount_;
}
- (void) setHasReplyCount:(BOOL) value_ {
  hasReplyCount_ = !!value_;
}
@synthesize replyCount;
- (BOOL) hasCameraCategory {
  return !!hasCameraCategory_;
}
- (void) setHasCameraCategory:(BOOL) value_ {
  hasCameraCategory_ = !!value_;
}
@synthesize cameraCategory;
- (void) dealloc {
  self.user = nil;
  self.comment = nil;
  self.location = nil;
  self.date = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  self.category = nil;
  self.attendanceRepliesArray = nil;
  self.cameraCategory = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.comment = @"";
    self.location = [Location defaultInstance];
    self.date = @"";
    self.category = [AttendanceCategory defaultInstance];
    self.replyCount = 0;
    self.cameraCategory = @"";
  }
  return self;
}
static Attendance* defaultAttendanceInstance = nil;
+ (void) initialize {
  if (self == [Attendance class]) {
    defaultAttendanceInstance = [[Attendance alloc] init];
  }
}
+ (Attendance*) defaultInstance {
  return defaultAttendanceInstance;
}
- (Attendance*) defaultInstance {
  return defaultAttendanceInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (PBArray *)attendanceReplies {
  return attendanceRepliesArray;
}
- (AttendanceReply*)attendanceRepliesAtIndex:(NSUInteger)index {
  return [attendanceRepliesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (AttendanceReply* element in self.attendanceReplies) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasLocation) {
    [output writeMessage:4 value:self.location];
  }
  if (self.hasDate) {
    [output writeString:5 value:self.date];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:6 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:7 value:values[i]];
    }
  }
  if (self.hasCategory) {
    [output writeMessage:8 value:self.category];
  }
  for (AttendanceReply *element in self.attendanceRepliesArray) {
    [output writeMessage:9 value:element];
  }
  if (self.hasReplyCount) {
    [output writeInt32:10 value:self.replyCount];
  }
  if (self.hasCameraCategory) {
    [output writeString:11 value:self.cameraCategory];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(4, self.location);
  }
  if (self.hasDate) {
    size_ += computeStringSize(5, self.date);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasCategory) {
    size_ += computeMessageSize(8, self.category);
  }
  for (AttendanceReply *element in self.attendanceRepliesArray) {
    size_ += computeMessageSize(9, element);
  }
  if (self.hasReplyCount) {
    size_ += computeInt32Size(10, self.replyCount);
  }
  if (self.hasCameraCategory) {
    size_ += computeStringSize(11, self.cameraCategory);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Attendance*) parseFromData:(NSData*) data {
  return (Attendance*)[[[Attendance builder] mergeFromData:data] build];
}
+ (Attendance*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attendance*)[[[Attendance builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Attendance*) parseFromInputStream:(NSInputStream*) input {
  return (Attendance*)[[[Attendance builder] mergeFromInputStream:input] build];
}
+ (Attendance*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attendance*)[[[Attendance builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Attendance*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Attendance*)[[[Attendance builder] mergeFromCodedInputStream:input] build];
}
+ (Attendance*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attendance*)[[[Attendance builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Attendance_Builder*) builder {
  return [[[Attendance_Builder alloc] init] autorelease];
}
+ (Attendance_Builder*) builderWithPrototype:(Attendance*) prototype {
  return [[Attendance builder] mergeFrom:prototype];
}
- (Attendance_Builder*) builder {
  return [Attendance builder];
}
- (Attendance_Builder*) toBuilder {
  return [Attendance builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"date", self.date];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (AttendanceReply* element in self.attendanceRepliesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"attendanceReplies"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyCount", [NSNumber numberWithInt:self.replyCount]];
  }
  if (self.hasCameraCategory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cameraCategory", self.cameraCategory];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Attendance class]]) {
    return NO;
  }
  Attendance *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasDate == otherMessage.hasDate &&
      (!self.hasDate || [self.date isEqual:otherMessage.date]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      [self.attendanceRepliesArray isEqualToArray:otherMessage.attendanceRepliesArray] &&
      self.hasReplyCount == otherMessage.hasReplyCount &&
      (!self.hasReplyCount || self.replyCount == otherMessage.replyCount) &&
      self.hasCameraCategory == otherMessage.hasCameraCategory &&
      (!self.hasCameraCategory || [self.cameraCategory isEqual:otherMessage.cameraCategory]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasDate) {
    hashCode = hashCode * 31 + [self.date hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  for (AttendanceReply* element in self.attendanceRepliesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasReplyCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.replyCount] hash];
  }
  if (self.hasCameraCategory) {
    hashCode = hashCode * 31 + [self.cameraCategory hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Attendance_Builder()
@property (retain) Attendance* result;
@end

@implementation Attendance_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Attendance alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Attendance_Builder*) clear {
  self.result = [[[Attendance alloc] init] autorelease];
  return self;
}
- (Attendance_Builder*) clone {
  return [Attendance builderWithPrototype:result];
}
- (Attendance*) defaultInstance {
  return [Attendance defaultInstance];
}
- (Attendance*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Attendance*) buildPartial {
  Attendance* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Attendance_Builder*) mergeFrom:(Attendance*) other {
  if (other == [Attendance defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.attendanceRepliesArray.count > 0) {
    if (result.attendanceRepliesArray == nil) {
      result.attendanceRepliesArray = [[other.attendanceRepliesArray copyWithZone:[other.attendanceRepliesArray zone]] autorelease];
    } else {
      [result.attendanceRepliesArray appendArray:other.attendanceRepliesArray];
    }
  }
  if (other.hasReplyCount) {
    [self setReplyCount:other.replyCount];
  }
  if (other.hasCameraCategory) {
    [self setCameraCategory:other.cameraCategory];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Attendance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Attendance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setDate:[input readString]];
        break;
      }
      case 50: {
        [self addFiles:[input readData]];
        break;
      }
      case 58: {
        [self addFilePath:[input readString]];
        break;
      }
      case 66: {
        AttendanceCategory_Builder* subBuilder = [AttendanceCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        AttendanceReply_Builder* subBuilder = [AttendanceReply builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttendanceReplies:[subBuilder buildPartial]];
        break;
      }
      case 80: {
        [self setReplyCount:[input readInt32]];
        break;
      }
      case 90: {
        [self setCameraCategory:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Attendance_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Attendance_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (Attendance_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (Attendance_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (Attendance_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (Attendance_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (Attendance_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (Attendance_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (Attendance_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (Attendance_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (Attendance_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (Attendance_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (NSString*) date {
  return result.date;
}
- (Attendance_Builder*) setDate:(NSString*) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (Attendance_Builder*) clearDate {
  result.hasDate = NO;
  result.date = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (Attendance_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (Attendance_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (Attendance_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (Attendance_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (AttendanceCategory*) category {
  return result.category;
}
- (Attendance_Builder*) setCategory:(AttendanceCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (Attendance_Builder*) setCategoryBuilder:(AttendanceCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (Attendance_Builder*) mergeCategory:(AttendanceCategory*) value {
  if (result.hasCategory &&
      result.category != [AttendanceCategory defaultInstance]) {
    result.category =
      [[[AttendanceCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (Attendance_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [AttendanceCategory defaultInstance];
  return self;
}
- (PBAppendableArray *)attendanceReplies {
  return result.attendanceRepliesArray;
}
- (AttendanceReply*)attendanceRepliesAtIndex:(NSUInteger)index {
  return [result attendanceRepliesAtIndex:index];
}
- (Attendance_Builder *)addAttendanceReplies:(AttendanceReply*)value {
  if (result.attendanceRepliesArray == nil) {
    result.attendanceRepliesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.attendanceRepliesArray addObject:value];
  return self;
}
- (Attendance_Builder *)setAttendanceRepliesArray:(NSArray *)array {
  result.attendanceRepliesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)setAttendanceRepliesValues:(const AttendanceReply* *)values count:(NSUInteger)count {
  result.attendanceRepliesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Attendance_Builder *)clearAttendanceReplies {
  result.attendanceRepliesArray = nil;
  return self;
}
- (BOOL) hasReplyCount {
  return result.hasReplyCount;
}
- (int32_t) replyCount {
  return result.replyCount;
}
- (Attendance_Builder*) setReplyCount:(int32_t) value {
  result.hasReplyCount = YES;
  result.replyCount = value;
  return self;
}
- (Attendance_Builder*) clearReplyCount {
  result.hasReplyCount = NO;
  result.replyCount = 0;
  return self;
}
- (BOOL) hasCameraCategory {
  return result.hasCameraCategory;
}
- (NSString*) cameraCategory {
  return result.cameraCategory;
}
- (Attendance_Builder*) setCameraCategory:(NSString*) value {
  result.hasCameraCategory = YES;
  result.cameraCategory = value;
  return self;
}
- (Attendance_Builder*) clearCameraCategory {
  result.hasCameraCategory = NO;
  result.cameraCategory = @"";
  return self;
}
@end

@interface AttendanceReply ()
@property int32_t id;
@property int32_t attendanceId;
@property (retain) User* sender;
@property (retain) NSString* content;
@property (retain) NSString* createDate;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation AttendanceReply

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasAttendanceId {
  return !!hasAttendanceId_;
}
- (void) setHasAttendanceId:(BOOL) value_ {
  hasAttendanceId_ = !!value_;
}
@synthesize attendanceId;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasCreateDate {
  return !!hasCreateDate_;
}
- (void) setHasCreateDate:(BOOL) value_ {
  hasCreateDate_ = !!value_;
}
@synthesize createDate;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.sender = nil;
  self.content = nil;
  self.createDate = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.attendanceId = 0;
    self.sender = [User defaultInstance];
    self.content = @"";
    self.createDate = @"";
  }
  return self;
}
static AttendanceReply* defaultAttendanceReplyInstance = nil;
+ (void) initialize {
  if (self == [AttendanceReply class]) {
    defaultAttendanceReplyInstance = [[AttendanceReply alloc] init];
  }
}
+ (AttendanceReply*) defaultInstance {
  return defaultAttendanceReplyInstance;
}
- (AttendanceReply*) defaultInstance {
  return defaultAttendanceReplyInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasAttendanceId) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (self.hasSender) {
    if (!self.sender.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasAttendanceId) {
    [output writeInt32:2 value:self.attendanceId];
  }
  if (self.hasSender) {
    [output writeMessage:3 value:self.sender];
  }
  if (self.hasContent) {
    [output writeString:4 value:self.content];
  }
  if (self.hasCreateDate) {
    [output writeString:5 value:self.createDate];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:6 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasAttendanceId) {
    size_ += computeInt32Size(2, self.attendanceId);
  }
  if (self.hasSender) {
    size_ += computeMessageSize(3, self.sender);
  }
  if (self.hasContent) {
    size_ += computeStringSize(4, self.content);
  }
  if (self.hasCreateDate) {
    size_ += computeStringSize(5, self.createDate);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AttendanceReply*) parseFromData:(NSData*) data {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromData:data] build];
}
+ (AttendanceReply*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AttendanceReply*) parseFromInputStream:(NSInputStream*) input {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromInputStream:input] build];
}
+ (AttendanceReply*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceReply*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromCodedInputStream:input] build];
}
+ (AttendanceReply*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceReply*)[[[AttendanceReply builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceReply_Builder*) builder {
  return [[[AttendanceReply_Builder alloc] init] autorelease];
}
+ (AttendanceReply_Builder*) builderWithPrototype:(AttendanceReply*) prototype {
  return [[AttendanceReply builder] mergeFrom:prototype];
}
- (AttendanceReply_Builder*) builder {
  return [AttendanceReply builder];
}
- (AttendanceReply_Builder*) toBuilder {
  return [AttendanceReply builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasAttendanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attendanceId", [NSNumber numberWithInt:self.attendanceId]];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasCreateDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createDate", self.createDate];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AttendanceReply class]]) {
    return NO;
  }
  AttendanceReply *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasAttendanceId == otherMessage.hasAttendanceId &&
      (!self.hasAttendanceId || self.attendanceId == otherMessage.attendanceId) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasCreateDate == otherMessage.hasCreateDate &&
      (!self.hasCreateDate || [self.createDate isEqual:otherMessage.createDate]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasAttendanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.attendanceId] hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasCreateDate) {
    hashCode = hashCode * 31 + [self.createDate hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AttendanceReply_Builder()
@property (retain) AttendanceReply* result;
@end

@implementation AttendanceReply_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AttendanceReply alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AttendanceReply_Builder*) clear {
  self.result = [[[AttendanceReply alloc] init] autorelease];
  return self;
}
- (AttendanceReply_Builder*) clone {
  return [AttendanceReply builderWithPrototype:result];
}
- (AttendanceReply*) defaultInstance {
  return [AttendanceReply defaultInstance];
}
- (AttendanceReply*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AttendanceReply*) buildPartial {
  AttendanceReply* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AttendanceReply_Builder*) mergeFrom:(AttendanceReply*) other {
  if (other == [AttendanceReply defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasAttendanceId) {
    [self setAttendanceId:other.attendanceId];
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasCreateDate) {
    [self setCreateDate:other.createDate];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AttendanceReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttendanceReply_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 16: {
        [self setAttendanceId:[input readInt32]];
        break;
      }
      case 26: {
        User_Builder* subBuilder = [User builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setContent:[input readString]];
        break;
      }
      case 42: {
        [self setCreateDate:[input readString]];
        break;
      }
      case 50: {
        [self addFiles:[input readData]];
        break;
      }
      case 58: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (AttendanceReply_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (AttendanceReply_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasAttendanceId {
  return result.hasAttendanceId;
}
- (int32_t) attendanceId {
  return result.attendanceId;
}
- (AttendanceReply_Builder*) setAttendanceId:(int32_t) value {
  result.hasAttendanceId = YES;
  result.attendanceId = value;
  return self;
}
- (AttendanceReply_Builder*) clearAttendanceId {
  result.hasAttendanceId = NO;
  result.attendanceId = 0;
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (User*) sender {
  return result.sender;
}
- (AttendanceReply_Builder*) setSender:(User*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (AttendanceReply_Builder*) setSenderBuilder:(User_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (AttendanceReply_Builder*) mergeSender:(User*) value {
  if (result.hasSender &&
      result.sender != [User defaultInstance]) {
    result.sender =
      [[[User builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (AttendanceReply_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [User defaultInstance];
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (AttendanceReply_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (AttendanceReply_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasCreateDate {
  return result.hasCreateDate;
}
- (NSString*) createDate {
  return result.createDate;
}
- (AttendanceReply_Builder*) setCreateDate:(NSString*) value {
  result.hasCreateDate = YES;
  result.createDate = value;
  return self;
}
- (AttendanceReply_Builder*) clearCreateDate {
  result.hasCreateDate = NO;
  result.createDate = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (AttendanceReply_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (AttendanceReply_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceReply_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceReply_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (AttendanceReply_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (AttendanceReply_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceReply_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceReply_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

@interface PageAttendance ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * attendancesArray;
@end

@implementation PageAttendance

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize attendancesArray;
@dynamic attendances;
- (void) dealloc {
  self.page = nil;
  self.attendancesArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageAttendance* defaultPageAttendanceInstance = nil;
+ (void) initialize {
  if (self == [PageAttendance class]) {
    defaultPageAttendanceInstance = [[PageAttendance alloc] init];
  }
}
+ (PageAttendance*) defaultInstance {
  return defaultPageAttendanceInstance;
}
- (PageAttendance*) defaultInstance {
  return defaultPageAttendanceInstance;
}
- (PBArray *)attendances {
  return attendancesArray;
}
- (Attendance*)attendancesAtIndex:(NSUInteger)index {
  return [attendancesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (Attendance* element in self.attendances) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (Attendance *element in self.attendancesArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (Attendance *element in self.attendancesArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageAttendance*) parseFromData:(NSData*) data {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromData:data] build];
}
+ (PageAttendance*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageAttendance*) parseFromInputStream:(NSInputStream*) input {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromInputStream:input] build];
}
+ (PageAttendance*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageAttendance*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromCodedInputStream:input] build];
}
+ (PageAttendance*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageAttendance*)[[[PageAttendance builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageAttendance_Builder*) builder {
  return [[[PageAttendance_Builder alloc] init] autorelease];
}
+ (PageAttendance_Builder*) builderWithPrototype:(PageAttendance*) prototype {
  return [[PageAttendance builder] mergeFrom:prototype];
}
- (PageAttendance_Builder*) builder {
  return [PageAttendance builder];
}
- (PageAttendance_Builder*) toBuilder {
  return [PageAttendance builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Attendance* element in self.attendancesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"attendances"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageAttendance class]]) {
    return NO;
  }
  PageAttendance *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.attendancesArray isEqualToArray:otherMessage.attendancesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (Attendance* element in self.attendancesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageAttendance_Builder()
@property (retain) PageAttendance* result;
@end

@implementation PageAttendance_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageAttendance alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageAttendance_Builder*) clear {
  self.result = [[[PageAttendance alloc] init] autorelease];
  return self;
}
- (PageAttendance_Builder*) clone {
  return [PageAttendance builderWithPrototype:result];
}
- (PageAttendance*) defaultInstance {
  return [PageAttendance defaultInstance];
}
- (PageAttendance*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageAttendance*) buildPartial {
  PageAttendance* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageAttendance_Builder*) mergeFrom:(PageAttendance*) other {
  if (other == [PageAttendance defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.attendancesArray.count > 0) {
    if (result.attendancesArray == nil) {
      result.attendancesArray = [[other.attendancesArray copyWithZone:[other.attendancesArray zone]] autorelease];
    } else {
      [result.attendancesArray appendArray:other.attendancesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageAttendance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageAttendance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Attendance_Builder* subBuilder = [Attendance builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttendances:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageAttendance_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageAttendance_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageAttendance_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageAttendance_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)attendances {
  return result.attendancesArray;
}
- (Attendance*)attendancesAtIndex:(NSUInteger)index {
  return [result attendancesAtIndex:index];
}
- (PageAttendance_Builder *)addAttendances:(Attendance*)value {
  if (result.attendancesArray == nil) {
    result.attendancesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.attendancesArray addObject:value];
  return self;
}
- (PageAttendance_Builder *)setAttendancesArray:(NSArray *)array {
  result.attendancesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageAttendance_Builder *)setAttendancesValues:(const Attendance* *)values count:(NSUInteger)count {
  result.attendancesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageAttendance_Builder *)clearAttendances {
  result.attendancesArray = nil;
  return self;
}
@end

@interface AttendanceParams ()
@property (retain) AttendanceCategory* category;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@property int32_t page;
@property int32_t attendanceId;
@end

@implementation AttendanceParams

- (BOOL) hasCategory {
  return !!hasCategory_;
}
- (void) setHasCategory:(BOOL) value_ {
  hasCategory_ = !!value_;
}
@synthesize category;
@synthesize usersArray;
@dynamic users;
@synthesize departmentsArray;
@dynamic departments;
- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
  hasEndDate_ = !!value_;
}
@synthesize endDate;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasAttendanceId {
  return !!hasAttendanceId_;
}
- (void) setHasAttendanceId:(BOOL) value_ {
  hasAttendanceId_ = !!value_;
}
@synthesize attendanceId;
- (void) dealloc {
  self.category = nil;
  self.usersArray = nil;
  self.departmentsArray = nil;
  self.startDate = nil;
  self.endDate = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.category = [AttendanceCategory defaultInstance];
    self.startDate = @"";
    self.endDate = @"";
    self.page = 0;
    self.attendanceId = 0;
  }
  return self;
}
static AttendanceParams* defaultAttendanceParamsInstance = nil;
+ (void) initialize {
  if (self == [AttendanceParams class]) {
    defaultAttendanceParamsInstance = [[AttendanceParams alloc] init];
  }
}
+ (AttendanceParams*) defaultInstance {
  return defaultAttendanceParamsInstance;
}
- (AttendanceParams*) defaultInstance {
  return defaultAttendanceParamsInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (PBArray *)departments {
  return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [departmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasCategory) {
    if (!self.category.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.departments) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategory) {
    [output writeMessage:1 value:self.category];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:2 value:element];
  }
  for (Department *element in self.departmentsArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasStartDate) {
    [output writeString:4 value:self.startDate];
  }
  if (self.hasEndDate) {
    [output writeString:5 value:self.endDate];
  }
  if (self.hasPage) {
    [output writeInt32:6 value:self.page];
  }
  if (self.hasAttendanceId) {
    [output writeInt32:7 value:self.attendanceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCategory) {
    size_ += computeMessageSize(1, self.category);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(2, element);
  }
  for (Department *element in self.departmentsArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasStartDate) {
    size_ += computeStringSize(4, self.startDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(5, self.endDate);
  }
  if (self.hasPage) {
    size_ += computeInt32Size(6, self.page);
  }
  if (self.hasAttendanceId) {
    size_ += computeInt32Size(7, self.attendanceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AttendanceParams*) parseFromData:(NSData*) data {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromData:data] build];
}
+ (AttendanceParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AttendanceParams*) parseFromInputStream:(NSInputStream*) input {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromInputStream:input] build];
}
+ (AttendanceParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromCodedInputStream:input] build];
}
+ (AttendanceParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AttendanceParams*)[[[AttendanceParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttendanceParams_Builder*) builder {
  return [[[AttendanceParams_Builder alloc] init] autorelease];
}
+ (AttendanceParams_Builder*) builderWithPrototype:(AttendanceParams*) prototype {
  return [[AttendanceParams builder] mergeFrom:prototype];
}
- (AttendanceParams_Builder*) builder {
  return [AttendanceParams builder];
}
- (AttendanceParams_Builder*) toBuilder {
  return [AttendanceParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategory) {
    [output appendFormat:@"%@%@ {\n", indent, @"category"];
    [self.category writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"departments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasAttendanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attendanceId", [NSNumber numberWithInt:self.attendanceId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AttendanceParams class]]) {
    return NO;
  }
  AttendanceParams *otherMessage = other;
  return
      self.hasCategory == otherMessage.hasCategory &&
      (!self.hasCategory || [self.category isEqual:otherMessage.category]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasAttendanceId == otherMessage.hasAttendanceId &&
      (!self.hasAttendanceId || self.attendanceId == otherMessage.attendanceId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasCategory) {
    hashCode = hashCode * 31 + [self.category hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (Department* element in self.departmentsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [self.startDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasAttendanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.attendanceId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AttendanceParams_Builder()
@property (retain) AttendanceParams* result;
@end

@implementation AttendanceParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AttendanceParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AttendanceParams_Builder*) clear {
  self.result = [[[AttendanceParams alloc] init] autorelease];
  return self;
}
- (AttendanceParams_Builder*) clone {
  return [AttendanceParams builderWithPrototype:result];
}
- (AttendanceParams*) defaultInstance {
  return [AttendanceParams defaultInstance];
}
- (AttendanceParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AttendanceParams*) buildPartial {
  AttendanceParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AttendanceParams_Builder*) mergeFrom:(AttendanceParams*) other {
  if (other == [AttendanceParams defaultInstance]) {
    return self;
  }
  if (other.hasCategory) {
    [self mergeCategory:other.category];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  if (other.departmentsArray.count > 0) {
    if (result.departmentsArray == nil) {
      result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
    } else {
      [result.departmentsArray appendArray:other.departmentsArray];
    }
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasAttendanceId) {
    [self setAttendanceId:other.attendanceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AttendanceParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttendanceParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        AttendanceCategory_Builder* subBuilder = [AttendanceCategory builder];
        if (self.hasCategory) {
          [subBuilder mergeFrom:self.category];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCategory:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartments:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setStartDate:[input readString]];
        break;
      }
      case 42: {
        [self setEndDate:[input readString]];
        break;
      }
      case 48: {
        [self setPage:[input readInt32]];
        break;
      }
      case 56: {
        [self setAttendanceId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCategory {
  return result.hasCategory;
}
- (AttendanceCategory*) category {
  return result.category;
}
- (AttendanceParams_Builder*) setCategory:(AttendanceCategory*) value {
  result.hasCategory = YES;
  result.category = value;
  return self;
}
- (AttendanceParams_Builder*) setCategoryBuilder:(AttendanceCategory_Builder*) builderForValue {
  return [self setCategory:[builderForValue build]];
}
- (AttendanceParams_Builder*) mergeCategory:(AttendanceCategory*) value {
  if (result.hasCategory &&
      result.category != [AttendanceCategory defaultInstance]) {
    result.category =
      [[[AttendanceCategory builderWithPrototype:result.category] mergeFrom:value] buildPartial];
  } else {
    result.category = value;
  }
  result.hasCategory = YES;
  return self;
}
- (AttendanceParams_Builder*) clearCategory {
  result.hasCategory = NO;
  result.category = [AttendanceCategory defaultInstance];
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (AttendanceParams_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (AttendanceParams_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceParams_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
- (PBAppendableArray *)departments {
  return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
  return [result departmentsAtIndex:index];
}
- (AttendanceParams_Builder *)addDepartments:(Department*)value {
  if (result.departmentsArray == nil) {
    result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentsArray addObject:value];
  return self;
}
- (AttendanceParams_Builder *)setDepartmentsArray:(NSArray *)array {
  result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (AttendanceParams_Builder *)clearDepartments {
  result.departmentsArray = nil;
  return self;
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (NSString*) startDate {
  return result.startDate;
}
- (AttendanceParams_Builder*) setStartDate:(NSString*) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (AttendanceParams_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return result.hasEndDate;
}
- (NSString*) endDate {
  return result.endDate;
}
- (AttendanceParams_Builder*) setEndDate:(NSString*) value {
  result.hasEndDate = YES;
  result.endDate = value;
  return self;
}
- (AttendanceParams_Builder*) clearEndDate {
  result.hasEndDate = NO;
  result.endDate = @"";
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (AttendanceParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (AttendanceParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasAttendanceId {
  return result.hasAttendanceId;
}
- (int32_t) attendanceId {
  return result.attendanceId;
}
- (AttendanceParams_Builder*) setAttendanceId:(int32_t) value {
  result.hasAttendanceId = YES;
  result.attendanceId = value;
  return self;
}
- (AttendanceParams_Builder*) clearAttendanceId {
  result.hasAttendanceId = NO;
  result.attendanceId = 0;
  return self;
}
@end

