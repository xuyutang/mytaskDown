// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Log.pb.h"

@implementation LogRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [LogRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL LogTypeIsValidValue(LogType value) {
  switch (value) {
    case LogTypeLogin:
    case LogTypeLogout:
      return YES;
    default:
      return NO;
  }
}
@interface Log ()
@property (retain) Location* location;
@property (retain) NSString* type;
@property (retain) NSString* content;
@end

@implementation Log

- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (void) dealloc {
  self.location = nil;
  self.type = nil;
  self.content = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.location = [Location defaultInstance];
    self.type = @"";
    self.content = @"";
  }
  return self;
}
static Log* defaultLogInstance = nil;
+ (void) initialize {
  if (self == [Log class]) {
    defaultLogInstance = [[Log alloc] init];
  }
}
+ (Log*) defaultInstance {
  return defaultLogInstance;
}
- (Log*) defaultInstance {
  return defaultLogInstance;
}
- (BOOL) isInitialized {
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLocation) {
    [output writeMessage:1 value:self.location];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLocation) {
    size_ += computeMessageSize(1, self.location);
  }
  if (self.hasType) {
    size_ += computeStringSize(2, self.type);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Log*) parseFromData:(NSData*) data {
  return (Log*)[[[Log builder] mergeFromData:data] build];
}
+ (Log*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Log*)[[[Log builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Log*) parseFromInputStream:(NSInputStream*) input {
  return (Log*)[[[Log builder] mergeFromInputStream:input] build];
}
+ (Log*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Log*)[[[Log builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Log*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Log*)[[[Log builder] mergeFromCodedInputStream:input] build];
}
+ (Log*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Log*)[[[Log builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Log_Builder*) builder {
  return [[[Log_Builder alloc] init] autorelease];
}
+ (Log_Builder*) builderWithPrototype:(Log*) prototype {
  return [[Log builder] mergeFrom:prototype];
}
- (Log_Builder*) builder {
  return [Log builder];
}
- (Log_Builder*) toBuilder {
  return [Log builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Log class]]) {
    return NO;
  }
  Log *otherMessage = other;
  return
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Log_Builder()
@property (retain) Log* result;
@end

@implementation Log_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Log alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Log_Builder*) clear {
  self.result = [[[Log alloc] init] autorelease];
  return self;
}
- (Log_Builder*) clone {
  return [Log builderWithPrototype:result];
}
- (Log*) defaultInstance {
  return [Log defaultInstance];
}
- (Log*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Log*) buildPartial {
  Log* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Log_Builder*) mergeFrom:(Log*) other {
  if (other == [Log defaultInstance]) {
    return self;
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Log_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Log_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (Log_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (Log_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (Log_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (Log_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (Log_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Log_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (Log_Builder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (Log_Builder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
@end

