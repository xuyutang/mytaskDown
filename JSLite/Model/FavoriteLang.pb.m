// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "FavoriteLang.pb.h"

@implementation FavoriteLangRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FavoriteLangRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FavoriteLang ()
@property int32_t id;
@property (retain) User* user;
@property (retain) NSString* commonLang;
@end

@implementation FavoriteLang

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasCommonLang {
  return !!hasCommonLang_;
}
- (void) setHasCommonLang:(BOOL) value_ {
  hasCommonLang_ = !!value_;
}
@synthesize commonLang;
- (void) dealloc {
  self.user = nil;
  self.commonLang = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.user = [User defaultInstance];
    self.commonLang = @"";
  }
  return self;
}
static FavoriteLang* defaultFavoriteLangInstance = nil;
+ (void) initialize {
  if (self == [FavoriteLang class]) {
    defaultFavoriteLangInstance = [[FavoriteLang alloc] init];
  }
}
+ (FavoriteLang*) defaultInstance {
  return defaultFavoriteLangInstance;
}
- (FavoriteLang*) defaultInstance {
  return defaultFavoriteLangInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasCommonLang) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasCommonLang) {
    [output writeString:3 value:self.commonLang];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasCommonLang) {
    size_ += computeStringSize(3, self.commonLang);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FavoriteLang*) parseFromData:(NSData*) data {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromData:data] build];
}
+ (FavoriteLang*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FavoriteLang*) parseFromInputStream:(NSInputStream*) input {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromInputStream:input] build];
}
+ (FavoriteLang*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FavoriteLang*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromCodedInputStream:input] build];
}
+ (FavoriteLang*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FavoriteLang*)[[[FavoriteLang builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FavoriteLang_Builder*) builder {
  return [[[FavoriteLang_Builder alloc] init] autorelease];
}
+ (FavoriteLang_Builder*) builderWithPrototype:(FavoriteLang*) prototype {
  return [[FavoriteLang builder] mergeFrom:prototype];
}
- (FavoriteLang_Builder*) builder {
  return [FavoriteLang builder];
}
- (FavoriteLang_Builder*) toBuilder {
  return [FavoriteLang builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCommonLang) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commonLang", self.commonLang];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FavoriteLang class]]) {
    return NO;
  }
  FavoriteLang *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCommonLang == otherMessage.hasCommonLang &&
      (!self.hasCommonLang || [self.commonLang isEqual:otherMessage.commonLang]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCommonLang) {
    hashCode = hashCode * 31 + [self.commonLang hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FavoriteLang_Builder()
@property (retain) FavoriteLang* result;
@end

@implementation FavoriteLang_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FavoriteLang alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FavoriteLang_Builder*) clear {
  self.result = [[[FavoriteLang alloc] init] autorelease];
  return self;
}
- (FavoriteLang_Builder*) clone {
  return [FavoriteLang builderWithPrototype:result];
}
- (FavoriteLang*) defaultInstance {
  return [FavoriteLang defaultInstance];
}
- (FavoriteLang*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FavoriteLang*) buildPartial {
  FavoriteLang* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FavoriteLang_Builder*) mergeFrom:(FavoriteLang*) other {
  if (other == [FavoriteLang defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCommonLang) {
    [self setCommonLang:other.commonLang];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FavoriteLang_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FavoriteLang_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setCommonLang:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (FavoriteLang_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (FavoriteLang_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (FavoriteLang_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (FavoriteLang_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (FavoriteLang_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (FavoriteLang_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasCommonLang {
  return result.hasCommonLang;
}
- (NSString*) commonLang {
  return result.commonLang;
}
- (FavoriteLang_Builder*) setCommonLang:(NSString*) value {
  result.hasCommonLang = YES;
  result.commonLang = value;
  return self;
}
- (FavoriteLang_Builder*) clearCommonLang {
  result.hasCommonLang = NO;
  result.commonLang = @"";
  return self;
}
@end

