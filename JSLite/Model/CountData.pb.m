// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "CountData.pb.h"

@implementation CountDataRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
    return extensionRegistry;
}

+ (void) initialize {
    if (self == [CountDataRoot class]) {
        PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
        [self registerAllExtensions:registry];
        [UserRoot registerAllExtensions:registry];
        [CustomerRoot registerAllExtensions:registry];
        extensionRegistry = [registry retain];
    }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface CountParams ()
@property int32_t page;
@property (retain) PBAppendableArray * usersArray;
@property (retain) PBAppendableArray * customerCategoryArray;
@property (retain) PBAppendableArray * customersArray;
@property (retain) PBAppendableArray * departmentsArray;
@property (retain) PBAppendableArray * companiesArray;
@property (retain) NSString* startDate;
@property (retain) NSString* endDate;
@end

@implementation CountParams

- (BOOL) hasPage {
    return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
    hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
@synthesize customerCategoryArray;
@dynamic customerCategory;
@synthesize customersArray;
@dynamic customers;
@synthesize departmentsArray;
@dynamic departments;
@synthesize companiesArray;
@dynamic companies;
- (BOOL) hasStartDate {
    return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
    hasStartDate_ = !!value_;
}
@synthesize startDate;
- (BOOL) hasEndDate {
    return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) value_ {
    hasEndDate_ = !!value_;
}
@synthesize endDate;
- (void) dealloc {
    self.usersArray = nil;
    self.customerCategoryArray = nil;
    self.customersArray = nil;
    self.departmentsArray = nil;
    self.companiesArray = nil;
    self.startDate = nil;
    self.endDate = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.page = 0;
        self.startDate = @"";
        self.endDate = @"";
    }
    return self;
}
static CountParams* defaultCountParamsInstance = nil;
+ (void) initialize {
    if (self == [CountParams class]) {
        defaultCountParamsInstance = [[CountParams alloc] init];
    }
}
+ (CountParams*) defaultInstance {
    return defaultCountParamsInstance;
}
- (CountParams*) defaultInstance {
    return defaultCountParamsInstance;
}
- (PBArray *)users {
    return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
    return [usersArray objectAtIndex:index];
}
- (PBArray *)customerCategory {
    return customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
    return [customerCategoryArray objectAtIndex:index];
}
- (PBArray *)customers {
    return customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
    return [customersArray objectAtIndex:index];
}
- (PBArray *)departments {
    return departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
    return [departmentsArray objectAtIndex:index];
}
- (PBArray *)companies {
    return companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
    return [companiesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
    for (User* element in self.users) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    for (CustomerCategory* element in self.customerCategory) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    for (Customer* element in self.customers) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    for (Department* element in self.departments) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    for (Company* element in self.companies) {
        if (!element.isInitialized) {
            return NO;
        }
    }
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasPage) {
        [output writeInt32:1 value:self.page];
    }
    for (User *element in self.usersArray) {
        [output writeMessage:2 value:element];
    }
    for (CustomerCategory *element in self.customerCategoryArray) {
        [output writeMessage:3 value:element];
    }
    for (Customer *element in self.customersArray) {
        [output writeMessage:4 value:element];
    }
    for (Department *element in self.departmentsArray) {
        [output writeMessage:5 value:element];
    }
    for (Company *element in self.companiesArray) {
        [output writeMessage:6 value:element];
    }
    if (self.hasStartDate) {
        [output writeString:7 value:self.startDate];
    }
    if (self.hasEndDate) {
        [output writeString:8 value:self.endDate];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasPage) {
        size_ += computeInt32Size(1, self.page);
    }
    for (User *element in self.usersArray) {
        size_ += computeMessageSize(2, element);
    }
    for (CustomerCategory *element in self.customerCategoryArray) {
        size_ += computeMessageSize(3, element);
    }
    for (Customer *element in self.customersArray) {
        size_ += computeMessageSize(4, element);
    }
    for (Department *element in self.departmentsArray) {
        size_ += computeMessageSize(5, element);
    }
    for (Company *element in self.companiesArray) {
        size_ += computeMessageSize(6, element);
    }
    if (self.hasStartDate) {
        size_ += computeStringSize(7, self.startDate);
    }
    if (self.hasEndDate) {
        size_ += computeStringSize(8, self.endDate);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CountParams*) parseFromData:(NSData*) data {
    return (CountParams*)[[[CountParams builder] mergeFromData:data] build];
}
+ (CountParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountParams*)[[[CountParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CountParams*) parseFromInputStream:(NSInputStream*) input {
    return (CountParams*)[[[CountParams builder] mergeFromInputStream:input] build];
}
+ (CountParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountParams*)[[[CountParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CountParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CountParams*)[[[CountParams builder] mergeFromCodedInputStream:input] build];
}
+ (CountParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountParams*)[[[CountParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CountParams_Builder*) builder {
    return [[[CountParams_Builder alloc] init] autorelease];
}
+ (CountParams_Builder*) builderWithPrototype:(CountParams*) prototype {
    return [[CountParams builder] mergeFrom:prototype];
}
- (CountParams_Builder*) builder {
    return [CountParams builder];
}
- (CountParams_Builder*) toBuilder {
    return [CountParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasPage) {
        [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
    }
    for (User* element in self.usersArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"users"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (CustomerCategory* element in self.customerCategoryArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"customerCategory"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (Customer* element in self.customersArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"customers"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (Department* element in self.departmentsArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"departments"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    for (Company* element in self.companiesArray) {
        [output appendFormat:@"%@%@ {\n", indent, @"companies"];
        [element writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
        [output appendFormat:@"%@}\n", indent];
    }
    if (self.hasStartDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"startDate", self.startDate];
    }
    if (self.hasEndDate) {
        [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CountParams class]]) {
        return NO;
    }
    CountParams *otherMessage = other;
    return
    self.hasPage == otherMessage.hasPage &&
    (!self.hasPage || self.page == otherMessage.page) &&
    [self.usersArray isEqualToArray:otherMessage.usersArray] &&
    [self.customerCategoryArray isEqualToArray:otherMessage.customerCategoryArray] &&
    [self.customersArray isEqualToArray:otherMessage.customersArray] &&
    [self.departmentsArray isEqualToArray:otherMessage.departmentsArray] &&
    [self.companiesArray isEqualToArray:otherMessage.companiesArray] &&
    self.hasStartDate == otherMessage.hasStartDate &&
    (!self.hasStartDate || [self.startDate isEqual:otherMessage.startDate]) &&
    self.hasEndDate == otherMessage.hasEndDate &&
    (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasPage) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
    }
    for (User* element in self.usersArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (CustomerCategory* element in self.customerCategoryArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (Customer* element in self.customersArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (Department* element in self.departmentsArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    for (Company* element in self.companiesArray) {
        hashCode = hashCode * 31 + [element hash];
    }
    if (self.hasStartDate) {
        hashCode = hashCode * 31 + [self.startDate hash];
    }
    if (self.hasEndDate) {
        hashCode = hashCode * 31 + [self.endDate hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CountParams_Builder()
@property (retain) CountParams* result;
@end

@implementation CountParams_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CountParams alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CountParams_Builder*) clear {
    self.result = [[[CountParams alloc] init] autorelease];
    return self;
}
- (CountParams_Builder*) clone {
    return [CountParams builderWithPrototype:result];
}
- (CountParams*) defaultInstance {
    return [CountParams defaultInstance];
}
- (CountParams*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CountParams*) buildPartial {
    CountParams* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CountParams_Builder*) mergeFrom:(CountParams*) other {
    if (other == [CountParams defaultInstance]) {
        return self;
    }
    if (other.hasPage) {
        [self setPage:other.page];
    }
    if (other.usersArray.count > 0) {
        if (result.usersArray == nil) {
            result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
        } else {
            [result.usersArray appendArray:other.usersArray];
        }
    }
    if (other.customerCategoryArray.count > 0) {
        if (result.customerCategoryArray == nil) {
            result.customerCategoryArray = [[other.customerCategoryArray copyWithZone:[other.customerCategoryArray zone]] autorelease];
        } else {
            [result.customerCategoryArray appendArray:other.customerCategoryArray];
        }
    }
    if (other.customersArray.count > 0) {
        if (result.customersArray == nil) {
            result.customersArray = [[other.customersArray copyWithZone:[other.customersArray zone]] autorelease];
        } else {
            [result.customersArray appendArray:other.customersArray];
        }
    }
    if (other.departmentsArray.count > 0) {
        if (result.departmentsArray == nil) {
            result.departmentsArray = [[other.departmentsArray copyWithZone:[other.departmentsArray zone]] autorelease];
        } else {
            [result.departmentsArray appendArray:other.departmentsArray];
        }
    }
    if (other.companiesArray.count > 0) {
        if (result.companiesArray == nil) {
            result.companiesArray = [[other.companiesArray copyWithZone:[other.companiesArray zone]] autorelease];
        } else {
            [result.companiesArray appendArray:other.companiesArray];
        }
    }
    if (other.hasStartDate) {
        [self setStartDate:other.startDate];
    }
    if (other.hasEndDate) {
        [self setEndDate:other.endDate];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CountParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CountParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 8: {
                [self setPage:[input readInt32]];
                break;
            }
            case 18: {
                User_Builder* subBuilder = [User builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addUsers:[subBuilder buildPartial]];
                break;
            }
            case 26: {
                CustomerCategory_Builder* subBuilder = [CustomerCategory builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addCustomerCategory:[subBuilder buildPartial]];
                break;
            }
            case 34: {
                Customer_Builder* subBuilder = [Customer builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addCustomers:[subBuilder buildPartial]];
                break;
            }
            case 42: {
                Department_Builder* subBuilder = [Department builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addDepartments:[subBuilder buildPartial]];
                break;
            }
            case 50: {
                Company_Builder* subBuilder = [Company builder];
                [input readMessage:subBuilder extensionRegistry:extensionRegistry];
                [self addCompanies:[subBuilder buildPartial]];
                break;
            }
            case 58: {
                [self setStartDate:[input readString]];
                break;
            }
            case 66: {
                [self setEndDate:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasPage {
    return result.hasPage;
}
- (int32_t) page {
    return result.page;
}
- (CountParams_Builder*) setPage:(int32_t) value {
    result.hasPage = YES;
    result.page = value;
    return self;
}
- (CountParams_Builder*) clearPage {
    result.hasPage = NO;
    result.page = 0;
    return self;
}
- (PBAppendableArray *)users {
    return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
    return [result usersAtIndex:index];
}
- (CountParams_Builder *)addUsers:(User*)value {
    if (result.usersArray == nil) {
        result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.usersArray addObject:value];
    return self;
}
- (CountParams_Builder *)setUsersArray:(NSArray *)array {
    result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
    result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)clearUsers {
    result.usersArray = nil;
    return self;
}
- (PBAppendableArray *)customerCategory {
    return result.customerCategoryArray;
}
- (CustomerCategory*)customerCategoryAtIndex:(NSUInteger)index {
    return [result customerCategoryAtIndex:index];
}
- (CountParams_Builder *)addCustomerCategory:(CustomerCategory*)value {
    if (result.customerCategoryArray == nil) {
        result.customerCategoryArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.customerCategoryArray addObject:value];
    return self;
}
- (CountParams_Builder *)setCustomerCategoryArray:(NSArray *)array {
    result.customerCategoryArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)setCustomerCategoryValues:(const CustomerCategory* *)values count:(NSUInteger)count {
    result.customerCategoryArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)clearCustomerCategory {
    result.customerCategoryArray = nil;
    return self;
}
- (PBAppendableArray *)customers {
    return result.customersArray;
}
- (Customer*)customersAtIndex:(NSUInteger)index {
    return [result customersAtIndex:index];
}
- (CountParams_Builder *)addCustomers:(Customer*)value {
    if (result.customersArray == nil) {
        result.customersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.customersArray addObject:value];
    return self;
}
- (CountParams_Builder *)setCustomersArray:(NSArray *)array {
    result.customersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)setCustomersValues:(const Customer* *)values count:(NSUInteger)count {
    result.customersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)clearCustomers {
    result.customersArray = nil;
    return self;
}
- (PBAppendableArray *)departments {
    return result.departmentsArray;
}
- (Department*)departmentsAtIndex:(NSUInteger)index {
    return [result departmentsAtIndex:index];
}
- (CountParams_Builder *)addDepartments:(Department*)value {
    if (result.departmentsArray == nil) {
        result.departmentsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.departmentsArray addObject:value];
    return self;
}
- (CountParams_Builder *)setDepartmentsArray:(NSArray *)array {
    result.departmentsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)setDepartmentsValues:(const Department* *)values count:(NSUInteger)count {
    result.departmentsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)clearDepartments {
    result.departmentsArray = nil;
    return self;
}
- (PBAppendableArray *)companies {
    return result.companiesArray;
}
- (Company*)companiesAtIndex:(NSUInteger)index {
    return [result companiesAtIndex:index];
}
- (CountParams_Builder *)addCompanies:(Company*)value {
    if (result.companiesArray == nil) {
        result.companiesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
    }
    [result.companiesArray addObject:value];
    return self;
}
- (CountParams_Builder *)setCompaniesArray:(NSArray *)array {
    result.companiesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)setCompaniesValues:(const Company* *)values count:(NSUInteger)count {
    result.companiesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
    return self;
}
- (CountParams_Builder *)clearCompanies {
    result.companiesArray = nil;
    return self;
}
- (BOOL) hasStartDate {
    return result.hasStartDate;
}
- (NSString*) startDate {
    return result.startDate;
}
- (CountParams_Builder*) setStartDate:(NSString*) value {
    result.hasStartDate = YES;
    result.startDate = value;
    return self;
}
- (CountParams_Builder*) clearStartDate {
    result.hasStartDate = NO;
    result.startDate = @"";
    return self;
}
- (BOOL) hasEndDate {
    return result.hasEndDate;
}
- (NSString*) endDate {
    return result.endDate;
}
- (CountParams_Builder*) setEndDate:(NSString*) value {
    result.hasEndDate = YES;
    result.endDate = value;
    return self;
}
- (CountParams_Builder*) clearEndDate {
    result.hasEndDate = NO;
    result.endDate = @"";
    return self;
}
@end

@interface CountData ()
@property (retain) NSString* favCustomerCount;
@property (retain) NSString* favProductCount;
@property (retain) NSString* favPatrolTypeCount;
@property (retain) NSString* myCustomerCount;
@property (retain) NSString* nearByUserCount;
@property (retain) NSString* patrolCount;
@property (retain) NSString* workLogCount;
@property (retain) NSString* attendanceCount;
@property (retain) NSString* orderGoodsCount;
@property (retain) NSString* stockCount;
@property (retain) NSString* saleGoodsCount;
@property (retain) NSString* competitionGoodsCount;
@property (retain) NSString* marketResearchCount;
@property (retain) NSString* businessOpportunityCount;
@property (retain) NSString* applyItemCount;
@property (retain) NSString* giftPurchaseCount;
@property (retain) NSString* giftDeliveryCount;
@property (retain) NSString* giftDistributeCount;
@property (retain) NSString* giftStockCount;
@property (retain) NSString* inspectionReportCount;
@property (retain) NSString* taskPatrolCount;
@property (retain) NSString* videoUploadCount;
@property (retain) NSString* paperPostCount;
@property (retain) NSString* holidayCount;
@property (retain) NSString* checkinCount;
@property int32_t version;
@end

@implementation CountData

- (BOOL) hasFavCustomerCount {
    return !!hasFavCustomerCount_;
}
- (void) setHasFavCustomerCount:(BOOL) value_ {
    hasFavCustomerCount_ = !!value_;
}
@synthesize favCustomerCount;
- (BOOL) hasFavProductCount {
    return !!hasFavProductCount_;
}
- (void) setHasFavProductCount:(BOOL) value_ {
    hasFavProductCount_ = !!value_;
}
@synthesize favProductCount;
- (BOOL) hasFavPatrolTypeCount {
    return !!hasFavPatrolTypeCount_;
}
- (void) setHasFavPatrolTypeCount:(BOOL) value_ {
    hasFavPatrolTypeCount_ = !!value_;
}
@synthesize favPatrolTypeCount;
- (BOOL) hasMyCustomerCount {
    return !!hasMyCustomerCount_;
}
- (void) setHasMyCustomerCount:(BOOL) value_ {
    hasMyCustomerCount_ = !!value_;
}
@synthesize myCustomerCount;
- (BOOL) hasNearByUserCount {
    return !!hasNearByUserCount_;
}
- (void) setHasNearByUserCount:(BOOL) value_ {
    hasNearByUserCount_ = !!value_;
}
@synthesize nearByUserCount;
- (BOOL) hasPatrolCount {
    return !!hasPatrolCount_;
}
- (void) setHasPatrolCount:(BOOL) value_ {
    hasPatrolCount_ = !!value_;
}
@synthesize patrolCount;
- (BOOL) hasWorkLogCount {
    return !!hasWorkLogCount_;
}
- (void) setHasWorkLogCount:(BOOL) value_ {
    hasWorkLogCount_ = !!value_;
}
@synthesize workLogCount;
- (BOOL) hasAttendanceCount {
    return !!hasAttendanceCount_;
}
- (void) setHasAttendanceCount:(BOOL) value_ {
    hasAttendanceCount_ = !!value_;
}
@synthesize attendanceCount;
- (BOOL) hasOrderGoodsCount {
    return !!hasOrderGoodsCount_;
}
- (void) setHasOrderGoodsCount:(BOOL) value_ {
    hasOrderGoodsCount_ = !!value_;
}
@synthesize orderGoodsCount;
- (BOOL) hasStockCount {
    return !!hasStockCount_;
}
- (void) setHasStockCount:(BOOL) value_ {
    hasStockCount_ = !!value_;
}
@synthesize stockCount;
- (BOOL) hasSaleGoodsCount {
    return !!hasSaleGoodsCount_;
}
- (void) setHasSaleGoodsCount:(BOOL) value_ {
    hasSaleGoodsCount_ = !!value_;
}
@synthesize saleGoodsCount;
- (BOOL) hasCompetitionGoodsCount {
    return !!hasCompetitionGoodsCount_;
}
- (void) setHasCompetitionGoodsCount:(BOOL) value_ {
    hasCompetitionGoodsCount_ = !!value_;
}
@synthesize competitionGoodsCount;
- (BOOL) hasMarketResearchCount {
    return !!hasMarketResearchCount_;
}
- (void) setHasMarketResearchCount:(BOOL) value_ {
    hasMarketResearchCount_ = !!value_;
}
@synthesize marketResearchCount;
- (BOOL) hasBusinessOpportunityCount {
    return !!hasBusinessOpportunityCount_;
}
- (void) setHasBusinessOpportunityCount:(BOOL) value_ {
    hasBusinessOpportunityCount_ = !!value_;
}
@synthesize businessOpportunityCount;
- (BOOL) hasApplyItemCount {
    return !!hasApplyItemCount_;
}
- (void) setHasApplyItemCount:(BOOL) value_ {
    hasApplyItemCount_ = !!value_;
}
@synthesize applyItemCount;
- (BOOL) hasGiftPurchaseCount {
    return !!hasGiftPurchaseCount_;
}
- (void) setHasGiftPurchaseCount:(BOOL) value_ {
    hasGiftPurchaseCount_ = !!value_;
}
@synthesize giftPurchaseCount;
- (BOOL) hasGiftDeliveryCount {
    return !!hasGiftDeliveryCount_;
}
- (void) setHasGiftDeliveryCount:(BOOL) value_ {
    hasGiftDeliveryCount_ = !!value_;
}
@synthesize giftDeliveryCount;
- (BOOL) hasGiftDistributeCount {
    return !!hasGiftDistributeCount_;
}
- (void) setHasGiftDistributeCount:(BOOL) value_ {
    hasGiftDistributeCount_ = !!value_;
}
@synthesize giftDistributeCount;
- (BOOL) hasGiftStockCount {
    return !!hasGiftStockCount_;
}
- (void) setHasGiftStockCount:(BOOL) value_ {
    hasGiftStockCount_ = !!value_;
}
@synthesize giftStockCount;
- (BOOL) hasInspectionReportCount {
    return !!hasInspectionReportCount_;
}
- (void) setHasInspectionReportCount:(BOOL) value_ {
    hasInspectionReportCount_ = !!value_;
}
@synthesize inspectionReportCount;
- (BOOL) hasTaskPatrolCount {
    return !!hasTaskPatrolCount_;
}
- (void) setHasTaskPatrolCount:(BOOL) value_ {
    hasTaskPatrolCount_ = !!value_;
}
@synthesize taskPatrolCount;
- (BOOL) hasVideoUploadCount {
    return !!hasVideoUploadCount_;
}
- (void) setHasVideoUploadCount:(BOOL) value_ {
    hasVideoUploadCount_ = !!value_;
}
@synthesize videoUploadCount;
- (BOOL) hasPaperPostCount {
    return !!hasPaperPostCount_;
}
- (void) setHasPaperPostCount:(BOOL) value_ {
    hasPaperPostCount_ = !!value_;
}
@synthesize paperPostCount;
- (BOOL) hasHolidayCount {
    return !!hasHolidayCount_;
}
- (void) setHasHolidayCount:(BOOL) value_ {
    hasHolidayCount_ = !!value_;
}
@synthesize holidayCount;
- (BOOL) hasCheckinCount {
    return !!hasCheckinCount_;
}
- (void) setHasCheckinCount:(BOOL) value_ {
    hasCheckinCount_ = !!value_;
}
@synthesize checkinCount;
- (BOOL) hasVersion {
    return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
    hasVersion_ = !!value_;
}
@synthesize version;
- (void) dealloc {
    self.favCustomerCount = nil;
    self.favProductCount = nil;
    self.favPatrolTypeCount = nil;
    self.myCustomerCount = nil;
    self.nearByUserCount = nil;
    self.patrolCount = nil;
    self.workLogCount = nil;
    self.attendanceCount = nil;
    self.orderGoodsCount = nil;
    self.stockCount = nil;
    self.saleGoodsCount = nil;
    self.competitionGoodsCount = nil;
    self.marketResearchCount = nil;
    self.businessOpportunityCount = nil;
    self.applyItemCount = nil;
    self.giftPurchaseCount = nil;
    self.giftDeliveryCount = nil;
    self.giftDistributeCount = nil;
    self.giftStockCount = nil;
    self.inspectionReportCount = nil;
    self.taskPatrolCount = nil;
    self.videoUploadCount = nil;
    self.paperPostCount = nil;
    self.holidayCount = nil;
    self.checkinCount = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.favCustomerCount = @"";
        self.favProductCount = @"";
        self.favPatrolTypeCount = @"";
        self.myCustomerCount = @"";
        self.nearByUserCount = @"";
        self.patrolCount = @"";
        self.workLogCount = @"";
        self.attendanceCount = @"";
        self.orderGoodsCount = @"";
        self.stockCount = @"";
        self.saleGoodsCount = @"";
        self.competitionGoodsCount = @"";
        self.marketResearchCount = @"";
        self.businessOpportunityCount = @"";
        self.applyItemCount = @"";
        self.giftPurchaseCount = @"";
        self.giftDeliveryCount = @"";
        self.giftDistributeCount = @"";
        self.giftStockCount = @"";
        self.inspectionReportCount = @"";
        self.taskPatrolCount = @"";
        self.videoUploadCount = @"";
        self.paperPostCount = @"";
        self.holidayCount = @"";
        self.checkinCount = @"";
        self.version = 1;
    }
    return self;
}
static CountData* defaultCountDataInstance = nil;
+ (void) initialize {
    if (self == [CountData class]) {
        defaultCountDataInstance = [[CountData alloc] init];
    }
}
+ (CountData*) defaultInstance {
    return defaultCountDataInstance;
}
- (CountData*) defaultInstance {
    return defaultCountDataInstance;
}
- (BOOL) isInitialized {
    return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
    if (self.hasFavCustomerCount) {
        [output writeString:1 value:self.favCustomerCount];
    }
    if (self.hasFavProductCount) {
        [output writeString:2 value:self.favProductCount];
    }
    if (self.hasFavPatrolTypeCount) {
        [output writeString:3 value:self.favPatrolTypeCount];
    }
    if (self.hasMyCustomerCount) {
        [output writeString:4 value:self.myCustomerCount];
    }
    if (self.hasNearByUserCount) {
        [output writeString:5 value:self.nearByUserCount];
    }
    if (self.hasPatrolCount) {
        [output writeString:6 value:self.patrolCount];
    }
    if (self.hasWorkLogCount) {
        [output writeString:7 value:self.workLogCount];
    }
    if (self.hasAttendanceCount) {
        [output writeString:8 value:self.attendanceCount];
    }
    if (self.hasOrderGoodsCount) {
        [output writeString:9 value:self.orderGoodsCount];
    }
    if (self.hasStockCount) {
        [output writeString:10 value:self.stockCount];
    }
    if (self.hasSaleGoodsCount) {
        [output writeString:11 value:self.saleGoodsCount];
    }
    if (self.hasCompetitionGoodsCount) {
        [output writeString:12 value:self.competitionGoodsCount];
    }
    if (self.hasMarketResearchCount) {
        [output writeString:13 value:self.marketResearchCount];
    }
    if (self.hasBusinessOpportunityCount) {
        [output writeString:14 value:self.businessOpportunityCount];
    }
    if (self.hasApplyItemCount) {
        [output writeString:15 value:self.applyItemCount];
    }
    if (self.hasGiftPurchaseCount) {
        [output writeString:16 value:self.giftPurchaseCount];
    }
    if (self.hasGiftDeliveryCount) {
        [output writeString:17 value:self.giftDeliveryCount];
    }
    if (self.hasGiftDistributeCount) {
        [output writeString:18 value:self.giftDistributeCount];
    }
    if (self.hasGiftStockCount) {
        [output writeString:19 value:self.giftStockCount];
    }
    if (self.hasInspectionReportCount) {
        [output writeString:20 value:self.inspectionReportCount];
    }
    if (self.hasTaskPatrolCount) {
        [output writeString:21 value:self.taskPatrolCount];
    }
    if (self.hasVideoUploadCount) {
        [output writeString:22 value:self.videoUploadCount];
    }
    if (self.hasVersion) {
        [output writeInt32:23 value:self.version];
    }
    if (self.hasPaperPostCount) {
        [output writeString:24 value:self.paperPostCount];
    }
    if (self.hasHolidayCount) {
        [output writeString:25 value:self.holidayCount];
    }
    if (self.hasCheckinCount) {
        [output writeString:26 value:self.checkinCount];
    }
    [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
    int32_t size_ = memoizedSerializedSize;
    if (size_ != -1) {
        return size_;
    }
    
    size_ = 0;
    if (self.hasFavCustomerCount) {
        size_ += computeStringSize(1, self.favCustomerCount);
    }
    if (self.hasFavProductCount) {
        size_ += computeStringSize(2, self.favProductCount);
    }
    if (self.hasFavPatrolTypeCount) {
        size_ += computeStringSize(3, self.favPatrolTypeCount);
    }
    if (self.hasMyCustomerCount) {
        size_ += computeStringSize(4, self.myCustomerCount);
    }
    if (self.hasNearByUserCount) {
        size_ += computeStringSize(5, self.nearByUserCount);
    }
    if (self.hasPatrolCount) {
        size_ += computeStringSize(6, self.patrolCount);
    }
    if (self.hasWorkLogCount) {
        size_ += computeStringSize(7, self.workLogCount);
    }
    if (self.hasAttendanceCount) {
        size_ += computeStringSize(8, self.attendanceCount);
    }
    if (self.hasOrderGoodsCount) {
        size_ += computeStringSize(9, self.orderGoodsCount);
    }
    if (self.hasStockCount) {
        size_ += computeStringSize(10, self.stockCount);
    }
    if (self.hasSaleGoodsCount) {
        size_ += computeStringSize(11, self.saleGoodsCount);
    }
    if (self.hasCompetitionGoodsCount) {
        size_ += computeStringSize(12, self.competitionGoodsCount);
    }
    if (self.hasMarketResearchCount) {
        size_ += computeStringSize(13, self.marketResearchCount);
    }
    if (self.hasBusinessOpportunityCount) {
        size_ += computeStringSize(14, self.businessOpportunityCount);
    }
    if (self.hasApplyItemCount) {
        size_ += computeStringSize(15, self.applyItemCount);
    }
    if (self.hasGiftPurchaseCount) {
        size_ += computeStringSize(16, self.giftPurchaseCount);
    }
    if (self.hasGiftDeliveryCount) {
        size_ += computeStringSize(17, self.giftDeliveryCount);
    }
    if (self.hasGiftDistributeCount) {
        size_ += computeStringSize(18, self.giftDistributeCount);
    }
    if (self.hasGiftStockCount) {
        size_ += computeStringSize(19, self.giftStockCount);
    }
    if (self.hasInspectionReportCount) {
        size_ += computeStringSize(20, self.inspectionReportCount);
    }
    if (self.hasTaskPatrolCount) {
        size_ += computeStringSize(21, self.taskPatrolCount);
    }
    if (self.hasVideoUploadCount) {
        size_ += computeStringSize(22, self.videoUploadCount);
    }
    if (self.hasVersion) {
        size_ += computeInt32Size(23, self.version);
    }
    if (self.hasPaperPostCount) {
        size_ += computeStringSize(24, self.paperPostCount);
    }
    if (self.hasHolidayCount) {
        size_ += computeStringSize(25, self.holidayCount);
    }
    if (self.hasCheckinCount) {
        size_ += computeStringSize(26, self.checkinCount);
    }
    size_ += self.unknownFields.serializedSize;
    memoizedSerializedSize = size_;
    return size_;
}
+ (CountData*) parseFromData:(NSData*) data {
    return (CountData*)[[[CountData builder] mergeFromData:data] build];
}
+ (CountData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountData*)[[[CountData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CountData*) parseFromInputStream:(NSInputStream*) input {
    return (CountData*)[[[CountData builder] mergeFromInputStream:input] build];
}
+ (CountData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountData*)[[[CountData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CountData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
    return (CountData*)[[[CountData builder] mergeFromCodedInputStream:input] build];
}
+ (CountData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    return (CountData*)[[[CountData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CountData_Builder*) builder {
    return [[[CountData_Builder alloc] init] autorelease];
}
+ (CountData_Builder*) builderWithPrototype:(CountData*) prototype {
    return [[CountData builder] mergeFrom:prototype];
}
- (CountData_Builder*) builder {
    return [CountData builder];
}
- (CountData_Builder*) toBuilder {
    return [CountData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
    if (self.hasFavCustomerCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"favCustomerCount", self.favCustomerCount];
    }
    if (self.hasFavProductCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"favProductCount", self.favProductCount];
    }
    if (self.hasFavPatrolTypeCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"favPatrolTypeCount", self.favPatrolTypeCount];
    }
    if (self.hasMyCustomerCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"myCustomerCount", self.myCustomerCount];
    }
    if (self.hasNearByUserCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"nearByUserCount", self.nearByUserCount];
    }
    if (self.hasPatrolCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"patrolCount", self.patrolCount];
    }
    if (self.hasWorkLogCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"workLogCount", self.workLogCount];
    }
    if (self.hasAttendanceCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"attendanceCount", self.attendanceCount];
    }
    if (self.hasOrderGoodsCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"orderGoodsCount", self.orderGoodsCount];
    }
    if (self.hasStockCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"stockCount", self.stockCount];
    }
    if (self.hasSaleGoodsCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"saleGoodsCount", self.saleGoodsCount];
    }
    if (self.hasCompetitionGoodsCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"competitionGoodsCount", self.competitionGoodsCount];
    }
    if (self.hasMarketResearchCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"marketResearchCount", self.marketResearchCount];
    }
    if (self.hasBusinessOpportunityCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"businessOpportunityCount", self.businessOpportunityCount];
    }
    if (self.hasApplyItemCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"applyItemCount", self.applyItemCount];
    }
    if (self.hasGiftPurchaseCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"giftPurchaseCount", self.giftPurchaseCount];
    }
    if (self.hasGiftDeliveryCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"giftDeliveryCount", self.giftDeliveryCount];
    }
    if (self.hasGiftDistributeCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"giftDistributeCount", self.giftDistributeCount];
    }
    if (self.hasGiftStockCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"giftStockCount", self.giftStockCount];
    }
    if (self.hasInspectionReportCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"inspectionReportCount", self.inspectionReportCount];
    }
    if (self.hasTaskPatrolCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"taskPatrolCount", self.taskPatrolCount];
    }
    if (self.hasVideoUploadCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"videoUploadCount", self.videoUploadCount];
    }
    if (self.hasVersion) {
        [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
    }
    if (self.hasPaperPostCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"paperPostCount", self.paperPostCount];
    }
    if (self.hasHolidayCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"holidayCount", self.holidayCount];
    }
    if (self.hasCheckinCount) {
        [output appendFormat:@"%@%@: %@\n", indent, @"checkinCount", self.checkinCount];
    }
    [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
    if (other == self) {
        return YES;
    }
    if (![other isKindOfClass:[CountData class]]) {
        return NO;
    }
    CountData *otherMessage = other;
    return
    self.hasFavCustomerCount == otherMessage.hasFavCustomerCount &&
    (!self.hasFavCustomerCount || [self.favCustomerCount isEqual:otherMessage.favCustomerCount]) &&
    self.hasFavProductCount == otherMessage.hasFavProductCount &&
    (!self.hasFavProductCount || [self.favProductCount isEqual:otherMessage.favProductCount]) &&
    self.hasFavPatrolTypeCount == otherMessage.hasFavPatrolTypeCount &&
    (!self.hasFavPatrolTypeCount || [self.favPatrolTypeCount isEqual:otherMessage.favPatrolTypeCount]) &&
    self.hasMyCustomerCount == otherMessage.hasMyCustomerCount &&
    (!self.hasMyCustomerCount || [self.myCustomerCount isEqual:otherMessage.myCustomerCount]) &&
    self.hasNearByUserCount == otherMessage.hasNearByUserCount &&
    (!self.hasNearByUserCount || [self.nearByUserCount isEqual:otherMessage.nearByUserCount]) &&
    self.hasPatrolCount == otherMessage.hasPatrolCount &&
    (!self.hasPatrolCount || [self.patrolCount isEqual:otherMessage.patrolCount]) &&
    self.hasWorkLogCount == otherMessage.hasWorkLogCount &&
    (!self.hasWorkLogCount || [self.workLogCount isEqual:otherMessage.workLogCount]) &&
    self.hasAttendanceCount == otherMessage.hasAttendanceCount &&
    (!self.hasAttendanceCount || [self.attendanceCount isEqual:otherMessage.attendanceCount]) &&
    self.hasOrderGoodsCount == otherMessage.hasOrderGoodsCount &&
    (!self.hasOrderGoodsCount || [self.orderGoodsCount isEqual:otherMessage.orderGoodsCount]) &&
    self.hasStockCount == otherMessage.hasStockCount &&
    (!self.hasStockCount || [self.stockCount isEqual:otherMessage.stockCount]) &&
    self.hasSaleGoodsCount == otherMessage.hasSaleGoodsCount &&
    (!self.hasSaleGoodsCount || [self.saleGoodsCount isEqual:otherMessage.saleGoodsCount]) &&
    self.hasCompetitionGoodsCount == otherMessage.hasCompetitionGoodsCount &&
    (!self.hasCompetitionGoodsCount || [self.competitionGoodsCount isEqual:otherMessage.competitionGoodsCount]) &&
    self.hasMarketResearchCount == otherMessage.hasMarketResearchCount &&
    (!self.hasMarketResearchCount || [self.marketResearchCount isEqual:otherMessage.marketResearchCount]) &&
    self.hasBusinessOpportunityCount == otherMessage.hasBusinessOpportunityCount &&
    (!self.hasBusinessOpportunityCount || [self.businessOpportunityCount isEqual:otherMessage.businessOpportunityCount]) &&
    self.hasApplyItemCount == otherMessage.hasApplyItemCount &&
    (!self.hasApplyItemCount || [self.applyItemCount isEqual:otherMessage.applyItemCount]) &&
    self.hasGiftPurchaseCount == otherMessage.hasGiftPurchaseCount &&
    (!self.hasGiftPurchaseCount || [self.giftPurchaseCount isEqual:otherMessage.giftPurchaseCount]) &&
    self.hasGiftDeliveryCount == otherMessage.hasGiftDeliveryCount &&
    (!self.hasGiftDeliveryCount || [self.giftDeliveryCount isEqual:otherMessage.giftDeliveryCount]) &&
    self.hasGiftDistributeCount == otherMessage.hasGiftDistributeCount &&
    (!self.hasGiftDistributeCount || [self.giftDistributeCount isEqual:otherMessage.giftDistributeCount]) &&
    self.hasGiftStockCount == otherMessage.hasGiftStockCount &&
    (!self.hasGiftStockCount || [self.giftStockCount isEqual:otherMessage.giftStockCount]) &&
    self.hasInspectionReportCount == otherMessage.hasInspectionReportCount &&
    (!self.hasInspectionReportCount || [self.inspectionReportCount isEqual:otherMessage.inspectionReportCount]) &&
    self.hasTaskPatrolCount == otherMessage.hasTaskPatrolCount &&
    (!self.hasTaskPatrolCount || [self.taskPatrolCount isEqual:otherMessage.taskPatrolCount]) &&
    self.hasVideoUploadCount == otherMessage.hasVideoUploadCount &&
    (!self.hasVideoUploadCount || [self.videoUploadCount isEqual:otherMessage.videoUploadCount]) &&
    self.hasVersion == otherMessage.hasVersion &&
    (!self.hasVersion || self.version == otherMessage.version) &&
    self.hasPaperPostCount == otherMessage.hasPaperPostCount &&
    (!self.hasPaperPostCount || [self.paperPostCount isEqual:otherMessage.paperPostCount]) &&
    self.hasHolidayCount == otherMessage.hasHolidayCount &&
    (!self.hasHolidayCount || [self.holidayCount isEqual:otherMessage.holidayCount]) &&
    self.hasCheckinCount == otherMessage.hasCheckinCount &&
    (!self.hasCheckinCount || [self.checkinCount isEqual:otherMessage.checkinCount]) &&
    (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
    NSUInteger hashCode = 7;
    if (self.hasFavCustomerCount) {
        hashCode = hashCode * 31 + [self.favCustomerCount hash];
    }
    if (self.hasFavProductCount) {
        hashCode = hashCode * 31 + [self.favProductCount hash];
    }
    if (self.hasFavPatrolTypeCount) {
        hashCode = hashCode * 31 + [self.favPatrolTypeCount hash];
    }
    if (self.hasMyCustomerCount) {
        hashCode = hashCode * 31 + [self.myCustomerCount hash];
    }
    if (self.hasNearByUserCount) {
        hashCode = hashCode * 31 + [self.nearByUserCount hash];
    }
    if (self.hasPatrolCount) {
        hashCode = hashCode * 31 + [self.patrolCount hash];
    }
    if (self.hasWorkLogCount) {
        hashCode = hashCode * 31 + [self.workLogCount hash];
    }
    if (self.hasAttendanceCount) {
        hashCode = hashCode * 31 + [self.attendanceCount hash];
    }
    if (self.hasOrderGoodsCount) {
        hashCode = hashCode * 31 + [self.orderGoodsCount hash];
    }
    if (self.hasStockCount) {
        hashCode = hashCode * 31 + [self.stockCount hash];
    }
    if (self.hasSaleGoodsCount) {
        hashCode = hashCode * 31 + [self.saleGoodsCount hash];
    }
    if (self.hasCompetitionGoodsCount) {
        hashCode = hashCode * 31 + [self.competitionGoodsCount hash];
    }
    if (self.hasMarketResearchCount) {
        hashCode = hashCode * 31 + [self.marketResearchCount hash];
    }
    if (self.hasBusinessOpportunityCount) {
        hashCode = hashCode * 31 + [self.businessOpportunityCount hash];
    }
    if (self.hasApplyItemCount) {
        hashCode = hashCode * 31 + [self.applyItemCount hash];
    }
    if (self.hasGiftPurchaseCount) {
        hashCode = hashCode * 31 + [self.giftPurchaseCount hash];
    }
    if (self.hasGiftDeliveryCount) {
        hashCode = hashCode * 31 + [self.giftDeliveryCount hash];
    }
    if (self.hasGiftDistributeCount) {
        hashCode = hashCode * 31 + [self.giftDistributeCount hash];
    }
    if (self.hasGiftStockCount) {
        hashCode = hashCode * 31 + [self.giftStockCount hash];
    }
    if (self.hasInspectionReportCount) {
        hashCode = hashCode * 31 + [self.inspectionReportCount hash];
    }
    if (self.hasTaskPatrolCount) {
        hashCode = hashCode * 31 + [self.taskPatrolCount hash];
    }
    if (self.hasVideoUploadCount) {
        hashCode = hashCode * 31 + [self.videoUploadCount hash];
    }
    if (self.hasVersion) {
        hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
    }
    if (self.hasPaperPostCount) {
        hashCode = hashCode * 31 + [self.paperPostCount hash];
    }
    if (self.hasHolidayCount) {
        hashCode = hashCode * 31 + [self.holidayCount hash];
    }
    if (self.hasCheckinCount) {
        hashCode = hashCode * 31 + [self.checkinCount hash];
    }
    hashCode = hashCode * 31 + [self.unknownFields hash];
    return hashCode;
}
@end

@interface CountData_Builder()
@property (retain) CountData* result;
@end

@implementation CountData_Builder
@synthesize result;
- (void) dealloc {
    self.result = nil;
    [super dealloc];
}
- (id) init {
    if ((self = [super init])) {
        self.result = [[[CountData alloc] init] autorelease];
    }
    return self;
}
- (PBGeneratedMessage*) internalGetResult {
    return result;
}
- (CountData_Builder*) clear {
    self.result = [[[CountData alloc] init] autorelease];
    return self;
}
- (CountData_Builder*) clone {
    return [CountData builderWithPrototype:result];
}
- (CountData*) defaultInstance {
    return [CountData defaultInstance];
}
- (CountData*) build {
    [self checkInitialized];
    return [self buildPartial];
}
- (CountData*) buildPartial {
    CountData* returnMe = [[result retain] autorelease];
    self.result = nil;
    return returnMe;
}
- (CountData_Builder*) mergeFrom:(CountData*) other {
    if (other == [CountData defaultInstance]) {
        return self;
    }
    if (other.hasFavCustomerCount) {
        [self setFavCustomerCount:other.favCustomerCount];
    }
    if (other.hasFavProductCount) {
        [self setFavProductCount:other.favProductCount];
    }
    if (other.hasFavPatrolTypeCount) {
        [self setFavPatrolTypeCount:other.favPatrolTypeCount];
    }
    if (other.hasMyCustomerCount) {
        [self setMyCustomerCount:other.myCustomerCount];
    }
    if (other.hasNearByUserCount) {
        [self setNearByUserCount:other.nearByUserCount];
    }
    if (other.hasPatrolCount) {
        [self setPatrolCount:other.patrolCount];
    }
    if (other.hasWorkLogCount) {
        [self setWorkLogCount:other.workLogCount];
    }
    if (other.hasAttendanceCount) {
        [self setAttendanceCount:other.attendanceCount];
    }
    if (other.hasOrderGoodsCount) {
        [self setOrderGoodsCount:other.orderGoodsCount];
    }
    if (other.hasStockCount) {
        [self setStockCount:other.stockCount];
    }
    if (other.hasSaleGoodsCount) {
        [self setSaleGoodsCount:other.saleGoodsCount];
    }
    if (other.hasCompetitionGoodsCount) {
        [self setCompetitionGoodsCount:other.competitionGoodsCount];
    }
    if (other.hasMarketResearchCount) {
        [self setMarketResearchCount:other.marketResearchCount];
    }
    if (other.hasBusinessOpportunityCount) {
        [self setBusinessOpportunityCount:other.businessOpportunityCount];
    }
    if (other.hasApplyItemCount) {
        [self setApplyItemCount:other.applyItemCount];
    }
    if (other.hasGiftPurchaseCount) {
        [self setGiftPurchaseCount:other.giftPurchaseCount];
    }
    if (other.hasGiftDeliveryCount) {
        [self setGiftDeliveryCount:other.giftDeliveryCount];
    }
    if (other.hasGiftDistributeCount) {
        [self setGiftDistributeCount:other.giftDistributeCount];
    }
    if (other.hasGiftStockCount) {
        [self setGiftStockCount:other.giftStockCount];
    }
    if (other.hasInspectionReportCount) {
        [self setInspectionReportCount:other.inspectionReportCount];
    }
    if (other.hasTaskPatrolCount) {
        [self setTaskPatrolCount:other.taskPatrolCount];
    }
    if (other.hasVideoUploadCount) {
        [self setVideoUploadCount:other.videoUploadCount];
    }
    if (other.hasPaperPostCount) {
        [self setPaperPostCount:other.paperPostCount];
    }
    if (other.hasHolidayCount) {
        [self setHolidayCount:other.holidayCount];
    }
    if (other.hasCheckinCount) {
        [self setCheckinCount:other.checkinCount];
    }
    if (other.hasVersion) {
        [self setVersion:other.version];
    }
    [self mergeUnknownFields:other.unknownFields];
    return self;
}
- (CountData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
    return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CountData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
    PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
    while (YES) {
        int32_t tag = [input readTag];
        switch (tag) {
            case 0:
                [self setUnknownFields:[unknownFields build]];
                return self;
            default: {
                if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
                    [self setUnknownFields:[unknownFields build]];
                    return self;
                }
                break;
            }
            case 10: {
                [self setFavCustomerCount:[input readString]];
                break;
            }
            case 18: {
                [self setFavProductCount:[input readString]];
                break;
            }
            case 26: {
                [self setFavPatrolTypeCount:[input readString]];
                break;
            }
            case 34: {
                [self setMyCustomerCount:[input readString]];
                break;
            }
            case 42: {
                [self setNearByUserCount:[input readString]];
                break;
            }
            case 50: {
                [self setPatrolCount:[input readString]];
                break;
            }
            case 58: {
                [self setWorkLogCount:[input readString]];
                break;
            }
            case 66: {
                [self setAttendanceCount:[input readString]];
                break;
            }
            case 74: {
                [self setOrderGoodsCount:[input readString]];
                break;
            }
            case 82: {
                [self setStockCount:[input readString]];
                break;
            }
            case 90: {
                [self setSaleGoodsCount:[input readString]];
                break;
            }
            case 98: {
                [self setCompetitionGoodsCount:[input readString]];
                break;
            }
            case 106: {
                [self setMarketResearchCount:[input readString]];
                break;
            }
            case 114: {
                [self setBusinessOpportunityCount:[input readString]];
                break;
            }
            case 122: {
                [self setApplyItemCount:[input readString]];
                break;
            }
            case 130: {
                [self setGiftPurchaseCount:[input readString]];
                break;
            }
            case 138: {
                [self setGiftDeliveryCount:[input readString]];
                break;
            }
            case 146: {
                [self setGiftDistributeCount:[input readString]];
                break;
            }
            case 154: {
                [self setGiftStockCount:[input readString]];
                break;
            }
            case 162: {
                [self setInspectionReportCount:[input readString]];
                break;
            }
            case 170: {
                [self setTaskPatrolCount:[input readString]];
                break;
            }
            case 178: {
                [self setVideoUploadCount:[input readString]];
                break;
            }
            case 184: {
                [self setVersion:[input readInt32]];
                break;
            }
            case 194: {
                [self setPaperPostCount:[input readString]];
                break;
            }
            case 202: {
                [self setHolidayCount:[input readString]];
                break;
            }
            case 210: {
                [self setCheckinCount:[input readString]];
                break;
            }
        }
    }
}
- (BOOL) hasFavCustomerCount {
    return result.hasFavCustomerCount;
}
- (NSString*) favCustomerCount {
    return result.favCustomerCount;
}
- (CountData_Builder*) setFavCustomerCount:(NSString*) value {
    result.hasFavCustomerCount = YES;
    result.favCustomerCount = value;
    return self;
}
- (CountData_Builder*) clearFavCustomerCount {
    result.hasFavCustomerCount = NO;
    result.favCustomerCount = @"";
    return self;
}
- (BOOL) hasFavProductCount {
    return result.hasFavProductCount;
}
- (NSString*) favProductCount {
    return result.favProductCount;
}
- (CountData_Builder*) setFavProductCount:(NSString*) value {
    result.hasFavProductCount = YES;
    result.favProductCount = value;
    return self;
}
- (CountData_Builder*) clearFavProductCount {
    result.hasFavProductCount = NO;
    result.favProductCount = @"";
    return self;
}
- (BOOL) hasFavPatrolTypeCount {
    return result.hasFavPatrolTypeCount;
}
- (NSString*) favPatrolTypeCount {
    return result.favPatrolTypeCount;
}
- (CountData_Builder*) setFavPatrolTypeCount:(NSString*) value {
    result.hasFavPatrolTypeCount = YES;
    result.favPatrolTypeCount = value;
    return self;
}
- (CountData_Builder*) clearFavPatrolTypeCount {
    result.hasFavPatrolTypeCount = NO;
    result.favPatrolTypeCount = @"";
    return self;
}
- (BOOL) hasMyCustomerCount {
    return result.hasMyCustomerCount;
}
- (NSString*) myCustomerCount {
    return result.myCustomerCount;
}
- (CountData_Builder*) setMyCustomerCount:(NSString*) value {
    result.hasMyCustomerCount = YES;
    result.myCustomerCount = value;
    return self;
}
- (CountData_Builder*) clearMyCustomerCount {
    result.hasMyCustomerCount = NO;
    result.myCustomerCount = @"";
    return self;
}
- (BOOL) hasNearByUserCount {
    return result.hasNearByUserCount;
}
- (NSString*) nearByUserCount {
    return result.nearByUserCount;
}
- (CountData_Builder*) setNearByUserCount:(NSString*) value {
    result.hasNearByUserCount = YES;
    result.nearByUserCount = value;
    return self;
}
- (CountData_Builder*) clearNearByUserCount {
    result.hasNearByUserCount = NO;
    result.nearByUserCount = @"";
    return self;
}
- (BOOL) hasPatrolCount {
    return result.hasPatrolCount;
}
- (NSString*) patrolCount {
    return result.patrolCount;
}
- (CountData_Builder*) setPatrolCount:(NSString*) value {
    result.hasPatrolCount = YES;
    result.patrolCount = value;
    return self;
}
- (CountData_Builder*) clearPatrolCount {
    result.hasPatrolCount = NO;
    result.patrolCount = @"";
    return self;
}
- (BOOL) hasWorkLogCount {
    return result.hasWorkLogCount;
}
- (NSString*) workLogCount {
    return result.workLogCount;
}
- (CountData_Builder*) setWorkLogCount:(NSString*) value {
    result.hasWorkLogCount = YES;
    result.workLogCount = value;
    return self;
}
- (CountData_Builder*) clearWorkLogCount {
    result.hasWorkLogCount = NO;
    result.workLogCount = @"";
    return self;
}
- (BOOL) hasAttendanceCount {
    return result.hasAttendanceCount;
}
- (NSString*) attendanceCount {
    return result.attendanceCount;
}
- (CountData_Builder*) setAttendanceCount:(NSString*) value {
    result.hasAttendanceCount = YES;
    result.attendanceCount = value;
    return self;
}
- (CountData_Builder*) clearAttendanceCount {
    result.hasAttendanceCount = NO;
    result.attendanceCount = @"";
    return self;
}
- (BOOL) hasOrderGoodsCount {
    return result.hasOrderGoodsCount;
}
- (NSString*) orderGoodsCount {
    return result.orderGoodsCount;
}
- (CountData_Builder*) setOrderGoodsCount:(NSString*) value {
    result.hasOrderGoodsCount = YES;
    result.orderGoodsCount = value;
    return self;
}
- (CountData_Builder*) clearOrderGoodsCount {
    result.hasOrderGoodsCount = NO;
    result.orderGoodsCount = @"";
    return self;
}
- (BOOL) hasStockCount {
    return result.hasStockCount;
}
- (NSString*) stockCount {
    return result.stockCount;
}
- (CountData_Builder*) setStockCount:(NSString*) value {
    result.hasStockCount = YES;
    result.stockCount = value;
    return self;
}
- (CountData_Builder*) clearStockCount {
    result.hasStockCount = NO;
    result.stockCount = @"";
    return self;
}
- (BOOL) hasSaleGoodsCount {
    return result.hasSaleGoodsCount;
}
- (NSString*) saleGoodsCount {
    return result.saleGoodsCount;
}
- (CountData_Builder*) setSaleGoodsCount:(NSString*) value {
    result.hasSaleGoodsCount = YES;
    result.saleGoodsCount = value;
    return self;
}
- (CountData_Builder*) clearSaleGoodsCount {
    result.hasSaleGoodsCount = NO;
    result.saleGoodsCount = @"";
    return self;
}
- (BOOL) hasCompetitionGoodsCount {
    return result.hasCompetitionGoodsCount;
}
- (NSString*) competitionGoodsCount {
    return result.competitionGoodsCount;
}
- (CountData_Builder*) setCompetitionGoodsCount:(NSString*) value {
    result.hasCompetitionGoodsCount = YES;
    result.competitionGoodsCount = value;
    return self;
}
- (CountData_Builder*) clearCompetitionGoodsCount {
    result.hasCompetitionGoodsCount = NO;
    result.competitionGoodsCount = @"";
    return self;
}
- (BOOL) hasMarketResearchCount {
    return result.hasMarketResearchCount;
}
- (NSString*) marketResearchCount {
    return result.marketResearchCount;
}
- (CountData_Builder*) setMarketResearchCount:(NSString*) value {
    result.hasMarketResearchCount = YES;
    result.marketResearchCount = value;
    return self;
}
- (CountData_Builder*) clearMarketResearchCount {
    result.hasMarketResearchCount = NO;
    result.marketResearchCount = @"";
    return self;
}
- (BOOL) hasBusinessOpportunityCount {
    return result.hasBusinessOpportunityCount;
}
- (NSString*) businessOpportunityCount {
    return result.businessOpportunityCount;
}
- (CountData_Builder*) setBusinessOpportunityCount:(NSString*) value {
    result.hasBusinessOpportunityCount = YES;
    result.businessOpportunityCount = value;
    return self;
}
- (CountData_Builder*) clearBusinessOpportunityCount {
    result.hasBusinessOpportunityCount = NO;
    result.businessOpportunityCount = @"";
    return self;
}
- (BOOL) hasApplyItemCount {
    return result.hasApplyItemCount;
}
- (NSString*) applyItemCount {
    return result.applyItemCount;
}
- (CountData_Builder*) setApplyItemCount:(NSString*) value {
    result.hasApplyItemCount = YES;
    result.applyItemCount = value;
    return self;
}
- (CountData_Builder*) clearApplyItemCount {
    result.hasApplyItemCount = NO;
    result.applyItemCount = @"";
    return self;
}
- (BOOL) hasGiftPurchaseCount {
    return result.hasGiftPurchaseCount;
}
- (NSString*) giftPurchaseCount {
    return result.giftPurchaseCount;
}
- (CountData_Builder*) setGiftPurchaseCount:(NSString*) value {
    result.hasGiftPurchaseCount = YES;
    result.giftPurchaseCount = value;
    return self;
}
- (CountData_Builder*) clearGiftPurchaseCount {
    result.hasGiftPurchaseCount = NO;
    result.giftPurchaseCount = @"";
    return self;
}
- (BOOL) hasGiftDeliveryCount {
    return result.hasGiftDeliveryCount;
}
- (NSString*) giftDeliveryCount {
    return result.giftDeliveryCount;
}
- (CountData_Builder*) setGiftDeliveryCount:(NSString*) value {
    result.hasGiftDeliveryCount = YES;
    result.giftDeliveryCount = value;
    return self;
}
- (CountData_Builder*) clearGiftDeliveryCount {
    result.hasGiftDeliveryCount = NO;
    result.giftDeliveryCount = @"";
    return self;
}
- (BOOL) hasGiftDistributeCount {
    return result.hasGiftDistributeCount;
}
- (NSString*) giftDistributeCount {
    return result.giftDistributeCount;
}
- (CountData_Builder*) setGiftDistributeCount:(NSString*) value {
    result.hasGiftDistributeCount = YES;
    result.giftDistributeCount = value;
    return self;
}
- (CountData_Builder*) clearGiftDistributeCount {
    result.hasGiftDistributeCount = NO;
    result.giftDistributeCount = @"";
    return self;
}
- (BOOL) hasGiftStockCount {
    return result.hasGiftStockCount;
}
- (NSString*) giftStockCount {
    return result.giftStockCount;
}
- (CountData_Builder*) setGiftStockCount:(NSString*) value {
    result.hasGiftStockCount = YES;
    result.giftStockCount = value;
    return self;
}
- (CountData_Builder*) clearGiftStockCount {
    result.hasGiftStockCount = NO;
    result.giftStockCount = @"";
    return self;
}
- (BOOL) hasInspectionReportCount {
    return result.hasInspectionReportCount;
}
- (NSString*) inspectionReportCount {
    return result.inspectionReportCount;
}
- (CountData_Builder*) setInspectionReportCount:(NSString*) value {
    result.hasInspectionReportCount = YES;
    result.inspectionReportCount = value;
    return self;
}
- (CountData_Builder*) clearInspectionReportCount {
    result.hasInspectionReportCount = NO;
    result.inspectionReportCount = @"";
    return self;
}
- (BOOL) hasTaskPatrolCount {
    return result.hasTaskPatrolCount;
}
- (NSString*) taskPatrolCount {
    return result.taskPatrolCount;
}
- (CountData_Builder*) setTaskPatrolCount:(NSString*) value {
    result.hasTaskPatrolCount = YES;
    result.taskPatrolCount = value;
    return self;
}
- (CountData_Builder*) clearTaskPatrolCount {
    result.hasTaskPatrolCount = NO;
    result.taskPatrolCount = @"";
    return self;
}
- (BOOL) hasVideoUploadCount {
    return result.hasVideoUploadCount;
}
- (NSString*) videoUploadCount {
    return result.videoUploadCount;
}
- (CountData_Builder*) setVideoUploadCount:(NSString*) value {
    result.hasVideoUploadCount = YES;
    result.videoUploadCount = value;
    return self;
}
- (CountData_Builder*) clearVideoUploadCount {
    result.hasVideoUploadCount = NO;
    result.videoUploadCount = @"";
    return self;
}
- (BOOL) hasPaperPostCount {
    return result.hasPaperPostCount;
}
- (NSString*) paperPostCount {
    return result.paperPostCount;
}
- (CountData_Builder*) setPaperPostCount:(NSString*) value {
    result.hasPaperPostCount = YES;
    result.paperPostCount = value;
    return self;
}
- (CountData_Builder*) clearPaperPostCount {
    result.hasPaperPostCount = NO;
    result.paperPostCount = @"";
    return self;
}
- (BOOL) hasHolidayCount {
    return result.hasHolidayCount;
}
- (NSString*) holidayCount {
    return result.holidayCount;
}
- (CountData_Builder*) setHolidayCount:(NSString*) value {
    result.hasHolidayCount = YES;
    result.holidayCount = value;
    return self;
}
- (CountData_Builder*) clearHolidayCount {
    result.hasHolidayCount = NO;
    result.holidayCount = @"";
    return self;
}
- (BOOL) hasCheckinCount {
    return result.hasCheckinCount;
}
- (NSString*) checkinCount {
    return result.checkinCount;
}
- (CountData_Builder*) setCheckinCount:(NSString*) value {
    result.hasCheckinCount = YES;
    result.checkinCount = value;
    return self;
}
- (CountData_Builder*) clearCheckinCount {
    result.hasCheckinCount = NO;
    result.checkinCount = @"";
    return self;
}
- (BOOL) hasVersion {
    return result.hasVersion;
}
- (int32_t) version {
    return result.version;
}
- (CountData_Builder*) setVersion:(int32_t) value {
    result.hasVersion = YES;
    result.version = value;
    return self;
}
- (CountData_Builder*) clearVersion {
    result.hasVersion = NO;
    result.version = 1;
    return self;
}
@end

