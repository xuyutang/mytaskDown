// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"

@implementation UserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GenericRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface User ()
@property int32_t id;
@property (retain) NSString* userName;
@property (retain) NSString* password;
@property (retain) NSString* email;
@property (retain) NSString* realName;
@property (retain) NSString* gender;
@property (retain) NS_RETURNS_NOT_RETAINED NSString* newPwd;
@property (retain) PBAppendableArray * avatarFileArray;
@property (retain) PBAppendableArray * avatarsArray;
@property (retain) NSString* entryTime;
@property (retain) Position* position;
@property (retain) Department* department;
@property (retain) Company* company;
@property (retain) NSString* spell;
@property (retain) NSString* expired;
@property (retain) Location* location;
@property (retain) NSString* roleType;
@property (retain) Device* device;
@property (retain) NSString* countData;
@property (retain) PBAppendableArray * devicesArray;
@property (retain) Permission* permission;
@property (retain) NSString* expiredMessage;
@end

@implementation User

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) value_ {
  hasUserName_ = !!value_;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value_ {
  hasEmail_ = !!value_;
}
@synthesize email;
- (BOOL) hasRealName {
  return !!hasRealName_;
}
- (void) setHasRealName:(BOOL) value_ {
  hasRealName_ = !!value_;
}
@synthesize realName;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value_ {
  hasGender_ = !!value_;
}
@synthesize gender;
- (BOOL) hasNewPwd {
  return !!hasNewPwd_;
}
- (void) setHasNewPwd:(BOOL) value_ {
  hasNewPwd_ = !!value_;
}
@synthesize newPwd;
@synthesize avatarFileArray;
@dynamic avatarFile;
@synthesize avatarsArray;
@dynamic avatars;
- (BOOL) hasEntryTime {
  return !!hasEntryTime_;
}
- (void) setHasEntryTime:(BOOL) value_ {
  hasEntryTime_ = !!value_;
}
@synthesize entryTime;
- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) value_ {
  hasPosition_ = !!value_;
}
@synthesize position;
- (BOOL) hasDepartment {
  return !!hasDepartment_;
}
- (void) setHasDepartment:(BOOL) value_ {
  hasDepartment_ = !!value_;
}
@synthesize department;
- (BOOL) hasCompany {
  return !!hasCompany_;
}
- (void) setHasCompany:(BOOL) value_ {
  hasCompany_ = !!value_;
}
@synthesize company;
- (BOOL) hasSpell {
  return !!hasSpell_;
}
- (void) setHasSpell:(BOOL) value_ {
  hasSpell_ = !!value_;
}
@synthesize spell;
- (BOOL) hasExpired {
  return !!hasExpired_;
}
- (void) setHasExpired:(BOOL) value_ {
  hasExpired_ = !!value_;
}
@synthesize expired;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (BOOL) hasRoleType {
  return !!hasRoleType_;
}
- (void) setHasRoleType:(BOOL) value_ {
  hasRoleType_ = !!value_;
}
@synthesize roleType;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) value_ {
  hasDevice_ = !!value_;
}
@synthesize device;
- (BOOL) hasCountData {
  return !!hasCountData_;
}
- (void) setHasCountData:(BOOL) value_ {
  hasCountData_ = !!value_;
}
@synthesize countData;
@synthesize devicesArray;
@dynamic devices;
- (BOOL) hasPermission {
  return !!hasPermission_;
}
- (void) setHasPermission:(BOOL) value_ {
  hasPermission_ = !!value_;
}
@synthesize permission;
- (BOOL) hasExpiredMessage {
  return !!hasExpiredMessage_;
}
- (void) setHasExpiredMessage:(BOOL) value_ {
  hasExpiredMessage_ = !!value_;
}
@synthesize expiredMessage;
- (void) dealloc {
  self.userName = nil;
  self.password = nil;
  self.email = nil;
  self.realName = nil;
  self.gender = nil;
  self.newPwd = nil;
  self.avatarFileArray = nil;
  self.avatarsArray = nil;
  self.entryTime = nil;
  self.position = nil;
  self.department = nil;
  self.company = nil;
  self.spell = nil;
  self.expired = nil;
  self.location = nil;
  self.roleType = nil;
  self.device = nil;
  self.countData = nil;
  self.devicesArray = nil;
  self.permission = nil;
  self.expiredMessage = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.userName = @"";
    self.password = @"";
    self.email = @"";
    self.realName = @"";
    self.gender = @"";
    self.newPwd = @"";
    self.entryTime = @"";
    self.position = [Position defaultInstance];
    self.department = [Department defaultInstance];
    self.company = [Company defaultInstance];
    self.spell = @"";
    self.expired = @"";
    self.location = [Location defaultInstance];
    self.roleType = @"";
    self.device = [Device defaultInstance];
    self.countData = @"";
    self.permission = [Permission defaultInstance];
    self.expiredMessage = @"";
  }
  return self;
}
static User* defaultUserInstance = nil;
+ (void) initialize {
  if (self == [User class]) {
    defaultUserInstance = [[User alloc] init];
  }
}
+ (User*) defaultInstance {
  return defaultUserInstance;
}
- (User*) defaultInstance {
  return defaultUserInstance;
}
- (PBArray *)avatarFile {
  return avatarFileArray;
}
- (NSData*)avatarFileAtIndex:(NSUInteger)index {
  return [avatarFileArray objectAtIndex:index];
}
- (PBArray *)avatars {
  return avatarsArray;
}
- (NSString*)avatarsAtIndex:(NSUInteger)index {
  return [avatarsArray objectAtIndex:index];
}
- (PBArray *)devices {
  return devicesArray;
}
- (Device*)devicesAtIndex:(NSUInteger)index {
  return [devicesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (self.hasPosition) {
    if (!self.position.isInitialized) {
      return NO;
    }
  }
  if (self.hasDepartment) {
    if (!self.department.isInitialized) {
      return NO;
    }
  }
  if (self.hasCompany) {
    if (!self.company.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:3 value:self.password];
  }
  if (self.hasEmail) {
    [output writeString:4 value:self.email];
  }
  if (self.hasRealName) {
    [output writeString:5 value:self.realName];
  }
  if (self.hasGender) {
    [output writeString:6 value:self.gender];
  }
  if (self.hasNewPwd) {
    [output writeString:7 value:self.newPwd];
  }
  const NSUInteger avatarFileArrayCount = self.avatarFileArray.count;
  if (avatarFileArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.avatarFileArray.data;
    for (NSUInteger i = 0; i < avatarFileArrayCount; ++i) {
      [output writeData:8 value:values[i]];
    }
  }
  const NSUInteger avatarsArrayCount = self.avatarsArray.count;
  if (avatarsArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.avatarsArray.data;
    for (NSUInteger i = 0; i < avatarsArrayCount; ++i) {
      [output writeString:9 value:values[i]];
    }
  }
  if (self.hasEntryTime) {
    [output writeString:10 value:self.entryTime];
  }
  if (self.hasPosition) {
    [output writeMessage:11 value:self.position];
  }
  if (self.hasDepartment) {
    [output writeMessage:12 value:self.department];
  }
  if (self.hasCompany) {
    [output writeMessage:13 value:self.company];
  }
  if (self.hasSpell) {
    [output writeString:14 value:self.spell];
  }
  if (self.hasExpired) {
    [output writeString:15 value:self.expired];
  }
  if (self.hasLocation) {
    [output writeMessage:16 value:self.location];
  }
  if (self.hasRoleType) {
    [output writeString:17 value:self.roleType];
  }
  if (self.hasDevice) {
    [output writeMessage:18 value:self.device];
  }
  if (self.hasCountData) {
    [output writeString:19 value:self.countData];
  }
  for (Device *element in self.devicesArray) {
    [output writeMessage:20 value:element];
  }
  if (self.hasPermission) {
    [output writeMessage:21 value:self.permission];
  }
  if (self.hasExpiredMessage) {
    [output writeString:22 value:self.expiredMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(2, self.userName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(3, self.password);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(4, self.email);
  }
  if (self.hasRealName) {
    size_ += computeStringSize(5, self.realName);
  }
  if (self.hasGender) {
    size_ += computeStringSize(6, self.gender);
  }
  if (self.hasNewPwd) {
    size_ += computeStringSize(7, self.newPwd);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.avatarFileArray.count;
    const NSData* *values = (const NSData* *)self.avatarFileArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.avatarsArray.count;
    const NSString* *values = (const NSString* *)self.avatarsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  if (self.hasEntryTime) {
    size_ += computeStringSize(10, self.entryTime);
  }
  if (self.hasPosition) {
    size_ += computeMessageSize(11, self.position);
  }
  if (self.hasDepartment) {
    size_ += computeMessageSize(12, self.department);
  }
  if (self.hasCompany) {
    size_ += computeMessageSize(13, self.company);
  }
  if (self.hasSpell) {
    size_ += computeStringSize(14, self.spell);
  }
  if (self.hasExpired) {
    size_ += computeStringSize(15, self.expired);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(16, self.location);
  }
  if (self.hasRoleType) {
    size_ += computeStringSize(17, self.roleType);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(18, self.device);
  }
  if (self.hasCountData) {
    size_ += computeStringSize(19, self.countData);
  }
  for (Device *element in self.devicesArray) {
    size_ += computeMessageSize(20, element);
  }
  if (self.hasPermission) {
    size_ += computeMessageSize(21, self.permission);
  }
  if (self.hasExpiredMessage) {
    size_ += computeStringSize(22, self.expiredMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (User*) parseFromData:(NSData*) data {
  return (User*)[[[User builder] mergeFromData:data] build];
}
+ (User*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input {
  return (User*)[[[User builder] mergeFromInputStream:input] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (User*)[[[User builder] mergeFromCodedInputStream:input] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User_Builder*) builder {
  return [[[User_Builder alloc] init] autorelease];
}
+ (User_Builder*) builderWithPrototype:(User*) prototype {
  return [[User builder] mergeFrom:prototype];
}
- (User_Builder*) builder {
  return [User builder];
}
- (User_Builder*) toBuilder {
  return [User builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasRealName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realName", self.realName];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", self.gender];
  }
  if (self.hasNewPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newPwd", self.newPwd];
  }
  for (NSData* element in self.avatarFileArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarFile", element];
  }
  for (NSString* element in self.avatarsArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatars", element];
  }
  if (self.hasEntryTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"entryTime", self.entryTime];
  }
  if (self.hasPosition) {
    [output appendFormat:@"%@%@ {\n", indent, @"position"];
    [self.position writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDepartment) {
    [output appendFormat:@"%@%@ {\n", indent, @"department"];
    [self.department writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCompany) {
    [output appendFormat:@"%@%@ {\n", indent, @"company"];
    [self.company writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSpell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spell", self.spell];
  }
  if (self.hasExpired) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expired", self.expired];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roleType", self.roleType];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCountData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"countData", self.countData];
  }
  for (Device* element in self.devicesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"devices"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPermission) {
    [output appendFormat:@"%@%@ {\n", indent, @"permission"];
    [self.permission writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasExpiredMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expiredMessage", self.expiredMessage];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[User class]]) {
    return NO;
  }
  User *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasRealName == otherMessage.hasRealName &&
      (!self.hasRealName || [self.realName isEqual:otherMessage.realName]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || [self.gender isEqual:otherMessage.gender]) &&
      self.hasNewPwd == otherMessage.hasNewPwd &&
      (!self.hasNewPwd || [self.newPwd isEqual:otherMessage.newPwd]) &&
      [self.avatarFileArray isEqualToArray:otherMessage.avatarFileArray] &&
      [self.avatarsArray isEqualToArray:otherMessage.avatarsArray] &&
      self.hasEntryTime == otherMessage.hasEntryTime &&
      (!self.hasEntryTime || [self.entryTime isEqual:otherMessage.entryTime]) &&
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || [self.position isEqual:otherMessage.position]) &&
      self.hasDepartment == otherMessage.hasDepartment &&
      (!self.hasDepartment || [self.department isEqual:otherMessage.department]) &&
      self.hasCompany == otherMessage.hasCompany &&
      (!self.hasCompany || [self.company isEqual:otherMessage.company]) &&
      self.hasSpell == otherMessage.hasSpell &&
      (!self.hasSpell || [self.spell isEqual:otherMessage.spell]) &&
      self.hasExpired == otherMessage.hasExpired &&
      (!self.hasExpired || [self.expired isEqual:otherMessage.expired]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasRoleType == otherMessage.hasRoleType &&
      (!self.hasRoleType || [self.roleType isEqual:otherMessage.roleType]) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasCountData == otherMessage.hasCountData &&
      (!self.hasCountData || [self.countData isEqual:otherMessage.countData]) &&
      [self.devicesArray isEqualToArray:otherMessage.devicesArray] &&
      self.hasPermission == otherMessage.hasPermission &&
      (!self.hasPermission || [self.permission isEqual:otherMessage.permission]) &&
      self.hasExpiredMessage == otherMessage.hasExpiredMessage &&
      (!self.hasExpiredMessage || [self.expiredMessage isEqual:otherMessage.expiredMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasRealName) {
    hashCode = hashCode * 31 + [self.realName hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [self.gender hash];
  }
  if (self.hasNewPwd) {
    hashCode = hashCode * 31 + [self.newPwd hash];
  }
  for (NSData* element in self.avatarFileArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.avatarsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasEntryTime) {
    hashCode = hashCode * 31 + [self.entryTime hash];
  }
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [self.position hash];
  }
  if (self.hasDepartment) {
    hashCode = hashCode * 31 + [self.department hash];
  }
  if (self.hasCompany) {
    hashCode = hashCode * 31 + [self.company hash];
  }
  if (self.hasSpell) {
    hashCode = hashCode * 31 + [self.spell hash];
  }
  if (self.hasExpired) {
    hashCode = hashCode * 31 + [self.expired hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasRoleType) {
    hashCode = hashCode * 31 + [self.roleType hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasCountData) {
    hashCode = hashCode * 31 + [self.countData hash];
  }
  for (Device* element in self.devicesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasPermission) {
    hashCode = hashCode * 31 + [self.permission hash];
  }
  if (self.hasExpiredMessage) {
    hashCode = hashCode * 31 + [self.expiredMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface User_Builder()
@property (retain) User* result;
@end

@implementation User_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[User alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (User_Builder*) clear {
  self.result = [[[User alloc] init] autorelease];
  return self;
}
- (User_Builder*) clone {
  return [User builderWithPrototype:result];
}
- (User*) defaultInstance {
  return [User defaultInstance];
}
- (User*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (User*) buildPartial {
  User* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (User_Builder*) mergeFrom:(User*) other {
  if (other == [User defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasRealName) {
    [self setRealName:other.realName];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasNewPwd) {
    [self setNewPwd:other.newPwd];
  }
  if (other.avatarFileArray.count > 0) {
    if (result.avatarFileArray == nil) {
      result.avatarFileArray = [[other.avatarFileArray copyWithZone:[other.avatarFileArray zone]] autorelease];
    } else {
      [result.avatarFileArray appendArray:other.avatarFileArray];
    }
  }
  if (other.avatarsArray.count > 0) {
    if (result.avatarsArray == nil) {
      result.avatarsArray = [[other.avatarsArray copyWithZone:[other.avatarsArray zone]] autorelease];
    } else {
      [result.avatarsArray appendArray:other.avatarsArray];
    }
  }
  if (other.hasEntryTime) {
    [self setEntryTime:other.entryTime];
  }
  if (other.hasPosition) {
    [self mergePosition:other.position];
  }
  if (other.hasDepartment) {
    [self mergeDepartment:other.department];
  }
  if (other.hasCompany) {
    [self mergeCompany:other.company];
  }
  if (other.hasSpell) {
    [self setSpell:other.spell];
  }
  if (other.hasExpired) {
    [self setExpired:other.expired];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.hasRoleType) {
    [self setRoleType:other.roleType];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasCountData) {
    [self setCountData:other.countData];
  }
  if (other.devicesArray.count > 0) {
    if (result.devicesArray == nil) {
      result.devicesArray = [[other.devicesArray copyWithZone:[other.devicesArray zone]] autorelease];
    } else {
      [result.devicesArray appendArray:other.devicesArray];
    }
  }
  if (other.hasPermission) {
    [self mergePermission:other.permission];
  }
  if (other.hasExpiredMessage) {
    [self setExpiredMessage:other.expiredMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setPassword:[input readString]];
        break;
      }
      case 34: {
        [self setEmail:[input readString]];
        break;
      }
      case 42: {
        [self setRealName:[input readString]];
        break;
      }
      case 50: {
        [self setGender:[input readString]];
        break;
      }
      case 58: {
        [self setNewPwd:[input readString]];
        break;
      }
      case 66: {
        [self addAvatarFile:[input readData]];
        break;
      }
      case 74: {
        [self addAvatars:[input readString]];
        break;
      }
      case 82: {
        [self setEntryTime:[input readString]];
        break;
      }
      case 90: {
        Position_Builder* subBuilder = [Position builder];
        if (self.hasPosition) {
          [subBuilder mergeFrom:self.position];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPosition:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        Department_Builder* subBuilder = [Department builder];
        if (self.hasDepartment) {
          [subBuilder mergeFrom:self.department];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDepartment:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        Company_Builder* subBuilder = [Company builder];
        if (self.hasCompany) {
          [subBuilder mergeFrom:self.company];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCompany:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        [self setSpell:[input readString]];
        break;
      }
      case 122: {
        [self setExpired:[input readString]];
        break;
      }
      case 130: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        [self setRoleType:[input readString]];
        break;
      }
      case 146: {
        Device_Builder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        [self setCountData:[input readString]];
        break;
      }
      case 162: {
        Device_Builder* subBuilder = [Device builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDevices:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        Permission_Builder* subBuilder = [Permission builder];
        if (self.hasPermission) {
          [subBuilder mergeFrom:self.permission];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPermission:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        [self setExpiredMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (User_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (User_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasUserName {
  return result.hasUserName;
}
- (NSString*) userName {
  return result.userName;
}
- (User_Builder*) setUserName:(NSString*) value {
  result.hasUserName = YES;
  result.userName = value;
  return self;
}
- (User_Builder*) clearUserName {
  result.hasUserName = NO;
  result.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (User_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (User_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (User_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (User_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasRealName {
  return result.hasRealName;
}
- (NSString*) realName {
  return result.realName;
}
- (User_Builder*) setRealName:(NSString*) value {
  result.hasRealName = YES;
  result.realName = value;
  return self;
}
- (User_Builder*) clearRealName {
  result.hasRealName = NO;
  result.realName = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (NSString*) gender {
  return result.gender;
}
- (User_Builder*) setGender:(NSString*) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (User_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = @"";
  return self;
}
- (BOOL) hasNewPwd {
  return result.hasNewPwd;
}
- (NSString*) newPwd {
  return result.newPwd;
}
- (User_Builder*) setNewPwd:(NSString*) value {
  result.hasNewPwd = YES;
  result.newPwd = value;
  return self;
}
- (User_Builder*) clearNewPwd {
  result.hasNewPwd = NO;
  result.newPwd = @"";
  return self;
}
- (PBAppendableArray *)avatarFile {
  return result.avatarFileArray;
}
- (NSData*)avatarFileAtIndex:(NSUInteger)index {
  return [result avatarFileAtIndex:index];
}
- (User_Builder *)addAvatarFile:(NSData*)value {
  if (result.avatarFileArray == nil) {
    result.avatarFileArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.avatarFileArray addObject:value];
  return self;
}
- (User_Builder *)setAvatarFileArray:(NSArray *)array {
  result.avatarFileArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)setAvatarFileValues:(const NSData* *)values count:(NSUInteger)count {
  result.avatarFileArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)clearAvatarFile {
  result.avatarFileArray = nil;
  return self;
}
- (PBAppendableArray *)avatars {
  return result.avatarsArray;
}
- (NSString*)avatarsAtIndex:(NSUInteger)index {
  return [result avatarsAtIndex:index];
}
- (User_Builder *)addAvatars:(NSString*)value {
  if (result.avatarsArray == nil) {
    result.avatarsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.avatarsArray addObject:value];
  return self;
}
- (User_Builder *)setAvatarsArray:(NSArray *)array {
  result.avatarsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)setAvatarsValues:(const NSString* *)values count:(NSUInteger)count {
  result.avatarsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)clearAvatars {
  result.avatarsArray = nil;
  return self;
}
- (BOOL) hasEntryTime {
  return result.hasEntryTime;
}
- (NSString*) entryTime {
  return result.entryTime;
}
- (User_Builder*) setEntryTime:(NSString*) value {
  result.hasEntryTime = YES;
  result.entryTime = value;
  return self;
}
- (User_Builder*) clearEntryTime {
  result.hasEntryTime = NO;
  result.entryTime = @"";
  return self;
}
- (BOOL) hasPosition {
  return result.hasPosition;
}
- (Position*) position {
  return result.position;
}
- (User_Builder*) setPosition:(Position*) value {
  result.hasPosition = YES;
  result.position = value;
  return self;
}
- (User_Builder*) setPositionBuilder:(Position_Builder*) builderForValue {
  return [self setPosition:[builderForValue build]];
}
- (User_Builder*) mergePosition:(Position*) value {
  if (result.hasPosition &&
      result.position != [Position defaultInstance]) {
    result.position =
      [[[Position builderWithPrototype:result.position] mergeFrom:value] buildPartial];
  } else {
    result.position = value;
  }
  result.hasPosition = YES;
  return self;
}
- (User_Builder*) clearPosition {
  result.hasPosition = NO;
  result.position = [Position defaultInstance];
  return self;
}
- (BOOL) hasDepartment {
  return result.hasDepartment;
}
- (Department*) department {
  return result.department;
}
- (User_Builder*) setDepartment:(Department*) value {
  result.hasDepartment = YES;
  result.department = value;
  return self;
}
- (User_Builder*) setDepartmentBuilder:(Department_Builder*) builderForValue {
  return [self setDepartment:[builderForValue build]];
}
- (User_Builder*) mergeDepartment:(Department*) value {
  if (result.hasDepartment &&
      result.department != [Department defaultInstance]) {
    result.department =
      [[[Department builderWithPrototype:result.department] mergeFrom:value] buildPartial];
  } else {
    result.department = value;
  }
  result.hasDepartment = YES;
  return self;
}
- (User_Builder*) clearDepartment {
  result.hasDepartment = NO;
  result.department = [Department defaultInstance];
  return self;
}
- (BOOL) hasCompany {
  return result.hasCompany;
}
- (Company*) company {
  return result.company;
}
- (User_Builder*) setCompany:(Company*) value {
  result.hasCompany = YES;
  result.company = value;
  return self;
}
- (User_Builder*) setCompanyBuilder:(Company_Builder*) builderForValue {
  return [self setCompany:[builderForValue build]];
}
- (User_Builder*) mergeCompany:(Company*) value {
  if (result.hasCompany &&
      result.company != [Company defaultInstance]) {
    result.company =
      [[[Company builderWithPrototype:result.company] mergeFrom:value] buildPartial];
  } else {
    result.company = value;
  }
  result.hasCompany = YES;
  return self;
}
- (User_Builder*) clearCompany {
  result.hasCompany = NO;
  result.company = [Company defaultInstance];
  return self;
}
- (BOOL) hasSpell {
  return result.hasSpell;
}
- (NSString*) spell {
  return result.spell;
}
- (User_Builder*) setSpell:(NSString*) value {
  result.hasSpell = YES;
  result.spell = value;
  return self;
}
- (User_Builder*) clearSpell {
  result.hasSpell = NO;
  result.spell = @"";
  return self;
}
- (BOOL) hasExpired {
  return result.hasExpired;
}
- (NSString*) expired {
  return result.expired;
}
- (User_Builder*) setExpired:(NSString*) value {
  result.hasExpired = YES;
  result.expired = value;
  return self;
}
- (User_Builder*) clearExpired {
  result.hasExpired = NO;
  result.expired = @"";
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (User_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (User_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (User_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (User_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (BOOL) hasRoleType {
  return result.hasRoleType;
}
- (NSString*) roleType {
  return result.roleType;
}
- (User_Builder*) setRoleType:(NSString*) value {
  result.hasRoleType = YES;
  result.roleType = value;
  return self;
}
- (User_Builder*) clearRoleType {
  result.hasRoleType = NO;
  result.roleType = @"";
  return self;
}
- (BOOL) hasDevice {
  return result.hasDevice;
}
- (Device*) device {
  return result.device;
}
- (User_Builder*) setDevice:(Device*) value {
  result.hasDevice = YES;
  result.device = value;
  return self;
}
- (User_Builder*) setDeviceBuilder:(Device_Builder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (User_Builder*) mergeDevice:(Device*) value {
  if (result.hasDevice &&
      result.device != [Device defaultInstance]) {
    result.device =
      [[[Device builderWithPrototype:result.device] mergeFrom:value] buildPartial];
  } else {
    result.device = value;
  }
  result.hasDevice = YES;
  return self;
}
- (User_Builder*) clearDevice {
  result.hasDevice = NO;
  result.device = [Device defaultInstance];
  return self;
}
- (BOOL) hasCountData {
  return result.hasCountData;
}
- (NSString*) countData {
  return result.countData;
}
- (User_Builder*) setCountData:(NSString*) value {
  result.hasCountData = YES;
  result.countData = value;
  return self;
}
- (User_Builder*) clearCountData {
  result.hasCountData = NO;
  result.countData = @"";
  return self;
}
- (PBAppendableArray *)devices {
  return result.devicesArray;
}
- (Device*)devicesAtIndex:(NSUInteger)index {
  return [result devicesAtIndex:index];
}
- (User_Builder *)addDevices:(Device*)value {
  if (result.devicesArray == nil) {
    result.devicesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.devicesArray addObject:value];
  return self;
}
- (User_Builder *)setDevicesArray:(NSArray *)array {
  result.devicesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)setDevicesValues:(const Device* *)values count:(NSUInteger)count {
  result.devicesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (User_Builder *)clearDevices {
  result.devicesArray = nil;
  return self;
}
- (BOOL) hasPermission {
  return result.hasPermission;
}
- (Permission*) permission {
  return result.permission;
}
- (User_Builder*) setPermission:(Permission*) value {
  result.hasPermission = YES;
  result.permission = value;
  return self;
}
- (User_Builder*) setPermissionBuilder:(Permission_Builder*) builderForValue {
  return [self setPermission:[builderForValue build]];
}
- (User_Builder*) mergePermission:(Permission*) value {
  if (result.hasPermission &&
      result.permission != [Permission defaultInstance]) {
    result.permission =
      [[[Permission builderWithPrototype:result.permission] mergeFrom:value] buildPartial];
  } else {
    result.permission = value;
  }
  result.hasPermission = YES;
  return self;
}
- (User_Builder*) clearPermission {
  result.hasPermission = NO;
  result.permission = [Permission defaultInstance];
  return self;
}
- (BOOL) hasExpiredMessage {
  return result.hasExpiredMessage;
}
- (NSString*) expiredMessage {
  return result.expiredMessage;
}
- (User_Builder*) setExpiredMessage:(NSString*) value {
  result.hasExpiredMessage = YES;
  result.expiredMessage = value;
  return self;
}
- (User_Builder*) clearExpiredMessage {
  result.hasExpiredMessage = NO;
  result.expiredMessage = @"";
  return self;
}
@end

@interface PageUser ()
@property (retain) Pagination* page;
@property (retain) PBAppendableArray * usersArray;
@end

@implementation PageUser

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
@synthesize usersArray;
@dynamic users;
- (void) dealloc {
  self.page = nil;
  self.usersArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = [Pagination defaultInstance];
  }
  return self;
}
static PageUser* defaultPageUserInstance = nil;
+ (void) initialize {
  if (self == [PageUser class]) {
    defaultPageUserInstance = [[PageUser alloc] init];
  }
}
+ (PageUser*) defaultInstance {
  return defaultPageUserInstance;
}
- (PageUser*) defaultInstance {
  return defaultPageUserInstance;
}
- (PBArray *)users {
  return usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [usersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasPage) {
    if (!self.page.isInitialized) {
      return NO;
    }
  }
  for (User* element in self.users) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeMessage:1 value:self.page];
  }
  for (User *element in self.usersArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeMessageSize(1, self.page);
  }
  for (User *element in self.usersArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PageUser*) parseFromData:(NSData*) data {
  return (PageUser*)[[[PageUser builder] mergeFromData:data] build];
}
+ (PageUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageUser*)[[[PageUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PageUser*) parseFromInputStream:(NSInputStream*) input {
  return (PageUser*)[[[PageUser builder] mergeFromInputStream:input] build];
}
+ (PageUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageUser*)[[[PageUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PageUser*)[[[PageUser builder] mergeFromCodedInputStream:input] build];
}
+ (PageUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PageUser*)[[[PageUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PageUser_Builder*) builder {
  return [[[PageUser_Builder alloc] init] autorelease];
}
+ (PageUser_Builder*) builderWithPrototype:(PageUser*) prototype {
  return [[PageUser builder] mergeFrom:prototype];
}
- (PageUser_Builder*) builder {
  return [PageUser builder];
}
- (PageUser_Builder*) toBuilder {
  return [PageUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@ {\n", indent, @"page"];
    [self.page writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (User* element in self.usersArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"users"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PageUser class]]) {
    return NO;
  }
  PageUser *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || [self.page isEqual:otherMessage.page]) &&
      [self.usersArray isEqualToArray:otherMessage.usersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [self.page hash];
  }
  for (User* element in self.usersArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PageUser_Builder()
@property (retain) PageUser* result;
@end

@implementation PageUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PageUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PageUser_Builder*) clear {
  self.result = [[[PageUser alloc] init] autorelease];
  return self;
}
- (PageUser_Builder*) clone {
  return [PageUser builderWithPrototype:result];
}
- (PageUser*) defaultInstance {
  return [PageUser defaultInstance];
}
- (PageUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PageUser*) buildPartial {
  PageUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PageUser_Builder*) mergeFrom:(PageUser*) other {
  if (other == [PageUser defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self mergePage:other.page];
  }
  if (other.usersArray.count > 0) {
    if (result.usersArray == nil) {
      result.usersArray = [[other.usersArray copyWithZone:[other.usersArray zone]] autorelease];
    } else {
      [result.usersArray appendArray:other.usersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PageUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PageUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Pagination_Builder* subBuilder = [Pagination builder];
        if (self.hasPage) {
          [subBuilder mergeFrom:self.page];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsers:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (Pagination*) page {
  return result.page;
}
- (PageUser_Builder*) setPage:(Pagination*) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PageUser_Builder*) setPageBuilder:(Pagination_Builder*) builderForValue {
  return [self setPage:[builderForValue build]];
}
- (PageUser_Builder*) mergePage:(Pagination*) value {
  if (result.hasPage &&
      result.page != [Pagination defaultInstance]) {
    result.page =
      [[[Pagination builderWithPrototype:result.page] mergeFrom:value] buildPartial];
  } else {
    result.page = value;
  }
  result.hasPage = YES;
  return self;
}
- (PageUser_Builder*) clearPage {
  result.hasPage = NO;
  result.page = [Pagination defaultInstance];
  return self;
}
- (PBAppendableArray *)users {
  return result.usersArray;
}
- (User*)usersAtIndex:(NSUInteger)index {
  return [result usersAtIndex:index];
}
- (PageUser_Builder *)addUsers:(User*)value {
  if (result.usersArray == nil) {
    result.usersArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.usersArray addObject:value];
  return self;
}
- (PageUser_Builder *)setUsersArray:(NSArray *)array {
  result.usersArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PageUser_Builder *)setUsersValues:(const User* *)values count:(NSUInteger)count {
  result.usersArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PageUser_Builder *)clearUsers {
  result.usersArray = nil;
  return self;
}
@end

@interface UserParams ()
@property int32_t page;
@property (retain) User* user;
@property (retain) Location* location;
@property (retain) PBAppendableArray * departmentArray;
@property BOOL tag;
@end

@implementation UserParams

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
@synthesize departmentArray;
@dynamic department;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
- (BOOL) tag {
  return !!tag_;
}
- (void) setTag:(BOOL) value_ {
  tag_ = !!value_;
}
- (void) dealloc {
  self.user = nil;
  self.location = nil;
  self.departmentArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.user = [User defaultInstance];
    self.location = [Location defaultInstance];
    self.tag = NO;
  }
  return self;
}
static UserParams* defaultUserParamsInstance = nil;
+ (void) initialize {
  if (self == [UserParams class]) {
    defaultUserParamsInstance = [[UserParams alloc] init];
  }
}
+ (UserParams*) defaultInstance {
  return defaultUserParamsInstance;
}
- (UserParams*) defaultInstance {
  return defaultUserParamsInstance;
}
- (PBArray *)department {
  return departmentArray;
}
- (Department*)departmentAtIndex:(NSUInteger)index {
  return [departmentArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasUser) {
    if (!self.user.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocation) {
    if (!self.location.isInitialized) {
      return NO;
    }
  }
  for (Department* element in self.department) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeInt32:1 value:self.page];
  }
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasLocation) {
    [output writeMessage:3 value:self.location];
  }
  for (Department *element in self.departmentArray) {
    [output writeMessage:4 value:element];
  }
  if (self.hasTag) {
    [output writeBool:5 value:self.tag];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeInt32Size(1, self.page);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(3, self.location);
  }
  for (Department *element in self.departmentArray) {
    size_ += computeMessageSize(4, element);
  }
  if (self.hasTag) {
    size_ += computeBoolSize(5, self.tag);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserParams*) parseFromData:(NSData*) data {
  return (UserParams*)[[[UserParams builder] mergeFromData:data] build];
}
+ (UserParams*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserParams*)[[[UserParams builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserParams*) parseFromInputStream:(NSInputStream*) input {
  return (UserParams*)[[[UserParams builder] mergeFromInputStream:input] build];
}
+ (UserParams*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserParams*)[[[UserParams builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserParams*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserParams*)[[[UserParams builder] mergeFromCodedInputStream:input] build];
}
+ (UserParams*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserParams*)[[[UserParams builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserParams_Builder*) builder {
  return [[[UserParams_Builder alloc] init] autorelease];
}
+ (UserParams_Builder*) builderWithPrototype:(UserParams*) prototype {
  return [[UserParams builder] mergeFrom:prototype];
}
- (UserParams_Builder*) builder {
  return [UserParams builder];
}
- (UserParams_Builder*) toBuilder {
  return [UserParams builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInt:self.page]];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (Department* element in self.departmentArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"department"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", [NSNumber numberWithBool:self.tag]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserParams class]]) {
    return NO;
  }
  UserParams *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      [self.departmentArray isEqualToArray:otherMessage.departmentArray] &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || self.tag == otherMessage.tag) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.page] hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  for (Department* element in self.departmentArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tag] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserParams_Builder()
@property (retain) UserParams* result;
@end

@implementation UserParams_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserParams alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserParams_Builder*) clear {
  self.result = [[[UserParams alloc] init] autorelease];
  return self;
}
- (UserParams_Builder*) clone {
  return [UserParams builderWithPrototype:result];
}
- (UserParams*) defaultInstance {
  return [UserParams defaultInstance];
}
- (UserParams*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserParams*) buildPartial {
  UserParams* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserParams_Builder*) mergeFrom:(UserParams*) other {
  if (other == [UserParams defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  if (other.departmentArray.count > 0) {
    if (result.departmentArray == nil) {
      result.departmentArray = [[other.departmentArray copyWithZone:[other.departmentArray zone]] autorelease];
    } else {
      [result.departmentArray appendArray:other.departmentArray];
    }
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserParams_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readInt32]];
        break;
      }
      case 18: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Location_Builder* subBuilder = [Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Department_Builder* subBuilder = [Department builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDepartment:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setTag:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (int32_t) page {
  return result.page;
}
- (UserParams_Builder*) setPage:(int32_t) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (UserParams_Builder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (UserParams_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (UserParams_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (UserParams_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (UserParams_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (Location*) location {
  return result.location;
}
- (UserParams_Builder*) setLocation:(Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (UserParams_Builder*) setLocationBuilder:(Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (UserParams_Builder*) mergeLocation:(Location*) value {
  if (result.hasLocation &&
      result.location != [Location defaultInstance]) {
    result.location =
      [[[Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (UserParams_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [Location defaultInstance];
  return self;
}
- (PBAppendableArray *)department {
  return result.departmentArray;
}
- (Department*)departmentAtIndex:(NSUInteger)index {
  return [result departmentAtIndex:index];
}
- (UserParams_Builder *)addDepartment:(Department*)value {
  if (result.departmentArray == nil) {
    result.departmentArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.departmentArray addObject:value];
  return self;
}
- (UserParams_Builder *)setDepartmentArray:(NSArray *)array {
  result.departmentArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (UserParams_Builder *)setDepartmentValues:(const Department* *)values count:(NSUInteger)count {
  result.departmentArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (UserParams_Builder *)clearDepartment {
  result.departmentArray = nil;
  return self;
}
- (BOOL) hasTag {
  return result.hasTag;
}
- (BOOL) tag {
  return result.tag;
}
- (UserParams_Builder*) setTag:(BOOL) value {
  result.hasTag = YES;
  result.tag = value;
  return self;
}
- (UserParams_Builder*) clearTag {
  result.hasTag = NO;
  result.tag = NO;
  return self;
}
@end

@interface Permission ()
@property (retain) NSString* name;
@property (retain) NSString* value;
@end

@implementation Permission

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
  hasValue_ = !!value_;
}
@synthesize value;
- (void) dealloc {
  self.name = nil;
  self.value = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = @"";
  }
  return self;
}
static Permission* defaultPermissionInstance = nil;
+ (void) initialize {
  if (self == [Permission class]) {
    defaultPermissionInstance = [[Permission alloc] init];
  }
}
+ (Permission*) defaultInstance {
  return defaultPermissionInstance;
}
- (Permission*) defaultInstance {
  return defaultPermissionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Permission*) parseFromData:(NSData*) data {
  return (Permission*)[[[Permission builder] mergeFromData:data] build];
}
+ (Permission*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Permission*)[[[Permission builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Permission*) parseFromInputStream:(NSInputStream*) input {
  return (Permission*)[[[Permission builder] mergeFromInputStream:input] build];
}
+ (Permission*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Permission*)[[[Permission builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Permission*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Permission*)[[[Permission builder] mergeFromCodedInputStream:input] build];
}
+ (Permission*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Permission*)[[[Permission builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Permission_Builder*) builder {
  return [[[Permission_Builder alloc] init] autorelease];
}
+ (Permission_Builder*) builderWithPrototype:(Permission*) prototype {
  return [[Permission builder] mergeFrom:prototype];
}
- (Permission_Builder*) builder {
  return [Permission builder];
}
- (Permission_Builder*) toBuilder {
  return [Permission builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Permission class]]) {
    return NO;
  }
  Permission *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Permission_Builder()
@property (retain) Permission* result;
@end

@implementation Permission_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Permission alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Permission_Builder*) clear {
  self.result = [[[Permission alloc] init] autorelease];
  return self;
}
- (Permission_Builder*) clone {
  return [Permission builderWithPrototype:result];
}
- (Permission*) defaultInstance {
  return [Permission defaultInstance];
}
- (Permission*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Permission*) buildPartial {
  Permission* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Permission_Builder*) mergeFrom:(Permission*) other {
  if (other == [Permission defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Permission_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Permission_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Permission_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Permission_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (Permission_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (Permission_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface Department ()
@property int32_t id;
@property (retain) NSString* name;
@property int32_t parentId;
@property int32_t sortId;
@end

@implementation Department

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasParentId {
  return !!hasParentId_;
}
- (void) setHasParentId:(BOOL) value_ {
  hasParentId_ = !!value_;
}
@synthesize parentId;
- (BOOL) hasSortId {
  return !!hasSortId_;
}
- (void) setHasSortId:(BOOL) value_ {
  hasSortId_ = !!value_;
}
@synthesize sortId;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.parentId = 0;
    self.sortId = 0;
  }
  return self;
}
static Department* defaultDepartmentInstance = nil;
+ (void) initialize {
  if (self == [Department class]) {
    defaultDepartmentInstance = [[Department alloc] init];
  }
}
+ (Department*) defaultInstance {
  return defaultDepartmentInstance;
}
- (Department*) defaultInstance {
  return defaultDepartmentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasParentId) {
    [output writeInt32:3 value:self.parentId];
  }
  if (self.hasSortId) {
    [output writeInt32:4 value:self.sortId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasParentId) {
    size_ += computeInt32Size(3, self.parentId);
  }
  if (self.hasSortId) {
    size_ += computeInt32Size(4, self.sortId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Department*) parseFromData:(NSData*) data {
  return (Department*)[[[Department builder] mergeFromData:data] build];
}
+ (Department*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Department*)[[[Department builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Department*) parseFromInputStream:(NSInputStream*) input {
  return (Department*)[[[Department builder] mergeFromInputStream:input] build];
}
+ (Department*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Department*)[[[Department builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Department*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Department*)[[[Department builder] mergeFromCodedInputStream:input] build];
}
+ (Department*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Department*)[[[Department builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Department_Builder*) builder {
  return [[[Department_Builder alloc] init] autorelease];
}
+ (Department_Builder*) builderWithPrototype:(Department*) prototype {
  return [[Department builder] mergeFrom:prototype];
}
- (Department_Builder*) builder {
  return [Department builder];
}
- (Department_Builder*) toBuilder {
  return [Department builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasParentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentId", [NSNumber numberWithInt:self.parentId]];
  }
  if (self.hasSortId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sortId", [NSNumber numberWithInt:self.sortId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Department class]]) {
    return NO;
  }
  Department *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasParentId == otherMessage.hasParentId &&
      (!self.hasParentId || self.parentId == otherMessage.parentId) &&
      self.hasSortId == otherMessage.hasSortId &&
      (!self.hasSortId || self.sortId == otherMessage.sortId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasParentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentId] hash];
  }
  if (self.hasSortId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sortId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Department_Builder()
@property (retain) Department* result;
@end

@implementation Department_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Department alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Department_Builder*) clear {
  self.result = [[[Department alloc] init] autorelease];
  return self;
}
- (Department_Builder*) clone {
  return [Department builderWithPrototype:result];
}
- (Department*) defaultInstance {
  return [Department defaultInstance];
}
- (Department*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Department*) buildPartial {
  Department* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Department_Builder*) mergeFrom:(Department*) other {
  if (other == [Department defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasParentId) {
    [self setParentId:other.parentId];
  }
  if (other.hasSortId) {
    [self setSortId:other.sortId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Department_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Department_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setParentId:[input readInt32]];
        break;
      }
      case 32: {
        [self setSortId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Department_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Department_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Department_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Department_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasParentId {
  return result.hasParentId;
}
- (int32_t) parentId {
  return result.parentId;
}
- (Department_Builder*) setParentId:(int32_t) value {
  result.hasParentId = YES;
  result.parentId = value;
  return self;
}
- (Department_Builder*) clearParentId {
  result.hasParentId = NO;
  result.parentId = 0;
  return self;
}
- (BOOL) hasSortId {
  return result.hasSortId;
}
- (int32_t) sortId {
  return result.sortId;
}
- (Department_Builder*) setSortId:(int32_t) value {
  result.hasSortId = YES;
  result.sortId = value;
  return self;
}
- (Department_Builder*) clearSortId {
  result.hasSortId = NO;
  result.sortId = 0;
  return self;
}
@end

@interface Position ()
@property int32_t id;
@property (retain) NSString* name;
@end

@implementation Position

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static Position* defaultPositionInstance = nil;
+ (void) initialize {
  if (self == [Position class]) {
    defaultPositionInstance = [[Position alloc] init];
  }
}
+ (Position*) defaultInstance {
  return defaultPositionInstance;
}
- (Position*) defaultInstance {
  return defaultPositionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Position*) parseFromData:(NSData*) data {
  return (Position*)[[[Position builder] mergeFromData:data] build];
}
+ (Position*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Position*) parseFromInputStream:(NSInputStream*) input {
  return (Position*)[[[Position builder] mergeFromInputStream:input] build];
}
+ (Position*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Position*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Position*)[[[Position builder] mergeFromCodedInputStream:input] build];
}
+ (Position*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Position*)[[[Position builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Position_Builder*) builder {
  return [[[Position_Builder alloc] init] autorelease];
}
+ (Position_Builder*) builderWithPrototype:(Position*) prototype {
  return [[Position builder] mergeFrom:prototype];
}
- (Position_Builder*) builder {
  return [Position builder];
}
- (Position_Builder*) toBuilder {
  return [Position builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Position class]]) {
    return NO;
  }
  Position *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Position_Builder()
@property (retain) Position* result;
@end

@implementation Position_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Position alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Position_Builder*) clear {
  self.result = [[[Position alloc] init] autorelease];
  return self;
}
- (Position_Builder*) clone {
  return [Position builderWithPrototype:result];
}
- (Position*) defaultInstance {
  return [Position defaultInstance];
}
- (Position*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Position*) buildPartial {
  Position* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Position_Builder*) mergeFrom:(Position*) other {
  if (other == [Position defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Position_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Position_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Position_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Position_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Position_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Position_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface Company ()
@property (retain) NSString* id;
@property (retain) NSString* name;
@property (retain) NSString* desc;
@property (retain) NSString* idea;
@property (retain) PBAppendableArray * filesArray;
@property (retain) PBAppendableArray * filePathArray;
@end

@implementation Company

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasIdea {
  return !!hasIdea_;
}
- (void) setHasIdea:(BOOL) value_ {
  hasIdea_ = !!value_;
}
@synthesize idea;
@synthesize filesArray;
@dynamic files;
@synthesize filePathArray;
@dynamic filePath;
- (void) dealloc {
  self.id = nil;
  self.name = nil;
  self.desc = nil;
  self.idea = nil;
  self.filesArray = nil;
  self.filePathArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.name = @"";
    self.desc = @"";
    self.idea = @"";
  }
  return self;
}
static Company* defaultCompanyInstance = nil;
+ (void) initialize {
  if (self == [Company class]) {
    defaultCompanyInstance = [[Company alloc] init];
  }
}
+ (Company*) defaultInstance {
  return defaultCompanyInstance;
}
- (Company*) defaultInstance {
  return defaultCompanyInstance;
}
- (PBArray *)files {
  return filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [filesArray objectAtIndex:index];
}
- (PBArray *)filePath {
  return filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [filePathArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:3 value:self.desc];
  }
  if (self.hasIdea) {
    [output writeString:4 value:self.idea];
  }
  const NSUInteger filesArrayCount = self.filesArray.count;
  if (filesArrayCount > 0) {
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < filesArrayCount; ++i) {
      [output writeData:5 value:values[i]];
    }
  }
  const NSUInteger filePathArrayCount = self.filePathArray.count;
  if (filePathArrayCount > 0) {
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < filePathArrayCount; ++i) {
      [output writeString:6 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(3, self.desc);
  }
  if (self.hasIdea) {
    size_ += computeStringSize(4, self.idea);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filesArray.count;
    const NSData* *values = (const NSData* *)self.filesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeDataSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.filePathArray.count;
    const NSString* *values = (const NSString* *)self.filePathArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeStringSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Company*) parseFromData:(NSData*) data {
  return (Company*)[[[Company builder] mergeFromData:data] build];
}
+ (Company*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Company*)[[[Company builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Company*) parseFromInputStream:(NSInputStream*) input {
  return (Company*)[[[Company builder] mergeFromInputStream:input] build];
}
+ (Company*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Company*)[[[Company builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Company*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Company*)[[[Company builder] mergeFromCodedInputStream:input] build];
}
+ (Company*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Company*)[[[Company builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Company_Builder*) builder {
  return [[[Company_Builder alloc] init] autorelease];
}
+ (Company_Builder*) builderWithPrototype:(Company*) prototype {
  return [[Company builder] mergeFrom:prototype];
}
- (Company_Builder*) builder {
  return [Company builder];
}
- (Company_Builder*) toBuilder {
  return [Company builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasIdea) {
    [output appendFormat:@"%@%@: %@\n", indent, @"idea", self.idea];
  }
  for (NSData* element in self.filesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"files", element];
  }
  for (NSString* element in self.filePathArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filePath", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Company class]]) {
    return NO;
  }
  Company *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasIdea == otherMessage.hasIdea &&
      (!self.hasIdea || [self.idea isEqual:otherMessage.idea]) &&
      [self.filesArray isEqualToArray:otherMessage.filesArray] &&
      [self.filePathArray isEqualToArray:otherMessage.filePathArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasIdea) {
    hashCode = hashCode * 31 + [self.idea hash];
  }
  for (NSData* element in self.filesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString* element in self.filePathArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Company_Builder()
@property (retain) Company* result;
@end

@implementation Company_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Company alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Company_Builder*) clear {
  self.result = [[[Company alloc] init] autorelease];
  return self;
}
- (Company_Builder*) clone {
  return [Company builderWithPrototype:result];
}
- (Company*) defaultInstance {
  return [Company defaultInstance];
}
- (Company*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Company*) buildPartial {
  Company* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Company_Builder*) mergeFrom:(Company*) other {
  if (other == [Company defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasIdea) {
    [self setIdea:other.idea];
  }
  if (other.filesArray.count > 0) {
    if (result.filesArray == nil) {
      result.filesArray = [[other.filesArray copyWithZone:[other.filesArray zone]] autorelease];
    } else {
      [result.filesArray appendArray:other.filesArray];
    }
  }
  if (other.filePathArray.count > 0) {
    if (result.filePathArray == nil) {
      result.filePathArray = [[other.filePathArray copyWithZone:[other.filePathArray zone]] autorelease];
    } else {
      [result.filePathArray appendArray:other.filePathArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Company_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Company_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDesc:[input readString]];
        break;
      }
      case 34: {
        [self setIdea:[input readString]];
        break;
      }
      case 42: {
        [self addFiles:[input readData]];
        break;
      }
      case 50: {
        [self addFilePath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (Company_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Company_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Company_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Company_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (Company_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (Company_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasIdea {
  return result.hasIdea;
}
- (NSString*) idea {
  return result.idea;
}
- (Company_Builder*) setIdea:(NSString*) value {
  result.hasIdea = YES;
  result.idea = value;
  return self;
}
- (Company_Builder*) clearIdea {
  result.hasIdea = NO;
  result.idea = @"";
  return self;
}
- (PBAppendableArray *)files {
  return result.filesArray;
}
- (NSData*)filesAtIndex:(NSUInteger)index {
  return [result filesAtIndex:index];
}
- (Company_Builder *)addFiles:(NSData*)value {
  if (result.filesArray == nil) {
    result.filesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filesArray addObject:value];
  return self;
}
- (Company_Builder *)setFilesArray:(NSArray *)array {
  result.filesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Company_Builder *)setFilesValues:(const NSData* *)values count:(NSUInteger)count {
  result.filesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Company_Builder *)clearFiles {
  result.filesArray = nil;
  return self;
}
- (PBAppendableArray *)filePath {
  return result.filePathArray;
}
- (NSString*)filePathAtIndex:(NSUInteger)index {
  return [result filePathAtIndex:index];
}
- (Company_Builder *)addFilePath:(NSString*)value {
  if (result.filePathArray == nil) {
    result.filePathArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.filePathArray addObject:value];
  return self;
}
- (Company_Builder *)setFilePathArray:(NSArray *)array {
  result.filePathArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (Company_Builder *)setFilePathValues:(const NSString* *)values count:(NSUInteger)count {
  result.filePathArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (Company_Builder *)clearFilePath {
  result.filePathArray = nil;
  return self;
}
@end

@interface Device ()
@property (retain) NSString* appVersion;
@property int32_t appVersionCode;
@property (retain) NSString* deviceType;
@property (retain) NSString* model;
@property (retain) NSString* osVersion;
@property (retain) NSString* deviceId;
@property (retain) NSString* deviceToken;
@end

@implementation Device

- (BOOL) hasAppVersion {
  return !!hasAppVersion_;
}
- (void) setHasAppVersion:(BOOL) value_ {
  hasAppVersion_ = !!value_;
}
@synthesize appVersion;
- (BOOL) hasAppVersionCode {
  return !!hasAppVersionCode_;
}
- (void) setHasAppVersionCode:(BOOL) value_ {
  hasAppVersionCode_ = !!value_;
}
@synthesize appVersionCode;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value_ {
  hasDeviceType_ = !!value_;
}
@synthesize deviceType;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) value_ {
  hasModel_ = !!value_;
}
@synthesize model;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value_ {
  hasOsVersion_ = !!value_;
}
@synthesize osVersion;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value_ {
  hasDeviceId_ = !!value_;
}
@synthesize deviceId;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) value_ {
  hasDeviceToken_ = !!value_;
}
@synthesize deviceToken;
- (void) dealloc {
  self.appVersion = nil;
  self.deviceType = nil;
  self.model = nil;
  self.osVersion = nil;
  self.deviceId = nil;
  self.deviceToken = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.appVersion = @"";
    self.appVersionCode = 0;
    self.deviceType = @"";
    self.model = @"";
    self.osVersion = @"";
    self.deviceId = @"";
    self.deviceToken = @"";
  }
  return self;
}
static Device* defaultDeviceInstance = nil;
+ (void) initialize {
  if (self == [Device class]) {
    defaultDeviceInstance = [[Device alloc] init];
  }
}
+ (Device*) defaultInstance {
  return defaultDeviceInstance;
}
- (Device*) defaultInstance {
  return defaultDeviceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppVersion) {
    [output writeString:1 value:self.appVersion];
  }
  if (self.hasAppVersionCode) {
    [output writeInt32:2 value:self.appVersionCode];
  }
  if (self.hasDeviceType) {
    [output writeString:3 value:self.deviceType];
  }
  if (self.hasModel) {
    [output writeString:4 value:self.model];
  }
  if (self.hasOsVersion) {
    [output writeString:5 value:self.osVersion];
  }
  if (self.hasDeviceId) {
    [output writeString:6 value:self.deviceId];
  }
  if (self.hasDeviceToken) {
    [output writeString:7 value:self.deviceToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAppVersion) {
    size_ += computeStringSize(1, self.appVersion);
  }
  if (self.hasAppVersionCode) {
    size_ += computeInt32Size(2, self.appVersionCode);
  }
  if (self.hasDeviceType) {
    size_ += computeStringSize(3, self.deviceType);
  }
  if (self.hasModel) {
    size_ += computeStringSize(4, self.model);
  }
  if (self.hasOsVersion) {
    size_ += computeStringSize(5, self.osVersion);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(6, self.deviceId);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(7, self.deviceToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Device*) parseFromData:(NSData*) data {
  return (Device*)[[[Device builder] mergeFromData:data] build];
}
+ (Device*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input {
  return (Device*)[[[Device builder] mergeFromInputStream:input] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device_Builder*) builder {
  return [[[Device_Builder alloc] init] autorelease];
}
+ (Device_Builder*) builderWithPrototype:(Device*) prototype {
  return [[Device builder] mergeFrom:prototype];
}
- (Device_Builder*) builder {
  return [Device builder];
}
- (Device_Builder*) toBuilder {
  return [Device builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAppVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersion", self.appVersion];
  }
  if (self.hasAppVersionCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appVersionCode", [NSNumber numberWithInt:self.appVersionCode]];
  }
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", self.deviceType];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Device class]]) {
    return NO;
  }
  Device *otherMessage = other;
  return
      self.hasAppVersion == otherMessage.hasAppVersion &&
      (!self.hasAppVersion || [self.appVersion isEqual:otherMessage.appVersion]) &&
      self.hasAppVersionCode == otherMessage.hasAppVersionCode &&
      (!self.hasAppVersionCode || self.appVersionCode == otherMessage.appVersionCode) &&
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || [self.deviceType isEqual:otherMessage.deviceType]) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAppVersion) {
    hashCode = hashCode * 31 + [self.appVersion hash];
  }
  if (self.hasAppVersionCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.appVersionCode] hash];
  }
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + [self.deviceType hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Device_Builder()
@property (retain) Device* result;
@end

@implementation Device_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Device alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Device_Builder*) clear {
  self.result = [[[Device alloc] init] autorelease];
  return self;
}
- (Device_Builder*) clone {
  return [Device builderWithPrototype:result];
}
- (Device*) defaultInstance {
  return [Device defaultInstance];
}
- (Device*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Device*) buildPartial {
  Device* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Device_Builder*) mergeFrom:(Device*) other {
  if (other == [Device defaultInstance]) {
    return self;
  }
  if (other.hasAppVersion) {
    [self setAppVersion:other.appVersion];
  }
  if (other.hasAppVersionCode) {
    [self setAppVersionCode:other.appVersionCode];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Device_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Device_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppVersion:[input readString]];
        break;
      }
      case 16: {
        [self setAppVersionCode:[input readInt32]];
        break;
      }
      case 26: {
        [self setDeviceType:[input readString]];
        break;
      }
      case 34: {
        [self setModel:[input readString]];
        break;
      }
      case 42: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 50: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 58: {
        [self setDeviceToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAppVersion {
  return result.hasAppVersion;
}
- (NSString*) appVersion {
  return result.appVersion;
}
- (Device_Builder*) setAppVersion:(NSString*) value {
  result.hasAppVersion = YES;
  result.appVersion = value;
  return self;
}
- (Device_Builder*) clearAppVersion {
  result.hasAppVersion = NO;
  result.appVersion = @"";
  return self;
}
- (BOOL) hasAppVersionCode {
  return result.hasAppVersionCode;
}
- (int32_t) appVersionCode {
  return result.appVersionCode;
}
- (Device_Builder*) setAppVersionCode:(int32_t) value {
  result.hasAppVersionCode = YES;
  result.appVersionCode = value;
  return self;
}
- (Device_Builder*) clearAppVersionCode {
  result.hasAppVersionCode = NO;
  result.appVersionCode = 0;
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (NSString*) deviceType {
  return result.deviceType;
}
- (Device_Builder*) setDeviceType:(NSString*) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (Device_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = @"";
  return self;
}
- (BOOL) hasModel {
  return result.hasModel;
}
- (NSString*) model {
  return result.model;
}
- (Device_Builder*) setModel:(NSString*) value {
  result.hasModel = YES;
  result.model = value;
  return self;
}
- (Device_Builder*) clearModel {
  result.hasModel = NO;
  result.model = @"";
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (Device_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (Device_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (Device_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (Device_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return result.hasDeviceToken;
}
- (NSString*) deviceToken {
  return result.deviceToken;
}
- (Device_Builder*) setDeviceToken:(NSString*) value {
  result.hasDeviceToken = YES;
  result.deviceToken = value;
  return self;
}
- (Device_Builder*) clearDeviceToken {
  result.hasDeviceToken = NO;
  result.deviceToken = @"";
  return self;
}
@end

